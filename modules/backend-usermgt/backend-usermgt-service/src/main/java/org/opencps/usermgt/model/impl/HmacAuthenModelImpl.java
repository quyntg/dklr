/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.usermgt.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import org.opencps.usermgt.model.HmacAuthen;
import org.opencps.usermgt.model.HmacAuthenModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the HmacAuthen service. Represents a row in the &quot;opencps_hmacauth&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link HmacAuthenModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HmacAuthenImpl}.
 * </p>
 *
 * @author khoavu
 * @see HmacAuthenImpl
 * @see HmacAuthen
 * @see HmacAuthenModel
 * @generated
 */
@ProviderType
public class HmacAuthenModelImpl extends BaseModelImpl<HmacAuthen>
	implements HmacAuthenModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a hmac authen model instance should use the {@link HmacAuthen} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_hmacauth";
	public static final Object[][] TABLE_COLUMNS = {
			{ "hmacAuthId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "secret", Types.VARCHAR },
			{ "permanent", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("hmacAuthId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("secret", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permanent", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table opencps_hmacauth (hmacAuthId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,secret VARCHAR(75) null,permanent BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table opencps_hmacauth";
	public static final String ORDER_BY_JPQL = " ORDER BY hmacAuthen.createDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_hmacauth.createDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.usermgt.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.usermgt.model.HmacAuthen"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.usermgt.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.usermgt.model.HmacAuthen"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(org.opencps.backend.usermgt.service.util.ServiceProps.get(
				"lock.expiration.time.org.opencps.usermgt.model.HmacAuthen"));

	public HmacAuthenModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _hmacAuthId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setHmacAuthId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _hmacAuthId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return HmacAuthen.class;
	}

	@Override
	public String getModelClassName() {
		return HmacAuthen.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("hmacAuthId", getHmacAuthId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("secret", getSecret());
		attributes.put("permanent", getPermanent());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long hmacAuthId = (Long)attributes.get("hmacAuthId");

		if (hmacAuthId != null) {
			setHmacAuthId(hmacAuthId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String secret = (String)attributes.get("secret");

		if (secret != null) {
			setSecret(secret);
		}

		Boolean permanent = (Boolean)attributes.get("permanent");

		if (permanent != null) {
			setPermanent(permanent);
		}
	}

	@Override
	public long getHmacAuthId() {
		return _hmacAuthId;
	}

	@Override
	public void setHmacAuthId(long hmacAuthId) {
		_hmacAuthId = hmacAuthId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getSecret() {
		if (_secret == null) {
			return StringPool.BLANK;
		}
		else {
			return _secret;
		}
	}

	@Override
	public void setSecret(String secret) {
		_secret = secret;
	}

	@Override
	public boolean getPermanent() {
		return _permanent;
	}

	@Override
	public boolean isPermanent() {
		return _permanent;
	}

	@Override
	public void setPermanent(boolean permanent) {
		_permanent = permanent;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			HmacAuthen.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public HmacAuthen toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (HmacAuthen)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		HmacAuthenImpl hmacAuthenImpl = new HmacAuthenImpl();

		hmacAuthenImpl.setHmacAuthId(getHmacAuthId());
		hmacAuthenImpl.setGroupId(getGroupId());
		hmacAuthenImpl.setCompanyId(getCompanyId());
		hmacAuthenImpl.setUserId(getUserId());
		hmacAuthenImpl.setUserName(getUserName());
		hmacAuthenImpl.setCreateDate(getCreateDate());
		hmacAuthenImpl.setModifiedDate(getModifiedDate());
		hmacAuthenImpl.setSecret(getSecret());
		hmacAuthenImpl.setPermanent(getPermanent());

		hmacAuthenImpl.resetOriginalValues();

		return hmacAuthenImpl;
	}

	@Override
	public int compareTo(HmacAuthen hmacAuthen) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), hmacAuthen.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof HmacAuthen)) {
			return false;
		}

		HmacAuthen hmacAuthen = (HmacAuthen)obj;

		long primaryKey = hmacAuthen.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		HmacAuthenModelImpl hmacAuthenModelImpl = this;

		hmacAuthenModelImpl._setModifiedDate = false;
	}

	@Override
	public CacheModel<HmacAuthen> toCacheModel() {
		HmacAuthenCacheModel hmacAuthenCacheModel = new HmacAuthenCacheModel();

		hmacAuthenCacheModel.hmacAuthId = getHmacAuthId();

		hmacAuthenCacheModel.groupId = getGroupId();

		hmacAuthenCacheModel.companyId = getCompanyId();

		hmacAuthenCacheModel.userId = getUserId();

		hmacAuthenCacheModel.userName = getUserName();

		String userName = hmacAuthenCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			hmacAuthenCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			hmacAuthenCacheModel.createDate = createDate.getTime();
		}
		else {
			hmacAuthenCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			hmacAuthenCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			hmacAuthenCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		hmacAuthenCacheModel.secret = getSecret();

		String secret = hmacAuthenCacheModel.secret;

		if ((secret != null) && (secret.length() == 0)) {
			hmacAuthenCacheModel.secret = null;
		}

		hmacAuthenCacheModel.permanent = getPermanent();

		return hmacAuthenCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{hmacAuthId=");
		sb.append(getHmacAuthId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", secret=");
		sb.append(getSecret());
		sb.append(", permanent=");
		sb.append(getPermanent());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("org.opencps.usermgt.model.HmacAuthen");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>hmacAuthId</column-name><column-value><![CDATA[");
		sb.append(getHmacAuthId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>secret</column-name><column-value><![CDATA[");
		sb.append(getSecret());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>permanent</column-name><column-value><![CDATA[");
		sb.append(getPermanent());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = HmacAuthen.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			HmacAuthen.class
		};
	private long _hmacAuthId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _secret;
	private boolean _permanent;
	private HmacAuthen _escapedModel;
}