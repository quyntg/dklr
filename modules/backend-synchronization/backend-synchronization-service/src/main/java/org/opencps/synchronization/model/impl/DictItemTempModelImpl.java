/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.synchronization.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import org.opencps.synchronization.model.DictItemTemp;
import org.opencps.synchronization.model.DictItemTempModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the DictItemTemp service. Represents a row in the &quot;opencps_dictitem_temp&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DictItemTempModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DictItemTempImpl}.
 * </p>
 *
 * @author trungdk
 * @see DictItemTempImpl
 * @see DictItemTemp
 * @see DictItemTempModel
 * @generated
 */
@ProviderType
public class DictItemTempModelImpl extends BaseModelImpl<DictItemTemp>
	implements DictItemTempModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dict item temp model instance should use the {@link DictItemTemp} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_dictitem_temp";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "dictItemId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "dictCollectionId", Types.BIGINT },
			{ "itemCode", Types.VARCHAR },
			{ "itemName", Types.VARCHAR },
			{ "itemNameEN", Types.VARCHAR },
			{ "itemDescription", Types.VARCHAR },
			{ "parentItemId", Types.BIGINT },
			{ "level", Types.INTEGER },
			{ "sibling", Types.VARCHAR },
			{ "treeIndex", Types.VARCHAR },
			{ "metaData", Types.VARCHAR },
			{ "status", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dictItemId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dictCollectionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("itemCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("itemName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("itemNameEN", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("itemDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("parentItemId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("level", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("sibling", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("treeIndex", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("metaData", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table opencps_dictitem_temp (uuid_ VARCHAR(75) null,dictItemId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,dictCollectionId LONG,itemCode VARCHAR(75) null,itemName VARCHAR(75) null,itemNameEN VARCHAR(75) null,itemDescription VARCHAR(75) null,parentItemId LONG,level INTEGER,sibling VARCHAR(75) null,treeIndex VARCHAR(75) null,metaData VARCHAR(75) null,status INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table opencps_dictitem_temp";
	public static final String ORDER_BY_JPQL = " ORDER BY dictItemTemp.sibling ASC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_dictitem_temp.sibling ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(backend.synchronization.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.synchronization.model.DictItemTemp"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(backend.synchronization.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.synchronization.model.DictItemTemp"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(backend.synchronization.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.synchronization.model.DictItemTemp"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long DICTCOLLECTIONID_COLUMN_BITMASK = 2L;
	public static final long GROUPID_COLUMN_BITMASK = 4L;
	public static final long ITEMCODE_COLUMN_BITMASK = 8L;
	public static final long LEVEL_COLUMN_BITMASK = 16L;
	public static final long MODIFIEDDATE_COLUMN_BITMASK = 32L;
	public static final long PARENTITEMID_COLUMN_BITMASK = 64L;
	public static final long TREEINDEX_COLUMN_BITMASK = 128L;
	public static final long UUID_COLUMN_BITMASK = 256L;
	public static final long SIBLING_COLUMN_BITMASK = 512L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(backend.synchronization.service.util.ServiceProps.get(
				"lock.expiration.time.org.opencps.synchronization.model.DictItemTemp"));

	public DictItemTempModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dictItemId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDictItemId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dictItemId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DictItemTemp.class;
	}

	@Override
	public String getModelClassName() {
		return DictItemTemp.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("dictItemId", getDictItemId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("dictCollectionId", getDictCollectionId());
		attributes.put("itemCode", getItemCode());
		attributes.put("itemName", getItemName());
		attributes.put("itemNameEN", getItemNameEN());
		attributes.put("itemDescription", getItemDescription());
		attributes.put("parentItemId", getParentItemId());
		attributes.put("level", getLevel());
		attributes.put("sibling", getSibling());
		attributes.put("treeIndex", getTreeIndex());
		attributes.put("metaData", getMetaData());
		attributes.put("status", getStatus());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long dictItemId = (Long)attributes.get("dictItemId");

		if (dictItemId != null) {
			setDictItemId(dictItemId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long dictCollectionId = (Long)attributes.get("dictCollectionId");

		if (dictCollectionId != null) {
			setDictCollectionId(dictCollectionId);
		}

		String itemCode = (String)attributes.get("itemCode");

		if (itemCode != null) {
			setItemCode(itemCode);
		}

		String itemName = (String)attributes.get("itemName");

		if (itemName != null) {
			setItemName(itemName);
		}

		String itemNameEN = (String)attributes.get("itemNameEN");

		if (itemNameEN != null) {
			setItemNameEN(itemNameEN);
		}

		String itemDescription = (String)attributes.get("itemDescription");

		if (itemDescription != null) {
			setItemDescription(itemDescription);
		}

		Long parentItemId = (Long)attributes.get("parentItemId");

		if (parentItemId != null) {
			setParentItemId(parentItemId);
		}

		Integer level = (Integer)attributes.get("level");

		if (level != null) {
			setLevel(level);
		}

		String sibling = (String)attributes.get("sibling");

		if (sibling != null) {
			setSibling(sibling);
		}

		String treeIndex = (String)attributes.get("treeIndex");

		if (treeIndex != null) {
			setTreeIndex(treeIndex);
		}

		String metaData = (String)attributes.get("metaData");

		if (metaData != null) {
			setMetaData(metaData);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getDictItemId() {
		return _dictItemId;
	}

	@Override
	public void setDictItemId(long dictItemId) {
		_dictItemId = dictItemId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_columnBitmask |= MODIFIEDDATE_COLUMN_BITMASK;

		if (_originalModifiedDate == null) {
			_originalModifiedDate = _modifiedDate;
		}

		_modifiedDate = modifiedDate;
	}

	public Date getOriginalModifiedDate() {
		return _originalModifiedDate;
	}

	@Override
	public long getDictCollectionId() {
		return _dictCollectionId;
	}

	@Override
	public void setDictCollectionId(long dictCollectionId) {
		_columnBitmask |= DICTCOLLECTIONID_COLUMN_BITMASK;

		if (!_setOriginalDictCollectionId) {
			_setOriginalDictCollectionId = true;

			_originalDictCollectionId = _dictCollectionId;
		}

		_dictCollectionId = dictCollectionId;
	}

	public long getOriginalDictCollectionId() {
		return _originalDictCollectionId;
	}

	@Override
	public String getItemCode() {
		if (_itemCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemCode;
		}
	}

	@Override
	public void setItemCode(String itemCode) {
		_columnBitmask |= ITEMCODE_COLUMN_BITMASK;

		if (_originalItemCode == null) {
			_originalItemCode = _itemCode;
		}

		_itemCode = itemCode;
	}

	public String getOriginalItemCode() {
		return GetterUtil.getString(_originalItemCode);
	}

	@Override
	public String getItemName() {
		if (_itemName == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemName;
		}
	}

	@Override
	public void setItemName(String itemName) {
		_itemName = itemName;
	}

	@Override
	public String getItemNameEN() {
		if (_itemNameEN == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemNameEN;
		}
	}

	@Override
	public void setItemNameEN(String itemNameEN) {
		_itemNameEN = itemNameEN;
	}

	@Override
	public String getItemDescription() {
		if (_itemDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemDescription;
		}
	}

	@Override
	public void setItemDescription(String itemDescription) {
		_itemDescription = itemDescription;
	}

	@Override
	public long getParentItemId() {
		return _parentItemId;
	}

	@Override
	public void setParentItemId(long parentItemId) {
		_columnBitmask |= PARENTITEMID_COLUMN_BITMASK;

		if (!_setOriginalParentItemId) {
			_setOriginalParentItemId = true;

			_originalParentItemId = _parentItemId;
		}

		_parentItemId = parentItemId;
	}

	public long getOriginalParentItemId() {
		return _originalParentItemId;
	}

	@Override
	public int getLevel() {
		return _level;
	}

	@Override
	public void setLevel(int level) {
		_columnBitmask |= LEVEL_COLUMN_BITMASK;

		if (!_setOriginalLevel) {
			_setOriginalLevel = true;

			_originalLevel = _level;
		}

		_level = level;
	}

	public int getOriginalLevel() {
		return _originalLevel;
	}

	@Override
	public String getSibling() {
		if (_sibling == null) {
			return StringPool.BLANK;
		}
		else {
			return _sibling;
		}
	}

	@Override
	public void setSibling(String sibling) {
		_columnBitmask = -1L;

		_sibling = sibling;
	}

	@Override
	public String getTreeIndex() {
		if (_treeIndex == null) {
			return StringPool.BLANK;
		}
		else {
			return _treeIndex;
		}
	}

	@Override
	public void setTreeIndex(String treeIndex) {
		_columnBitmask |= TREEINDEX_COLUMN_BITMASK;

		if (_originalTreeIndex == null) {
			_originalTreeIndex = _treeIndex;
		}

		_treeIndex = treeIndex;
	}

	public String getOriginalTreeIndex() {
		return GetterUtil.getString(_originalTreeIndex);
	}

	@Override
	public String getMetaData() {
		if (_metaData == null) {
			return StringPool.BLANK;
		}
		else {
			return _metaData;
		}
	}

	@Override
	public void setMetaData(String metaData) {
		_metaData = metaData;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				DictItemTemp.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			DictItemTemp.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DictItemTemp toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DictItemTemp)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DictItemTempImpl dictItemTempImpl = new DictItemTempImpl();

		dictItemTempImpl.setUuid(getUuid());
		dictItemTempImpl.setDictItemId(getDictItemId());
		dictItemTempImpl.setCompanyId(getCompanyId());
		dictItemTempImpl.setGroupId(getGroupId());
		dictItemTempImpl.setUserId(getUserId());
		dictItemTempImpl.setUserName(getUserName());
		dictItemTempImpl.setCreateDate(getCreateDate());
		dictItemTempImpl.setModifiedDate(getModifiedDate());
		dictItemTempImpl.setDictCollectionId(getDictCollectionId());
		dictItemTempImpl.setItemCode(getItemCode());
		dictItemTempImpl.setItemName(getItemName());
		dictItemTempImpl.setItemNameEN(getItemNameEN());
		dictItemTempImpl.setItemDescription(getItemDescription());
		dictItemTempImpl.setParentItemId(getParentItemId());
		dictItemTempImpl.setLevel(getLevel());
		dictItemTempImpl.setSibling(getSibling());
		dictItemTempImpl.setTreeIndex(getTreeIndex());
		dictItemTempImpl.setMetaData(getMetaData());
		dictItemTempImpl.setStatus(getStatus());

		dictItemTempImpl.resetOriginalValues();

		return dictItemTempImpl;
	}

	@Override
	public int compareTo(DictItemTemp dictItemTemp) {
		int value = 0;

		value = getSibling().compareTo(dictItemTemp.getSibling());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DictItemTemp)) {
			return false;
		}

		DictItemTemp dictItemTemp = (DictItemTemp)obj;

		long primaryKey = dictItemTemp.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		DictItemTempModelImpl dictItemTempModelImpl = this;

		dictItemTempModelImpl._originalUuid = dictItemTempModelImpl._uuid;

		dictItemTempModelImpl._originalCompanyId = dictItemTempModelImpl._companyId;

		dictItemTempModelImpl._setOriginalCompanyId = false;

		dictItemTempModelImpl._originalGroupId = dictItemTempModelImpl._groupId;

		dictItemTempModelImpl._setOriginalGroupId = false;

		dictItemTempModelImpl._originalModifiedDate = dictItemTempModelImpl._modifiedDate;

		dictItemTempModelImpl._setModifiedDate = false;

		dictItemTempModelImpl._originalDictCollectionId = dictItemTempModelImpl._dictCollectionId;

		dictItemTempModelImpl._setOriginalDictCollectionId = false;

		dictItemTempModelImpl._originalItemCode = dictItemTempModelImpl._itemCode;

		dictItemTempModelImpl._originalParentItemId = dictItemTempModelImpl._parentItemId;

		dictItemTempModelImpl._setOriginalParentItemId = false;

		dictItemTempModelImpl._originalLevel = dictItemTempModelImpl._level;

		dictItemTempModelImpl._setOriginalLevel = false;

		dictItemTempModelImpl._originalTreeIndex = dictItemTempModelImpl._treeIndex;

		dictItemTempModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DictItemTemp> toCacheModel() {
		DictItemTempCacheModel dictItemTempCacheModel = new DictItemTempCacheModel();

		dictItemTempCacheModel.uuid = getUuid();

		String uuid = dictItemTempCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			dictItemTempCacheModel.uuid = null;
		}

		dictItemTempCacheModel.dictItemId = getDictItemId();

		dictItemTempCacheModel.companyId = getCompanyId();

		dictItemTempCacheModel.groupId = getGroupId();

		dictItemTempCacheModel.userId = getUserId();

		dictItemTempCacheModel.userName = getUserName();

		String userName = dictItemTempCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			dictItemTempCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			dictItemTempCacheModel.createDate = createDate.getTime();
		}
		else {
			dictItemTempCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dictItemTempCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dictItemTempCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		dictItemTempCacheModel.dictCollectionId = getDictCollectionId();

		dictItemTempCacheModel.itemCode = getItemCode();

		String itemCode = dictItemTempCacheModel.itemCode;

		if ((itemCode != null) && (itemCode.length() == 0)) {
			dictItemTempCacheModel.itemCode = null;
		}

		dictItemTempCacheModel.itemName = getItemName();

		String itemName = dictItemTempCacheModel.itemName;

		if ((itemName != null) && (itemName.length() == 0)) {
			dictItemTempCacheModel.itemName = null;
		}

		dictItemTempCacheModel.itemNameEN = getItemNameEN();

		String itemNameEN = dictItemTempCacheModel.itemNameEN;

		if ((itemNameEN != null) && (itemNameEN.length() == 0)) {
			dictItemTempCacheModel.itemNameEN = null;
		}

		dictItemTempCacheModel.itemDescription = getItemDescription();

		String itemDescription = dictItemTempCacheModel.itemDescription;

		if ((itemDescription != null) && (itemDescription.length() == 0)) {
			dictItemTempCacheModel.itemDescription = null;
		}

		dictItemTempCacheModel.parentItemId = getParentItemId();

		dictItemTempCacheModel.level = getLevel();

		dictItemTempCacheModel.sibling = getSibling();

		String sibling = dictItemTempCacheModel.sibling;

		if ((sibling != null) && (sibling.length() == 0)) {
			dictItemTempCacheModel.sibling = null;
		}

		dictItemTempCacheModel.treeIndex = getTreeIndex();

		String treeIndex = dictItemTempCacheModel.treeIndex;

		if ((treeIndex != null) && (treeIndex.length() == 0)) {
			dictItemTempCacheModel.treeIndex = null;
		}

		dictItemTempCacheModel.metaData = getMetaData();

		String metaData = dictItemTempCacheModel.metaData;

		if ((metaData != null) && (metaData.length() == 0)) {
			dictItemTempCacheModel.metaData = null;
		}

		dictItemTempCacheModel.status = getStatus();

		return dictItemTempCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(39);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", dictItemId=");
		sb.append(getDictItemId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", dictCollectionId=");
		sb.append(getDictCollectionId());
		sb.append(", itemCode=");
		sb.append(getItemCode());
		sb.append(", itemName=");
		sb.append(getItemName());
		sb.append(", itemNameEN=");
		sb.append(getItemNameEN());
		sb.append(", itemDescription=");
		sb.append(getItemDescription());
		sb.append(", parentItemId=");
		sb.append(getParentItemId());
		sb.append(", level=");
		sb.append(getLevel());
		sb.append(", sibling=");
		sb.append(getSibling());
		sb.append(", treeIndex=");
		sb.append(getTreeIndex());
		sb.append(", metaData=");
		sb.append(getMetaData());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(61);

		sb.append("<model><model-name>");
		sb.append("org.opencps.synchronization.model.DictItemTemp");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dictItemId</column-name><column-value><![CDATA[");
		sb.append(getDictItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dictCollectionId</column-name><column-value><![CDATA[");
		sb.append(getDictCollectionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemCode</column-name><column-value><![CDATA[");
		sb.append(getItemCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemName</column-name><column-value><![CDATA[");
		sb.append(getItemName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemNameEN</column-name><column-value><![CDATA[");
		sb.append(getItemNameEN());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemDescription</column-name><column-value><![CDATA[");
		sb.append(getItemDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentItemId</column-name><column-value><![CDATA[");
		sb.append(getParentItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>level</column-name><column-value><![CDATA[");
		sb.append(getLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sibling</column-name><column-value><![CDATA[");
		sb.append(getSibling());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>treeIndex</column-name><column-value><![CDATA[");
		sb.append(getTreeIndex());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>metaData</column-name><column-value><![CDATA[");
		sb.append(getMetaData());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = DictItemTemp.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			DictItemTemp.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _dictItemId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private Date _originalModifiedDate;
	private boolean _setModifiedDate;
	private long _dictCollectionId;
	private long _originalDictCollectionId;
	private boolean _setOriginalDictCollectionId;
	private String _itemCode;
	private String _originalItemCode;
	private String _itemName;
	private String _itemNameEN;
	private String _itemDescription;
	private long _parentItemId;
	private long _originalParentItemId;
	private boolean _setOriginalParentItemId;
	private int _level;
	private int _originalLevel;
	private boolean _setOriginalLevel;
	private String _sibling;
	private String _treeIndex;
	private String _originalTreeIndex;
	private String _metaData;
	private int _status;
	private long _columnBitmask;
	private DictItemTemp _escapedModel;
}