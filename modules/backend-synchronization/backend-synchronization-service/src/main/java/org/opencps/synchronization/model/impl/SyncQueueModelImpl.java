/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.synchronization.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import org.opencps.synchronization.model.SyncQueue;
import org.opencps.synchronization.model.SyncQueueModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SyncQueue service. Represents a row in the &quot;opencps_syncqueue&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link SyncQueueModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SyncQueueImpl}.
 * </p>
 *
 * @author trungdk
 * @see SyncQueueImpl
 * @see SyncQueue
 * @see SyncQueueModel
 * @generated
 */
@ProviderType
public class SyncQueueModelImpl extends BaseModelImpl<SyncQueue>
	implements SyncQueueModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sync queue model instance should use the {@link SyncQueue} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_syncqueue";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "syncQueueId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "serverNo", Types.VARCHAR },
			{ "className", Types.VARCHAR },
			{ "jsonObject", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "retryCount", Types.INTEGER },
			{ "priority", Types.INTEGER },
			{ "method", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("syncQueueId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("serverNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("className", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jsonObject", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("retryCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("priority", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("method", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table opencps_syncqueue (uuid_ VARCHAR(75) null,syncQueueId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,serverNo VARCHAR(75) null,className VARCHAR(75) null,jsonObject VARCHAR(75) null,status INTEGER,retryCount INTEGER,priority INTEGER,method VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table opencps_syncqueue";
	public static final String ORDER_BY_JPQL = " ORDER BY syncQueue.priority ASC, syncQueue.modifiedDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_syncqueue.priority ASC, opencps_syncqueue.modifiedDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(backend.synchronization.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.synchronization.model.SyncQueue"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(backend.synchronization.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.synchronization.model.SyncQueue"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(backend.synchronization.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.synchronization.model.SyncQueue"),
			true);
	public static final long CLASSNAME_COLUMN_BITMASK = 1L;
	public static final long COMPANYID_COLUMN_BITMASK = 2L;
	public static final long GROUPID_COLUMN_BITMASK = 4L;
	public static final long METHOD_COLUMN_BITMASK = 8L;
	public static final long SERVERNO_COLUMN_BITMASK = 16L;
	public static final long UUID_COLUMN_BITMASK = 32L;
	public static final long PRIORITY_COLUMN_BITMASK = 64L;
	public static final long MODIFIEDDATE_COLUMN_BITMASK = 128L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(backend.synchronization.service.util.ServiceProps.get(
				"lock.expiration.time.org.opencps.synchronization.model.SyncQueue"));

	public SyncQueueModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _syncQueueId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSyncQueueId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _syncQueueId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SyncQueue.class;
	}

	@Override
	public String getModelClassName() {
		return SyncQueue.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("syncQueueId", getSyncQueueId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("serverNo", getServerNo());
		attributes.put("className", getClassName());
		attributes.put("jsonObject", getJsonObject());
		attributes.put("status", getStatus());
		attributes.put("retryCount", getRetryCount());
		attributes.put("priority", getPriority());
		attributes.put("method", getMethod());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long syncQueueId = (Long)attributes.get("syncQueueId");

		if (syncQueueId != null) {
			setSyncQueueId(syncQueueId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String serverNo = (String)attributes.get("serverNo");

		if (serverNo != null) {
			setServerNo(serverNo);
		}

		String className = (String)attributes.get("className");

		if (className != null) {
			setClassName(className);
		}

		String jsonObject = (String)attributes.get("jsonObject");

		if (jsonObject != null) {
			setJsonObject(jsonObject);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Integer retryCount = (Integer)attributes.get("retryCount");

		if (retryCount != null) {
			setRetryCount(retryCount);
		}

		Integer priority = (Integer)attributes.get("priority");

		if (priority != null) {
			setPriority(priority);
		}

		String method = (String)attributes.get("method");

		if (method != null) {
			setMethod(method);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getSyncQueueId() {
		return _syncQueueId;
	}

	@Override
	public void setSyncQueueId(long syncQueueId) {
		_syncQueueId = syncQueueId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getServerNo() {
		if (_serverNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _serverNo;
		}
	}

	@Override
	public void setServerNo(String serverNo) {
		_columnBitmask |= SERVERNO_COLUMN_BITMASK;

		if (_originalServerNo == null) {
			_originalServerNo = _serverNo;
		}

		_serverNo = serverNo;
	}

	public String getOriginalServerNo() {
		return GetterUtil.getString(_originalServerNo);
	}

	@Override
	public String getClassName() {
		if (_className == null) {
			return StringPool.BLANK;
		}
		else {
			return _className;
		}
	}

	@Override
	public void setClassName(String className) {
		_columnBitmask |= CLASSNAME_COLUMN_BITMASK;

		if (_originalClassName == null) {
			_originalClassName = _className;
		}

		_className = className;
	}

	public String getOriginalClassName() {
		return GetterUtil.getString(_originalClassName);
	}

	@Override
	public String getJsonObject() {
		if (_jsonObject == null) {
			return StringPool.BLANK;
		}
		else {
			return _jsonObject;
		}
	}

	@Override
	public void setJsonObject(String jsonObject) {
		_jsonObject = jsonObject;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@Override
	public int getRetryCount() {
		return _retryCount;
	}

	@Override
	public void setRetryCount(int retryCount) {
		_retryCount = retryCount;
	}

	@Override
	public int getPriority() {
		return _priority;
	}

	@Override
	public void setPriority(int priority) {
		_columnBitmask = -1L;

		_priority = priority;
	}

	@Override
	public String getMethod() {
		if (_method == null) {
			return StringPool.BLANK;
		}
		else {
			return _method;
		}
	}

	@Override
	public void setMethod(String method) {
		_columnBitmask |= METHOD_COLUMN_BITMASK;

		if (_originalMethod == null) {
			_originalMethod = _method;
		}

		_method = method;
	}

	public String getOriginalMethod() {
		return GetterUtil.getString(_originalMethod);
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				SyncQueue.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			SyncQueue.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SyncQueue toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SyncQueue)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SyncQueueImpl syncQueueImpl = new SyncQueueImpl();

		syncQueueImpl.setUuid(getUuid());
		syncQueueImpl.setSyncQueueId(getSyncQueueId());
		syncQueueImpl.setGroupId(getGroupId());
		syncQueueImpl.setCompanyId(getCompanyId());
		syncQueueImpl.setUserId(getUserId());
		syncQueueImpl.setUserName(getUserName());
		syncQueueImpl.setCreateDate(getCreateDate());
		syncQueueImpl.setModifiedDate(getModifiedDate());
		syncQueueImpl.setServerNo(getServerNo());
		syncQueueImpl.setClassName(getClassName());
		syncQueueImpl.setJsonObject(getJsonObject());
		syncQueueImpl.setStatus(getStatus());
		syncQueueImpl.setRetryCount(getRetryCount());
		syncQueueImpl.setPriority(getPriority());
		syncQueueImpl.setMethod(getMethod());

		syncQueueImpl.resetOriginalValues();

		return syncQueueImpl;
	}

	@Override
	public int compareTo(SyncQueue syncQueue) {
		int value = 0;

		if (getPriority() < syncQueue.getPriority()) {
			value = -1;
		}
		else if (getPriority() > syncQueue.getPriority()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		value = DateUtil.compareTo(getModifiedDate(),
				syncQueue.getModifiedDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SyncQueue)) {
			return false;
		}

		SyncQueue syncQueue = (SyncQueue)obj;

		long primaryKey = syncQueue.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		SyncQueueModelImpl syncQueueModelImpl = this;

		syncQueueModelImpl._originalUuid = syncQueueModelImpl._uuid;

		syncQueueModelImpl._originalGroupId = syncQueueModelImpl._groupId;

		syncQueueModelImpl._setOriginalGroupId = false;

		syncQueueModelImpl._originalCompanyId = syncQueueModelImpl._companyId;

		syncQueueModelImpl._setOriginalCompanyId = false;

		syncQueueModelImpl._setModifiedDate = false;

		syncQueueModelImpl._originalServerNo = syncQueueModelImpl._serverNo;

		syncQueueModelImpl._originalClassName = syncQueueModelImpl._className;

		syncQueueModelImpl._originalMethod = syncQueueModelImpl._method;

		syncQueueModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SyncQueue> toCacheModel() {
		SyncQueueCacheModel syncQueueCacheModel = new SyncQueueCacheModel();

		syncQueueCacheModel.uuid = getUuid();

		String uuid = syncQueueCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			syncQueueCacheModel.uuid = null;
		}

		syncQueueCacheModel.syncQueueId = getSyncQueueId();

		syncQueueCacheModel.groupId = getGroupId();

		syncQueueCacheModel.companyId = getCompanyId();

		syncQueueCacheModel.userId = getUserId();

		syncQueueCacheModel.userName = getUserName();

		String userName = syncQueueCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			syncQueueCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			syncQueueCacheModel.createDate = createDate.getTime();
		}
		else {
			syncQueueCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			syncQueueCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			syncQueueCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		syncQueueCacheModel.serverNo = getServerNo();

		String serverNo = syncQueueCacheModel.serverNo;

		if ((serverNo != null) && (serverNo.length() == 0)) {
			syncQueueCacheModel.serverNo = null;
		}

		syncQueueCacheModel.className = getClassName();

		String className = syncQueueCacheModel.className;

		if ((className != null) && (className.length() == 0)) {
			syncQueueCacheModel.className = null;
		}

		syncQueueCacheModel.jsonObject = getJsonObject();

		String jsonObject = syncQueueCacheModel.jsonObject;

		if ((jsonObject != null) && (jsonObject.length() == 0)) {
			syncQueueCacheModel.jsonObject = null;
		}

		syncQueueCacheModel.status = getStatus();

		syncQueueCacheModel.retryCount = getRetryCount();

		syncQueueCacheModel.priority = getPriority();

		syncQueueCacheModel.method = getMethod();

		String method = syncQueueCacheModel.method;

		if ((method != null) && (method.length() == 0)) {
			syncQueueCacheModel.method = null;
		}

		return syncQueueCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", syncQueueId=");
		sb.append(getSyncQueueId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", serverNo=");
		sb.append(getServerNo());
		sb.append(", className=");
		sb.append(getClassName());
		sb.append(", jsonObject=");
		sb.append(getJsonObject());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", retryCount=");
		sb.append(getRetryCount());
		sb.append(", priority=");
		sb.append(getPriority());
		sb.append(", method=");
		sb.append(getMethod());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("org.opencps.synchronization.model.SyncQueue");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncQueueId</column-name><column-value><![CDATA[");
		sb.append(getSyncQueueId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serverNo</column-name><column-value><![CDATA[");
		sb.append(getServerNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>className</column-name><column-value><![CDATA[");
		sb.append(getClassName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jsonObject</column-name><column-value><![CDATA[");
		sb.append(getJsonObject());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>retryCount</column-name><column-value><![CDATA[");
		sb.append(getRetryCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priority</column-name><column-value><![CDATA[");
		sb.append(getPriority());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>method</column-name><column-value><![CDATA[");
		sb.append(getMethod());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = SyncQueue.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			SyncQueue.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _syncQueueId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _serverNo;
	private String _originalServerNo;
	private String _className;
	private String _originalClassName;
	private String _jsonObject;
	private int _status;
	private int _retryCount;
	private int _priority;
	private String _method;
	private String _originalMethod;
	private long _columnBitmask;
	private SyncQueue _escapedModel;
}