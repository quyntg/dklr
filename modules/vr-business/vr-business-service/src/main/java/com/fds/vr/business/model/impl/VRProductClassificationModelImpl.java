/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.business.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.business.model.VRProductClassification;
import com.fds.vr.business.model.VRProductClassificationModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VRProductClassification service. Represents a row in the &quot;vr_productclassification&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VRProductClassificationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VRProductClassificationImpl}.
 * </p>
 *
 * @author LamTV
 * @see VRProductClassificationImpl
 * @see VRProductClassification
 * @see VRProductClassificationModel
 * @generated
 */
@ProviderType
public class VRProductClassificationModelImpl extends BaseModelImpl<VRProductClassification>
	implements VRProductClassificationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vr product classification model instance should use the {@link VRProductClassification} interface instead.
	 */
	public static final String TABLE_NAME = "vr_productclassification";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "mtCore", Types.BIGINT },
			{ "productPlantID", Types.BIGINT },
			{ "sequenceNo", Types.BIGINT },
			{ "productClassificationCode", Types.VARCHAR },
			{ "productClassificationDescription", Types.VARCHAR },
			{ "modifyDate", Types.TIMESTAMP },
			{ "syncDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mtCore", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("productPlantID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("sequenceNo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("productClassificationCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productClassificationDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modifyDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("syncDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table vr_productclassification (id LONG not null primary key,mtCore LONG,productPlantID LONG,sequenceNo LONG,productClassificationCode VARCHAR(75) null,productClassificationDescription VARCHAR(75) null,modifyDate DATE null,syncDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table vr_productclassification";
	public static final String ORDER_BY_JPQL = " ORDER BY vrProductClassification.modifyDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_productclassification.modifyDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fds.vr.business.model.VRProductClassification"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fds.vr.business.model.VRProductClassification"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fds.vr.business.model.VRProductClassification"),
			true);
	public static final long MTCORE_COLUMN_BITMASK = 1L;
	public static final long PRODUCTPLANTID_COLUMN_BITMASK = 2L;
	public static final long MODIFYDATE_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.fds.vr.service.util.ServiceProps.get(
				"lock.expiration.time.com.fds.vr.business.model.VRProductClassification"));

	public VRProductClassificationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VRProductClassification.class;
	}

	@Override
	public String getModelClassName() {
		return VRProductClassification.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("mtCore", getMtCore());
		attributes.put("productPlantID", getProductPlantID());
		attributes.put("sequenceNo", getSequenceNo());
		attributes.put("productClassificationCode",
			getProductClassificationCode());
		attributes.put("productClassificationDescription",
			getProductClassificationDescription());
		attributes.put("modifyDate", getModifyDate());
		attributes.put("syncDate", getSyncDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long mtCore = (Long)attributes.get("mtCore");

		if (mtCore != null) {
			setMtCore(mtCore);
		}

		Long productPlantID = (Long)attributes.get("productPlantID");

		if (productPlantID != null) {
			setProductPlantID(productPlantID);
		}

		Long sequenceNo = (Long)attributes.get("sequenceNo");

		if (sequenceNo != null) {
			setSequenceNo(sequenceNo);
		}

		String productClassificationCode = (String)attributes.get(
				"productClassificationCode");

		if (productClassificationCode != null) {
			setProductClassificationCode(productClassificationCode);
		}

		String productClassificationDescription = (String)attributes.get(
				"productClassificationDescription");

		if (productClassificationDescription != null) {
			setProductClassificationDescription(productClassificationDescription);
		}

		Date modifyDate = (Date)attributes.get("modifyDate");

		if (modifyDate != null) {
			setModifyDate(modifyDate);
		}

		Date syncDate = (Date)attributes.get("syncDate");

		if (syncDate != null) {
			setSyncDate(syncDate);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getMtCore() {
		return _mtCore;
	}

	@Override
	public void setMtCore(long mtCore) {
		_columnBitmask |= MTCORE_COLUMN_BITMASK;

		if (!_setOriginalMtCore) {
			_setOriginalMtCore = true;

			_originalMtCore = _mtCore;
		}

		_mtCore = mtCore;
	}

	public long getOriginalMtCore() {
		return _originalMtCore;
	}

	@Override
	public long getProductPlantID() {
		return _productPlantID;
	}

	@Override
	public void setProductPlantID(long productPlantID) {
		_columnBitmask |= PRODUCTPLANTID_COLUMN_BITMASK;

		if (!_setOriginalProductPlantID) {
			_setOriginalProductPlantID = true;

			_originalProductPlantID = _productPlantID;
		}

		_productPlantID = productPlantID;
	}

	public long getOriginalProductPlantID() {
		return _originalProductPlantID;
	}

	@Override
	public long getSequenceNo() {
		return _sequenceNo;
	}

	@Override
	public void setSequenceNo(long sequenceNo) {
		_sequenceNo = sequenceNo;
	}

	@Override
	public String getProductClassificationCode() {
		if (_productClassificationCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _productClassificationCode;
		}
	}

	@Override
	public void setProductClassificationCode(String productClassificationCode) {
		_productClassificationCode = productClassificationCode;
	}

	@Override
	public String getProductClassificationDescription() {
		if (_productClassificationDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _productClassificationDescription;
		}
	}

	@Override
	public void setProductClassificationDescription(
		String productClassificationDescription) {
		_productClassificationDescription = productClassificationDescription;
	}

	@Override
	public Date getModifyDate() {
		return _modifyDate;
	}

	@Override
	public void setModifyDate(Date modifyDate) {
		_columnBitmask = -1L;

		_modifyDate = modifyDate;
	}

	@Override
	public Date getSyncDate() {
		return _syncDate;
	}

	@Override
	public void setSyncDate(Date syncDate) {
		_syncDate = syncDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VRProductClassification.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VRProductClassification toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VRProductClassification)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VRProductClassificationImpl vrProductClassificationImpl = new VRProductClassificationImpl();

		vrProductClassificationImpl.setId(getId());
		vrProductClassificationImpl.setMtCore(getMtCore());
		vrProductClassificationImpl.setProductPlantID(getProductPlantID());
		vrProductClassificationImpl.setSequenceNo(getSequenceNo());
		vrProductClassificationImpl.setProductClassificationCode(getProductClassificationCode());
		vrProductClassificationImpl.setProductClassificationDescription(getProductClassificationDescription());
		vrProductClassificationImpl.setModifyDate(getModifyDate());
		vrProductClassificationImpl.setSyncDate(getSyncDate());

		vrProductClassificationImpl.resetOriginalValues();

		return vrProductClassificationImpl;
	}

	@Override
	public int compareTo(VRProductClassification vrProductClassification) {
		int value = 0;

		value = DateUtil.compareTo(getModifyDate(),
				vrProductClassification.getModifyDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VRProductClassification)) {
			return false;
		}

		VRProductClassification vrProductClassification = (VRProductClassification)obj;

		long primaryKey = vrProductClassification.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VRProductClassificationModelImpl vrProductClassificationModelImpl = this;

		vrProductClassificationModelImpl._originalMtCore = vrProductClassificationModelImpl._mtCore;

		vrProductClassificationModelImpl._setOriginalMtCore = false;

		vrProductClassificationModelImpl._originalProductPlantID = vrProductClassificationModelImpl._productPlantID;

		vrProductClassificationModelImpl._setOriginalProductPlantID = false;

		vrProductClassificationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VRProductClassification> toCacheModel() {
		VRProductClassificationCacheModel vrProductClassificationCacheModel = new VRProductClassificationCacheModel();

		vrProductClassificationCacheModel.id = getId();

		vrProductClassificationCacheModel.mtCore = getMtCore();

		vrProductClassificationCacheModel.productPlantID = getProductPlantID();

		vrProductClassificationCacheModel.sequenceNo = getSequenceNo();

		vrProductClassificationCacheModel.productClassificationCode = getProductClassificationCode();

		String productClassificationCode = vrProductClassificationCacheModel.productClassificationCode;

		if ((productClassificationCode != null) &&
				(productClassificationCode.length() == 0)) {
			vrProductClassificationCacheModel.productClassificationCode = null;
		}

		vrProductClassificationCacheModel.productClassificationDescription = getProductClassificationDescription();

		String productClassificationDescription = vrProductClassificationCacheModel.productClassificationDescription;

		if ((productClassificationDescription != null) &&
				(productClassificationDescription.length() == 0)) {
			vrProductClassificationCacheModel.productClassificationDescription = null;
		}

		Date modifyDate = getModifyDate();

		if (modifyDate != null) {
			vrProductClassificationCacheModel.modifyDate = modifyDate.getTime();
		}
		else {
			vrProductClassificationCacheModel.modifyDate = Long.MIN_VALUE;
		}

		Date syncDate = getSyncDate();

		if (syncDate != null) {
			vrProductClassificationCacheModel.syncDate = syncDate.getTime();
		}
		else {
			vrProductClassificationCacheModel.syncDate = Long.MIN_VALUE;
		}

		return vrProductClassificationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", mtCore=");
		sb.append(getMtCore());
		sb.append(", productPlantID=");
		sb.append(getProductPlantID());
		sb.append(", sequenceNo=");
		sb.append(getSequenceNo());
		sb.append(", productClassificationCode=");
		sb.append(getProductClassificationCode());
		sb.append(", productClassificationDescription=");
		sb.append(getProductClassificationDescription());
		sb.append(", modifyDate=");
		sb.append(getModifyDate());
		sb.append(", syncDate=");
		sb.append(getSyncDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.fds.vr.business.model.VRProductClassification");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mtCore</column-name><column-value><![CDATA[");
		sb.append(getMtCore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productPlantID</column-name><column-value><![CDATA[");
		sb.append(getProductPlantID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sequenceNo</column-name><column-value><![CDATA[");
		sb.append(getSequenceNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productClassificationCode</column-name><column-value><![CDATA[");
		sb.append(getProductClassificationCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productClassificationDescription</column-name><column-value><![CDATA[");
		sb.append(getProductClassificationDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifyDate</column-name><column-value><![CDATA[");
		sb.append(getModifyDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncDate</column-name><column-value><![CDATA[");
		sb.append(getSyncDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VRProductClassification.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VRProductClassification.class
		};
	private long _id;
	private long _mtCore;
	private long _originalMtCore;
	private boolean _setOriginalMtCore;
	private long _productPlantID;
	private long _originalProductPlantID;
	private boolean _setOriginalProductPlantID;
	private long _sequenceNo;
	private String _productClassificationCode;
	private String _productClassificationDescription;
	private Date _modifyDate;
	private Date _syncDate;
	private long _columnBitmask;
	private VRProductClassification _escapedModel;
}