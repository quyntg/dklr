/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.business.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.business.model.VRCorporationAttendee;
import com.fds.vr.business.model.VRCorporationAttendeeModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VRCorporationAttendee service. Represents a row in the &quot;vr_corporation_attendee&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VRCorporationAttendeeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VRCorporationAttendeeImpl}.
 * </p>
 *
 * @author LamTV
 * @see VRCorporationAttendeeImpl
 * @see VRCorporationAttendee
 * @see VRCorporationAttendeeModel
 * @generated
 */
@ProviderType
public class VRCorporationAttendeeModelImpl extends BaseModelImpl<VRCorporationAttendee>
	implements VRCorporationAttendeeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vr corporation attendee model instance should use the {@link VRCorporationAttendee} interface instead.
	 */
	public static final String TABLE_NAME = "vr_corporation_attendee";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "mtCore", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifyDate", Types.TIMESTAMP },
			{ "syncDate", Types.TIMESTAMP },
			{ "corporationCode", Types.VARCHAR },
			{ "corporationName", Types.VARCHAR },
			{ "inspectionDate", Types.TIMESTAMP },
			{ "registerednumber", Types.VARCHAR },
			{ "testingRegisteredPlace", Types.VARCHAR },
			{ "testingPlaceDistrict", Types.VARCHAR },
			{ "testingPlaceCity", Types.VARCHAR },
			{ "testingPlaceRegion", Types.VARCHAR },
			{ "testingPlaceCountry", Types.VARCHAR },
			{ "testingRemarks", Types.VARCHAR },
			{ "activityId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "activityType", Types.VARCHAR },
			{ "activityCatetory", Types.VARCHAR },
			{ "categoryName", Types.VARCHAR },
			{ "dossierId", Types.BIGINT },
			{ "serviceName", Types.VARCHAR },
			{ "subject", Types.VARCHAR },
			{ "hostingId", Types.INTEGER },
			{ "hosting", Types.VARCHAR },
			{ "locationId", Types.INTEGER },
			{ "location", Types.VARCHAR },
			{ "geolocation", Types.VARCHAR },
			{ "startDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP },
			{ "finishDate", Types.TIMESTAMP },
			{ "state", Types.VARCHAR },
			{ "stateName", Types.VARCHAR },
			{ "stateColor", Types.VARCHAR },
			{ "priority", Types.VARCHAR },
			{ "overdue", Types.VARCHAR },
			{ "managerId", Types.BIGINT },
			{ "managerName", Types.VARCHAR },
			{ "leaderId", Types.BIGINT },
			{ "leaderName", Types.VARCHAR },
			{ "leaderJobTitle", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "permission", Types.VARCHAR },
			{ "resultNote", Types.VARCHAR },
			{ "progress", Types.VARCHAR },
			{ "assignType", Types.VARCHAR },
			{ "jobPosId", Types.BIGINT },
			{ "jobPosTitle", Types.VARCHAR },
			{ "invitation", Types.VARCHAR },
			{ "editable", Types.VARCHAR },
			{ "vaqcontactname", Types.VARCHAR },
			{ "vaqcontactphone", Types.VARCHAR },
			{ "applicantIdNo", Types.VARCHAR },
			{ "importercontactname", Types.VARCHAR },
			{ "importercontactphone", Types.VARCHAR },
			{ "importercontactemail", Types.VARCHAR },
			{ "importerfax", Types.VARCHAR },
			{ "soTKHQ", Types.VARCHAR },
			{ "ngayTKHQ", Types.VARCHAR },
			{ "maChiCucHQ", Types.VARCHAR },
			{ "nhanHieu", Types.VARCHAR },
			{ "tenThuongMai", Types.VARCHAR },
			{ "maKieuLoai", Types.VARCHAR },
			{ "loaiPhuongTien", Types.VARCHAR },
			{ "soKhung", Types.VARCHAR },
			{ "soDongCo", Types.VARCHAR },
			{ "tinhTrangPhuongTien", Types.VARCHAR },
			{ "kyHieuThietKe", Types.VARCHAR },
			{ "soGCNThamDinhThietKe", Types.VARCHAR },
			{ "soGCNPheDuyetKieuLoaiNuocNgoai", Types.VARCHAR },
			{ "tenCoSoSanXuat", Types.VARCHAR },
			{ "diaChiCoSoSanXuat", Types.VARCHAR },
			{ "tenXuongSanXuat", Types.VARCHAR },
			{ "diaChiXuongSanXuat", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mtCore", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifyDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("syncDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("corporationCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("corporationName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectionDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("registerednumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("testingRegisteredPlace", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("testingPlaceDistrict", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("testingPlaceCity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("testingPlaceRegion", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("testingPlaceCountry", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("testingRemarks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("activityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("activityType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("activityCatetory", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("categoryName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dossierId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("serviceName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("subject", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hostingId", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("hosting", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("locationId", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("location", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("geolocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("finishDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("state", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stateName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stateColor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("priority", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("overdue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("managerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("managerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("leaderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("leaderName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("leaderJobTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permission", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("resultNote", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("progress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assignType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jobPosId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("jobPosTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("invitation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("editable", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("vaqcontactname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("vaqcontactphone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantIdNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("importercontactname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("importercontactphone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("importercontactemail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("importerfax", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("soTKHQ", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ngayTKHQ", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("maChiCucHQ", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nhanHieu", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tenThuongMai", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("maKieuLoai", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("loaiPhuongTien", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("soKhung", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("soDongCo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tinhTrangPhuongTien", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("kyHieuThietKe", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("soGCNThamDinhThietKe", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("soGCNPheDuyetKieuLoaiNuocNgoai", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tenCoSoSanXuat", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("diaChiCoSoSanXuat", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tenXuongSanXuat", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("diaChiXuongSanXuat", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table vr_corporation_attendee (id LONG not null primary key,mtCore LONG,createDate DATE null,modifyDate DATE null,syncDate DATE null,corporationCode VARCHAR(75) null,corporationName VARCHAR(75) null,inspectionDate DATE null,registerednumber VARCHAR(75) null,testingRegisteredPlace VARCHAR(75) null,testingPlaceDistrict VARCHAR(75) null,testingPlaceCity VARCHAR(75) null,testingPlaceRegion VARCHAR(75) null,testingPlaceCountry VARCHAR(75) null,testingRemarks VARCHAR(75) null,activityId LONG,userId LONG,userName VARCHAR(75) null,activityType VARCHAR(75) null,activityCatetory VARCHAR(75) null,categoryName VARCHAR(75) null,dossierId LONG,serviceName VARCHAR(75) null,subject VARCHAR(75) null,hostingId INTEGER,hosting VARCHAR(75) null,locationId INTEGER,location VARCHAR(75) null,geolocation VARCHAR(75) null,startDate DATE null,endDate DATE null,finishDate DATE null,state VARCHAR(75) null,stateName VARCHAR(75) null,stateColor VARCHAR(75) null,priority VARCHAR(75) null,overdue VARCHAR(75) null,managerId LONG,managerName VARCHAR(75) null,leaderId LONG,leaderName VARCHAR(75) null,leaderJobTitle VARCHAR(75) null,description VARCHAR(75) null,permission VARCHAR(75) null,resultNote VARCHAR(75) null,progress VARCHAR(75) null,assignType VARCHAR(75) null,jobPosId LONG,jobPosTitle VARCHAR(75) null,invitation VARCHAR(75) null,editable VARCHAR(75) null,vaqcontactname VARCHAR(75) null,vaqcontactphone VARCHAR(75) null,applicantIdNo VARCHAR(75) null,importercontactname VARCHAR(75) null,importercontactphone VARCHAR(75) null,importercontactemail VARCHAR(75) null,importerfax VARCHAR(75) null,soTKHQ VARCHAR(75) null,ngayTKHQ VARCHAR(75) null,maChiCucHQ VARCHAR(75) null,nhanHieu VARCHAR(75) null,tenThuongMai VARCHAR(75) null,maKieuLoai VARCHAR(75) null,loaiPhuongTien VARCHAR(75) null,soKhung VARCHAR(75) null,soDongCo VARCHAR(75) null,tinhTrangPhuongTien VARCHAR(75) null,kyHieuThietKe VARCHAR(75) null,soGCNThamDinhThietKe VARCHAR(75) null,soGCNPheDuyetKieuLoaiNuocNgoai VARCHAR(75) null,tenCoSoSanXuat VARCHAR(75) null,diaChiCoSoSanXuat VARCHAR(75) null,tenXuongSanXuat VARCHAR(75) null,diaChiXuongSanXuat VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table vr_corporation_attendee";
	public static final String ORDER_BY_JPQL = " ORDER BY vrCorporationAttendee.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_corporation_attendee.id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fds.vr.business.model.VRCorporationAttendee"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fds.vr.business.model.VRCorporationAttendee"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fds.vr.business.model.VRCorporationAttendee"),
			true);
	public static final long ACTIVITYCATETORY_COLUMN_BITMASK = 1L;
	public static final long APPLICANTIDNO_COLUMN_BITMASK = 2L;
	public static final long ASSIGNTYPE_COLUMN_BITMASK = 4L;
	public static final long CORPORATIONCODE_COLUMN_BITMASK = 8L;
	public static final long DOSSIERID_COLUMN_BITMASK = 16L;
	public static final long INSPECTIONDATE_COLUMN_BITMASK = 32L;
	public static final long LEADERID_COLUMN_BITMASK = 64L;
	public static final long MANAGERID_COLUMN_BITMASK = 128L;
	public static final long ID_COLUMN_BITMASK = 256L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.fds.vr.service.util.ServiceProps.get(
				"lock.expiration.time.com.fds.vr.business.model.VRCorporationAttendee"));

	public VRCorporationAttendeeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VRCorporationAttendee.class;
	}

	@Override
	public String getModelClassName() {
		return VRCorporationAttendee.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("mtCore", getMtCore());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifyDate", getModifyDate());
		attributes.put("syncDate", getSyncDate());
		attributes.put("corporationCode", getCorporationCode());
		attributes.put("corporationName", getCorporationName());
		attributes.put("inspectionDate", getInspectionDate());
		attributes.put("registerednumber", getRegisterednumber());
		attributes.put("testingRegisteredPlace", getTestingRegisteredPlace());
		attributes.put("testingPlaceDistrict", getTestingPlaceDistrict());
		attributes.put("testingPlaceCity", getTestingPlaceCity());
		attributes.put("testingPlaceRegion", getTestingPlaceRegion());
		attributes.put("testingPlaceCountry", getTestingPlaceCountry());
		attributes.put("testingRemarks", getTestingRemarks());
		attributes.put("activityId", getActivityId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("activityType", getActivityType());
		attributes.put("activityCatetory", getActivityCatetory());
		attributes.put("categoryName", getCategoryName());
		attributes.put("dossierId", getDossierId());
		attributes.put("serviceName", getServiceName());
		attributes.put("subject", getSubject());
		attributes.put("hostingId", getHostingId());
		attributes.put("hosting", getHosting());
		attributes.put("locationId", getLocationId());
		attributes.put("location", getLocation());
		attributes.put("geolocation", getGeolocation());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());
		attributes.put("finishDate", getFinishDate());
		attributes.put("state", getState());
		attributes.put("stateName", getStateName());
		attributes.put("stateColor", getStateColor());
		attributes.put("priority", getPriority());
		attributes.put("overdue", getOverdue());
		attributes.put("managerId", getManagerId());
		attributes.put("managerName", getManagerName());
		attributes.put("leaderId", getLeaderId());
		attributes.put("leaderName", getLeaderName());
		attributes.put("leaderJobTitle", getLeaderJobTitle());
		attributes.put("description", getDescription());
		attributes.put("permission", getPermission());
		attributes.put("resultNote", getResultNote());
		attributes.put("progress", getProgress());
		attributes.put("assignType", getAssignType());
		attributes.put("jobPosId", getJobPosId());
		attributes.put("jobPosTitle", getJobPosTitle());
		attributes.put("invitation", getInvitation());
		attributes.put("editable", getEditable());
		attributes.put("vaqcontactname", getVaqcontactname());
		attributes.put("vaqcontactphone", getVaqcontactphone());
		attributes.put("applicantIdNo", getApplicantIdNo());
		attributes.put("importercontactname", getImportercontactname());
		attributes.put("importercontactphone", getImportercontactphone());
		attributes.put("importercontactemail", getImportercontactemail());
		attributes.put("importerfax", getImporterfax());
		attributes.put("soTKHQ", getSoTKHQ());
		attributes.put("ngayTKHQ", getNgayTKHQ());
		attributes.put("maChiCucHQ", getMaChiCucHQ());
		attributes.put("nhanHieu", getNhanHieu());
		attributes.put("tenThuongMai", getTenThuongMai());
		attributes.put("maKieuLoai", getMaKieuLoai());
		attributes.put("loaiPhuongTien", getLoaiPhuongTien());
		attributes.put("soKhung", getSoKhung());
		attributes.put("soDongCo", getSoDongCo());
		attributes.put("tinhTrangPhuongTien", getTinhTrangPhuongTien());
		attributes.put("kyHieuThietKe", getKyHieuThietKe());
		attributes.put("soGCNThamDinhThietKe", getSoGCNThamDinhThietKe());
		attributes.put("soGCNPheDuyetKieuLoaiNuocNgoai",
			getSoGCNPheDuyetKieuLoaiNuocNgoai());
		attributes.put("tenCoSoSanXuat", getTenCoSoSanXuat());
		attributes.put("diaChiCoSoSanXuat", getDiaChiCoSoSanXuat());
		attributes.put("tenXuongSanXuat", getTenXuongSanXuat());
		attributes.put("diaChiXuongSanXuat", getDiaChiXuongSanXuat());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long mtCore = (Long)attributes.get("mtCore");

		if (mtCore != null) {
			setMtCore(mtCore);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifyDate = (Date)attributes.get("modifyDate");

		if (modifyDate != null) {
			setModifyDate(modifyDate);
		}

		Date syncDate = (Date)attributes.get("syncDate");

		if (syncDate != null) {
			setSyncDate(syncDate);
		}

		String corporationCode = (String)attributes.get("corporationCode");

		if (corporationCode != null) {
			setCorporationCode(corporationCode);
		}

		String corporationName = (String)attributes.get("corporationName");

		if (corporationName != null) {
			setCorporationName(corporationName);
		}

		Date inspectionDate = (Date)attributes.get("inspectionDate");

		if (inspectionDate != null) {
			setInspectionDate(inspectionDate);
		}

		String registerednumber = (String)attributes.get("registerednumber");

		if (registerednumber != null) {
			setRegisterednumber(registerednumber);
		}

		String testingRegisteredPlace = (String)attributes.get(
				"testingRegisteredPlace");

		if (testingRegisteredPlace != null) {
			setTestingRegisteredPlace(testingRegisteredPlace);
		}

		String testingPlaceDistrict = (String)attributes.get(
				"testingPlaceDistrict");

		if (testingPlaceDistrict != null) {
			setTestingPlaceDistrict(testingPlaceDistrict);
		}

		String testingPlaceCity = (String)attributes.get("testingPlaceCity");

		if (testingPlaceCity != null) {
			setTestingPlaceCity(testingPlaceCity);
		}

		String testingPlaceRegion = (String)attributes.get("testingPlaceRegion");

		if (testingPlaceRegion != null) {
			setTestingPlaceRegion(testingPlaceRegion);
		}

		String testingPlaceCountry = (String)attributes.get(
				"testingPlaceCountry");

		if (testingPlaceCountry != null) {
			setTestingPlaceCountry(testingPlaceCountry);
		}

		String testingRemarks = (String)attributes.get("testingRemarks");

		if (testingRemarks != null) {
			setTestingRemarks(testingRemarks);
		}

		Long activityId = (Long)attributes.get("activityId");

		if (activityId != null) {
			setActivityId(activityId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		String activityType = (String)attributes.get("activityType");

		if (activityType != null) {
			setActivityType(activityType);
		}

		String activityCatetory = (String)attributes.get("activityCatetory");

		if (activityCatetory != null) {
			setActivityCatetory(activityCatetory);
		}

		String categoryName = (String)attributes.get("categoryName");

		if (categoryName != null) {
			setCategoryName(categoryName);
		}

		Long dossierId = (Long)attributes.get("dossierId");

		if (dossierId != null) {
			setDossierId(dossierId);
		}

		String serviceName = (String)attributes.get("serviceName");

		if (serviceName != null) {
			setServiceName(serviceName);
		}

		String subject = (String)attributes.get("subject");

		if (subject != null) {
			setSubject(subject);
		}

		Integer hostingId = (Integer)attributes.get("hostingId");

		if (hostingId != null) {
			setHostingId(hostingId);
		}

		String hosting = (String)attributes.get("hosting");

		if (hosting != null) {
			setHosting(hosting);
		}

		Integer locationId = (Integer)attributes.get("locationId");

		if (locationId != null) {
			setLocationId(locationId);
		}

		String location = (String)attributes.get("location");

		if (location != null) {
			setLocation(location);
		}

		String geolocation = (String)attributes.get("geolocation");

		if (geolocation != null) {
			setGeolocation(geolocation);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		Date finishDate = (Date)attributes.get("finishDate");

		if (finishDate != null) {
			setFinishDate(finishDate);
		}

		String state = (String)attributes.get("state");

		if (state != null) {
			setState(state);
		}

		String stateName = (String)attributes.get("stateName");

		if (stateName != null) {
			setStateName(stateName);
		}

		String stateColor = (String)attributes.get("stateColor");

		if (stateColor != null) {
			setStateColor(stateColor);
		}

		String priority = (String)attributes.get("priority");

		if (priority != null) {
			setPriority(priority);
		}

		String overdue = (String)attributes.get("overdue");

		if (overdue != null) {
			setOverdue(overdue);
		}

		Long managerId = (Long)attributes.get("managerId");

		if (managerId != null) {
			setManagerId(managerId);
		}

		String managerName = (String)attributes.get("managerName");

		if (managerName != null) {
			setManagerName(managerName);
		}

		Long leaderId = (Long)attributes.get("leaderId");

		if (leaderId != null) {
			setLeaderId(leaderId);
		}

		String leaderName = (String)attributes.get("leaderName");

		if (leaderName != null) {
			setLeaderName(leaderName);
		}

		String leaderJobTitle = (String)attributes.get("leaderJobTitle");

		if (leaderJobTitle != null) {
			setLeaderJobTitle(leaderJobTitle);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String permission = (String)attributes.get("permission");

		if (permission != null) {
			setPermission(permission);
		}

		String resultNote = (String)attributes.get("resultNote");

		if (resultNote != null) {
			setResultNote(resultNote);
		}

		String progress = (String)attributes.get("progress");

		if (progress != null) {
			setProgress(progress);
		}

		String assignType = (String)attributes.get("assignType");

		if (assignType != null) {
			setAssignType(assignType);
		}

		Long jobPosId = (Long)attributes.get("jobPosId");

		if (jobPosId != null) {
			setJobPosId(jobPosId);
		}

		String jobPosTitle = (String)attributes.get("jobPosTitle");

		if (jobPosTitle != null) {
			setJobPosTitle(jobPosTitle);
		}

		String invitation = (String)attributes.get("invitation");

		if (invitation != null) {
			setInvitation(invitation);
		}

		String editable = (String)attributes.get("editable");

		if (editable != null) {
			setEditable(editable);
		}

		String vaqcontactname = (String)attributes.get("vaqcontactname");

		if (vaqcontactname != null) {
			setVaqcontactname(vaqcontactname);
		}

		String vaqcontactphone = (String)attributes.get("vaqcontactphone");

		if (vaqcontactphone != null) {
			setVaqcontactphone(vaqcontactphone);
		}

		String applicantIdNo = (String)attributes.get("applicantIdNo");

		if (applicantIdNo != null) {
			setApplicantIdNo(applicantIdNo);
		}

		String importercontactname = (String)attributes.get(
				"importercontactname");

		if (importercontactname != null) {
			setImportercontactname(importercontactname);
		}

		String importercontactphone = (String)attributes.get(
				"importercontactphone");

		if (importercontactphone != null) {
			setImportercontactphone(importercontactphone);
		}

		String importercontactemail = (String)attributes.get(
				"importercontactemail");

		if (importercontactemail != null) {
			setImportercontactemail(importercontactemail);
		}

		String importerfax = (String)attributes.get("importerfax");

		if (importerfax != null) {
			setImporterfax(importerfax);
		}

		String soTKHQ = (String)attributes.get("soTKHQ");

		if (soTKHQ != null) {
			setSoTKHQ(soTKHQ);
		}

		String ngayTKHQ = (String)attributes.get("ngayTKHQ");

		if (ngayTKHQ != null) {
			setNgayTKHQ(ngayTKHQ);
		}

		String maChiCucHQ = (String)attributes.get("maChiCucHQ");

		if (maChiCucHQ != null) {
			setMaChiCucHQ(maChiCucHQ);
		}

		String nhanHieu = (String)attributes.get("nhanHieu");

		if (nhanHieu != null) {
			setNhanHieu(nhanHieu);
		}

		String tenThuongMai = (String)attributes.get("tenThuongMai");

		if (tenThuongMai != null) {
			setTenThuongMai(tenThuongMai);
		}

		String maKieuLoai = (String)attributes.get("maKieuLoai");

		if (maKieuLoai != null) {
			setMaKieuLoai(maKieuLoai);
		}

		String loaiPhuongTien = (String)attributes.get("loaiPhuongTien");

		if (loaiPhuongTien != null) {
			setLoaiPhuongTien(loaiPhuongTien);
		}

		String soKhung = (String)attributes.get("soKhung");

		if (soKhung != null) {
			setSoKhung(soKhung);
		}

		String soDongCo = (String)attributes.get("soDongCo");

		if (soDongCo != null) {
			setSoDongCo(soDongCo);
		}

		String tinhTrangPhuongTien = (String)attributes.get(
				"tinhTrangPhuongTien");

		if (tinhTrangPhuongTien != null) {
			setTinhTrangPhuongTien(tinhTrangPhuongTien);
		}

		String kyHieuThietKe = (String)attributes.get("kyHieuThietKe");

		if (kyHieuThietKe != null) {
			setKyHieuThietKe(kyHieuThietKe);
		}

		String soGCNThamDinhThietKe = (String)attributes.get(
				"soGCNThamDinhThietKe");

		if (soGCNThamDinhThietKe != null) {
			setSoGCNThamDinhThietKe(soGCNThamDinhThietKe);
		}

		String soGCNPheDuyetKieuLoaiNuocNgoai = (String)attributes.get(
				"soGCNPheDuyetKieuLoaiNuocNgoai");

		if (soGCNPheDuyetKieuLoaiNuocNgoai != null) {
			setSoGCNPheDuyetKieuLoaiNuocNgoai(soGCNPheDuyetKieuLoaiNuocNgoai);
		}

		String tenCoSoSanXuat = (String)attributes.get("tenCoSoSanXuat");

		if (tenCoSoSanXuat != null) {
			setTenCoSoSanXuat(tenCoSoSanXuat);
		}

		String diaChiCoSoSanXuat = (String)attributes.get("diaChiCoSoSanXuat");

		if (diaChiCoSoSanXuat != null) {
			setDiaChiCoSoSanXuat(diaChiCoSoSanXuat);
		}

		String tenXuongSanXuat = (String)attributes.get("tenXuongSanXuat");

		if (tenXuongSanXuat != null) {
			setTenXuongSanXuat(tenXuongSanXuat);
		}

		String diaChiXuongSanXuat = (String)attributes.get("diaChiXuongSanXuat");

		if (diaChiXuongSanXuat != null) {
			setDiaChiXuongSanXuat(diaChiXuongSanXuat);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@Override
	public long getMtCore() {
		return _mtCore;
	}

	@Override
	public void setMtCore(long mtCore) {
		_mtCore = mtCore;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifyDate() {
		return _modifyDate;
	}

	@Override
	public void setModifyDate(Date modifyDate) {
		_modifyDate = modifyDate;
	}

	@Override
	public Date getSyncDate() {
		return _syncDate;
	}

	@Override
	public void setSyncDate(Date syncDate) {
		_syncDate = syncDate;
	}

	@Override
	public String getCorporationCode() {
		if (_corporationCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _corporationCode;
		}
	}

	@Override
	public void setCorporationCode(String corporationCode) {
		_columnBitmask |= CORPORATIONCODE_COLUMN_BITMASK;

		if (_originalCorporationCode == null) {
			_originalCorporationCode = _corporationCode;
		}

		_corporationCode = corporationCode;
	}

	public String getOriginalCorporationCode() {
		return GetterUtil.getString(_originalCorporationCode);
	}

	@Override
	public String getCorporationName() {
		if (_corporationName == null) {
			return StringPool.BLANK;
		}
		else {
			return _corporationName;
		}
	}

	@Override
	public void setCorporationName(String corporationName) {
		_corporationName = corporationName;
	}

	@Override
	public Date getInspectionDate() {
		return _inspectionDate;
	}

	@Override
	public void setInspectionDate(Date inspectionDate) {
		_columnBitmask |= INSPECTIONDATE_COLUMN_BITMASK;

		if (_originalInspectionDate == null) {
			_originalInspectionDate = _inspectionDate;
		}

		_inspectionDate = inspectionDate;
	}

	public Date getOriginalInspectionDate() {
		return _originalInspectionDate;
	}

	@Override
	public String getRegisterednumber() {
		if (_registerednumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _registerednumber;
		}
	}

	@Override
	public void setRegisterednumber(String registerednumber) {
		_registerednumber = registerednumber;
	}

	@Override
	public String getTestingRegisteredPlace() {
		if (_testingRegisteredPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _testingRegisteredPlace;
		}
	}

	@Override
	public void setTestingRegisteredPlace(String testingRegisteredPlace) {
		_testingRegisteredPlace = testingRegisteredPlace;
	}

	@Override
	public String getTestingPlaceDistrict() {
		if (_testingPlaceDistrict == null) {
			return StringPool.BLANK;
		}
		else {
			return _testingPlaceDistrict;
		}
	}

	@Override
	public void setTestingPlaceDistrict(String testingPlaceDistrict) {
		_testingPlaceDistrict = testingPlaceDistrict;
	}

	@Override
	public String getTestingPlaceCity() {
		if (_testingPlaceCity == null) {
			return StringPool.BLANK;
		}
		else {
			return _testingPlaceCity;
		}
	}

	@Override
	public void setTestingPlaceCity(String testingPlaceCity) {
		_testingPlaceCity = testingPlaceCity;
	}

	@Override
	public String getTestingPlaceRegion() {
		if (_testingPlaceRegion == null) {
			return StringPool.BLANK;
		}
		else {
			return _testingPlaceRegion;
		}
	}

	@Override
	public void setTestingPlaceRegion(String testingPlaceRegion) {
		_testingPlaceRegion = testingPlaceRegion;
	}

	@Override
	public String getTestingPlaceCountry() {
		if (_testingPlaceCountry == null) {
			return StringPool.BLANK;
		}
		else {
			return _testingPlaceCountry;
		}
	}

	@Override
	public void setTestingPlaceCountry(String testingPlaceCountry) {
		_testingPlaceCountry = testingPlaceCountry;
	}

	@Override
	public String getTestingRemarks() {
		if (_testingRemarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _testingRemarks;
		}
	}

	@Override
	public void setTestingRemarks(String testingRemarks) {
		_testingRemarks = testingRemarks;
	}

	@Override
	public long getActivityId() {
		return _activityId;
	}

	@Override
	public void setActivityId(long activityId) {
		_activityId = activityId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public String getActivityType() {
		if (_activityType == null) {
			return StringPool.BLANK;
		}
		else {
			return _activityType;
		}
	}

	@Override
	public void setActivityType(String activityType) {
		_activityType = activityType;
	}

	@Override
	public String getActivityCatetory() {
		if (_activityCatetory == null) {
			return StringPool.BLANK;
		}
		else {
			return _activityCatetory;
		}
	}

	@Override
	public void setActivityCatetory(String activityCatetory) {
		_columnBitmask |= ACTIVITYCATETORY_COLUMN_BITMASK;

		if (_originalActivityCatetory == null) {
			_originalActivityCatetory = _activityCatetory;
		}

		_activityCatetory = activityCatetory;
	}

	public String getOriginalActivityCatetory() {
		return GetterUtil.getString(_originalActivityCatetory);
	}

	@Override
	public String getCategoryName() {
		if (_categoryName == null) {
			return StringPool.BLANK;
		}
		else {
			return _categoryName;
		}
	}

	@Override
	public void setCategoryName(String categoryName) {
		_categoryName = categoryName;
	}

	@Override
	public long getDossierId() {
		return _dossierId;
	}

	@Override
	public void setDossierId(long dossierId) {
		_columnBitmask |= DOSSIERID_COLUMN_BITMASK;

		if (!_setOriginalDossierId) {
			_setOriginalDossierId = true;

			_originalDossierId = _dossierId;
		}

		_dossierId = dossierId;
	}

	public long getOriginalDossierId() {
		return _originalDossierId;
	}

	@Override
	public String getServiceName() {
		if (_serviceName == null) {
			return StringPool.BLANK;
		}
		else {
			return _serviceName;
		}
	}

	@Override
	public void setServiceName(String serviceName) {
		_serviceName = serviceName;
	}

	@Override
	public String getSubject() {
		if (_subject == null) {
			return StringPool.BLANK;
		}
		else {
			return _subject;
		}
	}

	@Override
	public void setSubject(String subject) {
		_subject = subject;
	}

	@Override
	public int getHostingId() {
		return _hostingId;
	}

	@Override
	public void setHostingId(int hostingId) {
		_hostingId = hostingId;
	}

	@Override
	public String getHosting() {
		if (_hosting == null) {
			return StringPool.BLANK;
		}
		else {
			return _hosting;
		}
	}

	@Override
	public void setHosting(String hosting) {
		_hosting = hosting;
	}

	@Override
	public int getLocationId() {
		return _locationId;
	}

	@Override
	public void setLocationId(int locationId) {
		_locationId = locationId;
	}

	@Override
	public String getLocation() {
		if (_location == null) {
			return StringPool.BLANK;
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		_location = location;
	}

	@Override
	public String getGeolocation() {
		if (_geolocation == null) {
			return StringPool.BLANK;
		}
		else {
			return _geolocation;
		}
	}

	@Override
	public void setGeolocation(String geolocation) {
		_geolocation = geolocation;
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@Override
	public Date getFinishDate() {
		return _finishDate;
	}

	@Override
	public void setFinishDate(Date finishDate) {
		_finishDate = finishDate;
	}

	@Override
	public String getState() {
		if (_state == null) {
			return StringPool.BLANK;
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		_state = state;
	}

	@Override
	public String getStateName() {
		if (_stateName == null) {
			return StringPool.BLANK;
		}
		else {
			return _stateName;
		}
	}

	@Override
	public void setStateName(String stateName) {
		_stateName = stateName;
	}

	@Override
	public String getStateColor() {
		if (_stateColor == null) {
			return StringPool.BLANK;
		}
		else {
			return _stateColor;
		}
	}

	@Override
	public void setStateColor(String stateColor) {
		_stateColor = stateColor;
	}

	@Override
	public String getPriority() {
		if (_priority == null) {
			return StringPool.BLANK;
		}
		else {
			return _priority;
		}
	}

	@Override
	public void setPriority(String priority) {
		_priority = priority;
	}

	@Override
	public String getOverdue() {
		if (_overdue == null) {
			return StringPool.BLANK;
		}
		else {
			return _overdue;
		}
	}

	@Override
	public void setOverdue(String overdue) {
		_overdue = overdue;
	}

	@Override
	public long getManagerId() {
		return _managerId;
	}

	@Override
	public void setManagerId(long managerId) {
		_columnBitmask |= MANAGERID_COLUMN_BITMASK;

		if (!_setOriginalManagerId) {
			_setOriginalManagerId = true;

			_originalManagerId = _managerId;
		}

		_managerId = managerId;
	}

	public long getOriginalManagerId() {
		return _originalManagerId;
	}

	@Override
	public String getManagerName() {
		if (_managerName == null) {
			return StringPool.BLANK;
		}
		else {
			return _managerName;
		}
	}

	@Override
	public void setManagerName(String managerName) {
		_managerName = managerName;
	}

	@Override
	public long getLeaderId() {
		return _leaderId;
	}

	@Override
	public void setLeaderId(long leaderId) {
		_columnBitmask |= LEADERID_COLUMN_BITMASK;

		if (!_setOriginalLeaderId) {
			_setOriginalLeaderId = true;

			_originalLeaderId = _leaderId;
		}

		_leaderId = leaderId;
	}

	public long getOriginalLeaderId() {
		return _originalLeaderId;
	}

	@Override
	public String getLeaderName() {
		if (_leaderName == null) {
			return StringPool.BLANK;
		}
		else {
			return _leaderName;
		}
	}

	@Override
	public void setLeaderName(String leaderName) {
		_leaderName = leaderName;
	}

	@Override
	public String getLeaderJobTitle() {
		if (_leaderJobTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _leaderJobTitle;
		}
	}

	@Override
	public void setLeaderJobTitle(String leaderJobTitle) {
		_leaderJobTitle = leaderJobTitle;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public String getPermission() {
		if (_permission == null) {
			return StringPool.BLANK;
		}
		else {
			return _permission;
		}
	}

	@Override
	public void setPermission(String permission) {
		_permission = permission;
	}

	@Override
	public String getResultNote() {
		if (_resultNote == null) {
			return StringPool.BLANK;
		}
		else {
			return _resultNote;
		}
	}

	@Override
	public void setResultNote(String resultNote) {
		_resultNote = resultNote;
	}

	@Override
	public String getProgress() {
		if (_progress == null) {
			return StringPool.BLANK;
		}
		else {
			return _progress;
		}
	}

	@Override
	public void setProgress(String progress) {
		_progress = progress;
	}

	@Override
	public String getAssignType() {
		if (_assignType == null) {
			return StringPool.BLANK;
		}
		else {
			return _assignType;
		}
	}

	@Override
	public void setAssignType(String assignType) {
		_columnBitmask |= ASSIGNTYPE_COLUMN_BITMASK;

		if (_originalAssignType == null) {
			_originalAssignType = _assignType;
		}

		_assignType = assignType;
	}

	public String getOriginalAssignType() {
		return GetterUtil.getString(_originalAssignType);
	}

	@Override
	public long getJobPosId() {
		return _jobPosId;
	}

	@Override
	public void setJobPosId(long jobPosId) {
		_jobPosId = jobPosId;
	}

	@Override
	public String getJobPosTitle() {
		if (_jobPosTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _jobPosTitle;
		}
	}

	@Override
	public void setJobPosTitle(String jobPosTitle) {
		_jobPosTitle = jobPosTitle;
	}

	@Override
	public String getInvitation() {
		if (_invitation == null) {
			return StringPool.BLANK;
		}
		else {
			return _invitation;
		}
	}

	@Override
	public void setInvitation(String invitation) {
		_invitation = invitation;
	}

	@Override
	public String getEditable() {
		if (_editable == null) {
			return StringPool.BLANK;
		}
		else {
			return _editable;
		}
	}

	@Override
	public void setEditable(String editable) {
		_editable = editable;
	}

	@Override
	public String getVaqcontactname() {
		if (_vaqcontactname == null) {
			return StringPool.BLANK;
		}
		else {
			return _vaqcontactname;
		}
	}

	@Override
	public void setVaqcontactname(String vaqcontactname) {
		_vaqcontactname = vaqcontactname;
	}

	@Override
	public String getVaqcontactphone() {
		if (_vaqcontactphone == null) {
			return StringPool.BLANK;
		}
		else {
			return _vaqcontactphone;
		}
	}

	@Override
	public void setVaqcontactphone(String vaqcontactphone) {
		_vaqcontactphone = vaqcontactphone;
	}

	@Override
	public String getApplicantIdNo() {
		if (_applicantIdNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantIdNo;
		}
	}

	@Override
	public void setApplicantIdNo(String applicantIdNo) {
		_columnBitmask |= APPLICANTIDNO_COLUMN_BITMASK;

		if (_originalApplicantIdNo == null) {
			_originalApplicantIdNo = _applicantIdNo;
		}

		_applicantIdNo = applicantIdNo;
	}

	public String getOriginalApplicantIdNo() {
		return GetterUtil.getString(_originalApplicantIdNo);
	}

	@Override
	public String getImportercontactname() {
		if (_importercontactname == null) {
			return StringPool.BLANK;
		}
		else {
			return _importercontactname;
		}
	}

	@Override
	public void setImportercontactname(String importercontactname) {
		_importercontactname = importercontactname;
	}

	@Override
	public String getImportercontactphone() {
		if (_importercontactphone == null) {
			return StringPool.BLANK;
		}
		else {
			return _importercontactphone;
		}
	}

	@Override
	public void setImportercontactphone(String importercontactphone) {
		_importercontactphone = importercontactphone;
	}

	@Override
	public String getImportercontactemail() {
		if (_importercontactemail == null) {
			return StringPool.BLANK;
		}
		else {
			return _importercontactemail;
		}
	}

	@Override
	public void setImportercontactemail(String importercontactemail) {
		_importercontactemail = importercontactemail;
	}

	@Override
	public String getImporterfax() {
		if (_importerfax == null) {
			return StringPool.BLANK;
		}
		else {
			return _importerfax;
		}
	}

	@Override
	public void setImporterfax(String importerfax) {
		_importerfax = importerfax;
	}

	@Override
	public String getSoTKHQ() {
		if (_soTKHQ == null) {
			return StringPool.BLANK;
		}
		else {
			return _soTKHQ;
		}
	}

	@Override
	public void setSoTKHQ(String soTKHQ) {
		_soTKHQ = soTKHQ;
	}

	@Override
	public String getNgayTKHQ() {
		if (_ngayTKHQ == null) {
			return StringPool.BLANK;
		}
		else {
			return _ngayTKHQ;
		}
	}

	@Override
	public void setNgayTKHQ(String ngayTKHQ) {
		_ngayTKHQ = ngayTKHQ;
	}

	@Override
	public String getMaChiCucHQ() {
		if (_maChiCucHQ == null) {
			return StringPool.BLANK;
		}
		else {
			return _maChiCucHQ;
		}
	}

	@Override
	public void setMaChiCucHQ(String maChiCucHQ) {
		_maChiCucHQ = maChiCucHQ;
	}

	@Override
	public String getNhanHieu() {
		if (_nhanHieu == null) {
			return StringPool.BLANK;
		}
		else {
			return _nhanHieu;
		}
	}

	@Override
	public void setNhanHieu(String nhanHieu) {
		_nhanHieu = nhanHieu;
	}

	@Override
	public String getTenThuongMai() {
		if (_tenThuongMai == null) {
			return StringPool.BLANK;
		}
		else {
			return _tenThuongMai;
		}
	}

	@Override
	public void setTenThuongMai(String tenThuongMai) {
		_tenThuongMai = tenThuongMai;
	}

	@Override
	public String getMaKieuLoai() {
		if (_maKieuLoai == null) {
			return StringPool.BLANK;
		}
		else {
			return _maKieuLoai;
		}
	}

	@Override
	public void setMaKieuLoai(String maKieuLoai) {
		_maKieuLoai = maKieuLoai;
	}

	@Override
	public String getLoaiPhuongTien() {
		if (_loaiPhuongTien == null) {
			return StringPool.BLANK;
		}
		else {
			return _loaiPhuongTien;
		}
	}

	@Override
	public void setLoaiPhuongTien(String loaiPhuongTien) {
		_loaiPhuongTien = loaiPhuongTien;
	}

	@Override
	public String getSoKhung() {
		if (_soKhung == null) {
			return StringPool.BLANK;
		}
		else {
			return _soKhung;
		}
	}

	@Override
	public void setSoKhung(String soKhung) {
		_soKhung = soKhung;
	}

	@Override
	public String getSoDongCo() {
		if (_soDongCo == null) {
			return StringPool.BLANK;
		}
		else {
			return _soDongCo;
		}
	}

	@Override
	public void setSoDongCo(String soDongCo) {
		_soDongCo = soDongCo;
	}

	@Override
	public String getTinhTrangPhuongTien() {
		if (_tinhTrangPhuongTien == null) {
			return StringPool.BLANK;
		}
		else {
			return _tinhTrangPhuongTien;
		}
	}

	@Override
	public void setTinhTrangPhuongTien(String tinhTrangPhuongTien) {
		_tinhTrangPhuongTien = tinhTrangPhuongTien;
	}

	@Override
	public String getKyHieuThietKe() {
		if (_kyHieuThietKe == null) {
			return StringPool.BLANK;
		}
		else {
			return _kyHieuThietKe;
		}
	}

	@Override
	public void setKyHieuThietKe(String kyHieuThietKe) {
		_kyHieuThietKe = kyHieuThietKe;
	}

	@Override
	public String getSoGCNThamDinhThietKe() {
		if (_soGCNThamDinhThietKe == null) {
			return StringPool.BLANK;
		}
		else {
			return _soGCNThamDinhThietKe;
		}
	}

	@Override
	public void setSoGCNThamDinhThietKe(String soGCNThamDinhThietKe) {
		_soGCNThamDinhThietKe = soGCNThamDinhThietKe;
	}

	@Override
	public String getSoGCNPheDuyetKieuLoaiNuocNgoai() {
		if (_soGCNPheDuyetKieuLoaiNuocNgoai == null) {
			return StringPool.BLANK;
		}
		else {
			return _soGCNPheDuyetKieuLoaiNuocNgoai;
		}
	}

	@Override
	public void setSoGCNPheDuyetKieuLoaiNuocNgoai(
		String soGCNPheDuyetKieuLoaiNuocNgoai) {
		_soGCNPheDuyetKieuLoaiNuocNgoai = soGCNPheDuyetKieuLoaiNuocNgoai;
	}

	@Override
	public String getTenCoSoSanXuat() {
		if (_tenCoSoSanXuat == null) {
			return StringPool.BLANK;
		}
		else {
			return _tenCoSoSanXuat;
		}
	}

	@Override
	public void setTenCoSoSanXuat(String tenCoSoSanXuat) {
		_tenCoSoSanXuat = tenCoSoSanXuat;
	}

	@Override
	public String getDiaChiCoSoSanXuat() {
		if (_diaChiCoSoSanXuat == null) {
			return StringPool.BLANK;
		}
		else {
			return _diaChiCoSoSanXuat;
		}
	}

	@Override
	public void setDiaChiCoSoSanXuat(String diaChiCoSoSanXuat) {
		_diaChiCoSoSanXuat = diaChiCoSoSanXuat;
	}

	@Override
	public String getTenXuongSanXuat() {
		if (_tenXuongSanXuat == null) {
			return StringPool.BLANK;
		}
		else {
			return _tenXuongSanXuat;
		}
	}

	@Override
	public void setTenXuongSanXuat(String tenXuongSanXuat) {
		_tenXuongSanXuat = tenXuongSanXuat;
	}

	@Override
	public String getDiaChiXuongSanXuat() {
		if (_diaChiXuongSanXuat == null) {
			return StringPool.BLANK;
		}
		else {
			return _diaChiXuongSanXuat;
		}
	}

	@Override
	public void setDiaChiXuongSanXuat(String diaChiXuongSanXuat) {
		_diaChiXuongSanXuat = diaChiXuongSanXuat;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VRCorporationAttendee.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VRCorporationAttendee toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VRCorporationAttendee)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VRCorporationAttendeeImpl vrCorporationAttendeeImpl = new VRCorporationAttendeeImpl();

		vrCorporationAttendeeImpl.setId(getId());
		vrCorporationAttendeeImpl.setMtCore(getMtCore());
		vrCorporationAttendeeImpl.setCreateDate(getCreateDate());
		vrCorporationAttendeeImpl.setModifyDate(getModifyDate());
		vrCorporationAttendeeImpl.setSyncDate(getSyncDate());
		vrCorporationAttendeeImpl.setCorporationCode(getCorporationCode());
		vrCorporationAttendeeImpl.setCorporationName(getCorporationName());
		vrCorporationAttendeeImpl.setInspectionDate(getInspectionDate());
		vrCorporationAttendeeImpl.setRegisterednumber(getRegisterednumber());
		vrCorporationAttendeeImpl.setTestingRegisteredPlace(getTestingRegisteredPlace());
		vrCorporationAttendeeImpl.setTestingPlaceDistrict(getTestingPlaceDistrict());
		vrCorporationAttendeeImpl.setTestingPlaceCity(getTestingPlaceCity());
		vrCorporationAttendeeImpl.setTestingPlaceRegion(getTestingPlaceRegion());
		vrCorporationAttendeeImpl.setTestingPlaceCountry(getTestingPlaceCountry());
		vrCorporationAttendeeImpl.setTestingRemarks(getTestingRemarks());
		vrCorporationAttendeeImpl.setActivityId(getActivityId());
		vrCorporationAttendeeImpl.setUserId(getUserId());
		vrCorporationAttendeeImpl.setUserName(getUserName());
		vrCorporationAttendeeImpl.setActivityType(getActivityType());
		vrCorporationAttendeeImpl.setActivityCatetory(getActivityCatetory());
		vrCorporationAttendeeImpl.setCategoryName(getCategoryName());
		vrCorporationAttendeeImpl.setDossierId(getDossierId());
		vrCorporationAttendeeImpl.setServiceName(getServiceName());
		vrCorporationAttendeeImpl.setSubject(getSubject());
		vrCorporationAttendeeImpl.setHostingId(getHostingId());
		vrCorporationAttendeeImpl.setHosting(getHosting());
		vrCorporationAttendeeImpl.setLocationId(getLocationId());
		vrCorporationAttendeeImpl.setLocation(getLocation());
		vrCorporationAttendeeImpl.setGeolocation(getGeolocation());
		vrCorporationAttendeeImpl.setStartDate(getStartDate());
		vrCorporationAttendeeImpl.setEndDate(getEndDate());
		vrCorporationAttendeeImpl.setFinishDate(getFinishDate());
		vrCorporationAttendeeImpl.setState(getState());
		vrCorporationAttendeeImpl.setStateName(getStateName());
		vrCorporationAttendeeImpl.setStateColor(getStateColor());
		vrCorporationAttendeeImpl.setPriority(getPriority());
		vrCorporationAttendeeImpl.setOverdue(getOverdue());
		vrCorporationAttendeeImpl.setManagerId(getManagerId());
		vrCorporationAttendeeImpl.setManagerName(getManagerName());
		vrCorporationAttendeeImpl.setLeaderId(getLeaderId());
		vrCorporationAttendeeImpl.setLeaderName(getLeaderName());
		vrCorporationAttendeeImpl.setLeaderJobTitle(getLeaderJobTitle());
		vrCorporationAttendeeImpl.setDescription(getDescription());
		vrCorporationAttendeeImpl.setPermission(getPermission());
		vrCorporationAttendeeImpl.setResultNote(getResultNote());
		vrCorporationAttendeeImpl.setProgress(getProgress());
		vrCorporationAttendeeImpl.setAssignType(getAssignType());
		vrCorporationAttendeeImpl.setJobPosId(getJobPosId());
		vrCorporationAttendeeImpl.setJobPosTitle(getJobPosTitle());
		vrCorporationAttendeeImpl.setInvitation(getInvitation());
		vrCorporationAttendeeImpl.setEditable(getEditable());
		vrCorporationAttendeeImpl.setVaqcontactname(getVaqcontactname());
		vrCorporationAttendeeImpl.setVaqcontactphone(getVaqcontactphone());
		vrCorporationAttendeeImpl.setApplicantIdNo(getApplicantIdNo());
		vrCorporationAttendeeImpl.setImportercontactname(getImportercontactname());
		vrCorporationAttendeeImpl.setImportercontactphone(getImportercontactphone());
		vrCorporationAttendeeImpl.setImportercontactemail(getImportercontactemail());
		vrCorporationAttendeeImpl.setImporterfax(getImporterfax());
		vrCorporationAttendeeImpl.setSoTKHQ(getSoTKHQ());
		vrCorporationAttendeeImpl.setNgayTKHQ(getNgayTKHQ());
		vrCorporationAttendeeImpl.setMaChiCucHQ(getMaChiCucHQ());
		vrCorporationAttendeeImpl.setNhanHieu(getNhanHieu());
		vrCorporationAttendeeImpl.setTenThuongMai(getTenThuongMai());
		vrCorporationAttendeeImpl.setMaKieuLoai(getMaKieuLoai());
		vrCorporationAttendeeImpl.setLoaiPhuongTien(getLoaiPhuongTien());
		vrCorporationAttendeeImpl.setSoKhung(getSoKhung());
		vrCorporationAttendeeImpl.setSoDongCo(getSoDongCo());
		vrCorporationAttendeeImpl.setTinhTrangPhuongTien(getTinhTrangPhuongTien());
		vrCorporationAttendeeImpl.setKyHieuThietKe(getKyHieuThietKe());
		vrCorporationAttendeeImpl.setSoGCNThamDinhThietKe(getSoGCNThamDinhThietKe());
		vrCorporationAttendeeImpl.setSoGCNPheDuyetKieuLoaiNuocNgoai(getSoGCNPheDuyetKieuLoaiNuocNgoai());
		vrCorporationAttendeeImpl.setTenCoSoSanXuat(getTenCoSoSanXuat());
		vrCorporationAttendeeImpl.setDiaChiCoSoSanXuat(getDiaChiCoSoSanXuat());
		vrCorporationAttendeeImpl.setTenXuongSanXuat(getTenXuongSanXuat());
		vrCorporationAttendeeImpl.setDiaChiXuongSanXuat(getDiaChiXuongSanXuat());

		vrCorporationAttendeeImpl.resetOriginalValues();

		return vrCorporationAttendeeImpl;
	}

	@Override
	public int compareTo(VRCorporationAttendee vrCorporationAttendee) {
		int value = 0;

		if (getId() < vrCorporationAttendee.getId()) {
			value = -1;
		}
		else if (getId() > vrCorporationAttendee.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VRCorporationAttendee)) {
			return false;
		}

		VRCorporationAttendee vrCorporationAttendee = (VRCorporationAttendee)obj;

		long primaryKey = vrCorporationAttendee.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VRCorporationAttendeeModelImpl vrCorporationAttendeeModelImpl = this;

		vrCorporationAttendeeModelImpl._originalCorporationCode = vrCorporationAttendeeModelImpl._corporationCode;

		vrCorporationAttendeeModelImpl._originalInspectionDate = vrCorporationAttendeeModelImpl._inspectionDate;

		vrCorporationAttendeeModelImpl._originalActivityCatetory = vrCorporationAttendeeModelImpl._activityCatetory;

		vrCorporationAttendeeModelImpl._originalDossierId = vrCorporationAttendeeModelImpl._dossierId;

		vrCorporationAttendeeModelImpl._setOriginalDossierId = false;

		vrCorporationAttendeeModelImpl._originalManagerId = vrCorporationAttendeeModelImpl._managerId;

		vrCorporationAttendeeModelImpl._setOriginalManagerId = false;

		vrCorporationAttendeeModelImpl._originalLeaderId = vrCorporationAttendeeModelImpl._leaderId;

		vrCorporationAttendeeModelImpl._setOriginalLeaderId = false;

		vrCorporationAttendeeModelImpl._originalAssignType = vrCorporationAttendeeModelImpl._assignType;

		vrCorporationAttendeeModelImpl._originalApplicantIdNo = vrCorporationAttendeeModelImpl._applicantIdNo;

		vrCorporationAttendeeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VRCorporationAttendee> toCacheModel() {
		VRCorporationAttendeeCacheModel vrCorporationAttendeeCacheModel = new VRCorporationAttendeeCacheModel();

		vrCorporationAttendeeCacheModel.id = getId();

		vrCorporationAttendeeCacheModel.mtCore = getMtCore();

		Date createDate = getCreateDate();

		if (createDate != null) {
			vrCorporationAttendeeCacheModel.createDate = createDate.getTime();
		}
		else {
			vrCorporationAttendeeCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifyDate = getModifyDate();

		if (modifyDate != null) {
			vrCorporationAttendeeCacheModel.modifyDate = modifyDate.getTime();
		}
		else {
			vrCorporationAttendeeCacheModel.modifyDate = Long.MIN_VALUE;
		}

		Date syncDate = getSyncDate();

		if (syncDate != null) {
			vrCorporationAttendeeCacheModel.syncDate = syncDate.getTime();
		}
		else {
			vrCorporationAttendeeCacheModel.syncDate = Long.MIN_VALUE;
		}

		vrCorporationAttendeeCacheModel.corporationCode = getCorporationCode();

		String corporationCode = vrCorporationAttendeeCacheModel.corporationCode;

		if ((corporationCode != null) && (corporationCode.length() == 0)) {
			vrCorporationAttendeeCacheModel.corporationCode = null;
		}

		vrCorporationAttendeeCacheModel.corporationName = getCorporationName();

		String corporationName = vrCorporationAttendeeCacheModel.corporationName;

		if ((corporationName != null) && (corporationName.length() == 0)) {
			vrCorporationAttendeeCacheModel.corporationName = null;
		}

		Date inspectionDate = getInspectionDate();

		if (inspectionDate != null) {
			vrCorporationAttendeeCacheModel.inspectionDate = inspectionDate.getTime();
		}
		else {
			vrCorporationAttendeeCacheModel.inspectionDate = Long.MIN_VALUE;
		}

		vrCorporationAttendeeCacheModel.registerednumber = getRegisterednumber();

		String registerednumber = vrCorporationAttendeeCacheModel.registerednumber;

		if ((registerednumber != null) && (registerednumber.length() == 0)) {
			vrCorporationAttendeeCacheModel.registerednumber = null;
		}

		vrCorporationAttendeeCacheModel.testingRegisteredPlace = getTestingRegisteredPlace();

		String testingRegisteredPlace = vrCorporationAttendeeCacheModel.testingRegisteredPlace;

		if ((testingRegisteredPlace != null) &&
				(testingRegisteredPlace.length() == 0)) {
			vrCorporationAttendeeCacheModel.testingRegisteredPlace = null;
		}

		vrCorporationAttendeeCacheModel.testingPlaceDistrict = getTestingPlaceDistrict();

		String testingPlaceDistrict = vrCorporationAttendeeCacheModel.testingPlaceDistrict;

		if ((testingPlaceDistrict != null) &&
				(testingPlaceDistrict.length() == 0)) {
			vrCorporationAttendeeCacheModel.testingPlaceDistrict = null;
		}

		vrCorporationAttendeeCacheModel.testingPlaceCity = getTestingPlaceCity();

		String testingPlaceCity = vrCorporationAttendeeCacheModel.testingPlaceCity;

		if ((testingPlaceCity != null) && (testingPlaceCity.length() == 0)) {
			vrCorporationAttendeeCacheModel.testingPlaceCity = null;
		}

		vrCorporationAttendeeCacheModel.testingPlaceRegion = getTestingPlaceRegion();

		String testingPlaceRegion = vrCorporationAttendeeCacheModel.testingPlaceRegion;

		if ((testingPlaceRegion != null) && (testingPlaceRegion.length() == 0)) {
			vrCorporationAttendeeCacheModel.testingPlaceRegion = null;
		}

		vrCorporationAttendeeCacheModel.testingPlaceCountry = getTestingPlaceCountry();

		String testingPlaceCountry = vrCorporationAttendeeCacheModel.testingPlaceCountry;

		if ((testingPlaceCountry != null) &&
				(testingPlaceCountry.length() == 0)) {
			vrCorporationAttendeeCacheModel.testingPlaceCountry = null;
		}

		vrCorporationAttendeeCacheModel.testingRemarks = getTestingRemarks();

		String testingRemarks = vrCorporationAttendeeCacheModel.testingRemarks;

		if ((testingRemarks != null) && (testingRemarks.length() == 0)) {
			vrCorporationAttendeeCacheModel.testingRemarks = null;
		}

		vrCorporationAttendeeCacheModel.activityId = getActivityId();

		vrCorporationAttendeeCacheModel.userId = getUserId();

		vrCorporationAttendeeCacheModel.userName = getUserName();

		String userName = vrCorporationAttendeeCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			vrCorporationAttendeeCacheModel.userName = null;
		}

		vrCorporationAttendeeCacheModel.activityType = getActivityType();

		String activityType = vrCorporationAttendeeCacheModel.activityType;

		if ((activityType != null) && (activityType.length() == 0)) {
			vrCorporationAttendeeCacheModel.activityType = null;
		}

		vrCorporationAttendeeCacheModel.activityCatetory = getActivityCatetory();

		String activityCatetory = vrCorporationAttendeeCacheModel.activityCatetory;

		if ((activityCatetory != null) && (activityCatetory.length() == 0)) {
			vrCorporationAttendeeCacheModel.activityCatetory = null;
		}

		vrCorporationAttendeeCacheModel.categoryName = getCategoryName();

		String categoryName = vrCorporationAttendeeCacheModel.categoryName;

		if ((categoryName != null) && (categoryName.length() == 0)) {
			vrCorporationAttendeeCacheModel.categoryName = null;
		}

		vrCorporationAttendeeCacheModel.dossierId = getDossierId();

		vrCorporationAttendeeCacheModel.serviceName = getServiceName();

		String serviceName = vrCorporationAttendeeCacheModel.serviceName;

		if ((serviceName != null) && (serviceName.length() == 0)) {
			vrCorporationAttendeeCacheModel.serviceName = null;
		}

		vrCorporationAttendeeCacheModel.subject = getSubject();

		String subject = vrCorporationAttendeeCacheModel.subject;

		if ((subject != null) && (subject.length() == 0)) {
			vrCorporationAttendeeCacheModel.subject = null;
		}

		vrCorporationAttendeeCacheModel.hostingId = getHostingId();

		vrCorporationAttendeeCacheModel.hosting = getHosting();

		String hosting = vrCorporationAttendeeCacheModel.hosting;

		if ((hosting != null) && (hosting.length() == 0)) {
			vrCorporationAttendeeCacheModel.hosting = null;
		}

		vrCorporationAttendeeCacheModel.locationId = getLocationId();

		vrCorporationAttendeeCacheModel.location = getLocation();

		String location = vrCorporationAttendeeCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			vrCorporationAttendeeCacheModel.location = null;
		}

		vrCorporationAttendeeCacheModel.geolocation = getGeolocation();

		String geolocation = vrCorporationAttendeeCacheModel.geolocation;

		if ((geolocation != null) && (geolocation.length() == 0)) {
			vrCorporationAttendeeCacheModel.geolocation = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			vrCorporationAttendeeCacheModel.startDate = startDate.getTime();
		}
		else {
			vrCorporationAttendeeCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			vrCorporationAttendeeCacheModel.endDate = endDate.getTime();
		}
		else {
			vrCorporationAttendeeCacheModel.endDate = Long.MIN_VALUE;
		}

		Date finishDate = getFinishDate();

		if (finishDate != null) {
			vrCorporationAttendeeCacheModel.finishDate = finishDate.getTime();
		}
		else {
			vrCorporationAttendeeCacheModel.finishDate = Long.MIN_VALUE;
		}

		vrCorporationAttendeeCacheModel.state = getState();

		String state = vrCorporationAttendeeCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			vrCorporationAttendeeCacheModel.state = null;
		}

		vrCorporationAttendeeCacheModel.stateName = getStateName();

		String stateName = vrCorporationAttendeeCacheModel.stateName;

		if ((stateName != null) && (stateName.length() == 0)) {
			vrCorporationAttendeeCacheModel.stateName = null;
		}

		vrCorporationAttendeeCacheModel.stateColor = getStateColor();

		String stateColor = vrCorporationAttendeeCacheModel.stateColor;

		if ((stateColor != null) && (stateColor.length() == 0)) {
			vrCorporationAttendeeCacheModel.stateColor = null;
		}

		vrCorporationAttendeeCacheModel.priority = getPriority();

		String priority = vrCorporationAttendeeCacheModel.priority;

		if ((priority != null) && (priority.length() == 0)) {
			vrCorporationAttendeeCacheModel.priority = null;
		}

		vrCorporationAttendeeCacheModel.overdue = getOverdue();

		String overdue = vrCorporationAttendeeCacheModel.overdue;

		if ((overdue != null) && (overdue.length() == 0)) {
			vrCorporationAttendeeCacheModel.overdue = null;
		}

		vrCorporationAttendeeCacheModel.managerId = getManagerId();

		vrCorporationAttendeeCacheModel.managerName = getManagerName();

		String managerName = vrCorporationAttendeeCacheModel.managerName;

		if ((managerName != null) && (managerName.length() == 0)) {
			vrCorporationAttendeeCacheModel.managerName = null;
		}

		vrCorporationAttendeeCacheModel.leaderId = getLeaderId();

		vrCorporationAttendeeCacheModel.leaderName = getLeaderName();

		String leaderName = vrCorporationAttendeeCacheModel.leaderName;

		if ((leaderName != null) && (leaderName.length() == 0)) {
			vrCorporationAttendeeCacheModel.leaderName = null;
		}

		vrCorporationAttendeeCacheModel.leaderJobTitle = getLeaderJobTitle();

		String leaderJobTitle = vrCorporationAttendeeCacheModel.leaderJobTitle;

		if ((leaderJobTitle != null) && (leaderJobTitle.length() == 0)) {
			vrCorporationAttendeeCacheModel.leaderJobTitle = null;
		}

		vrCorporationAttendeeCacheModel.description = getDescription();

		String description = vrCorporationAttendeeCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			vrCorporationAttendeeCacheModel.description = null;
		}

		vrCorporationAttendeeCacheModel.permission = getPermission();

		String permission = vrCorporationAttendeeCacheModel.permission;

		if ((permission != null) && (permission.length() == 0)) {
			vrCorporationAttendeeCacheModel.permission = null;
		}

		vrCorporationAttendeeCacheModel.resultNote = getResultNote();

		String resultNote = vrCorporationAttendeeCacheModel.resultNote;

		if ((resultNote != null) && (resultNote.length() == 0)) {
			vrCorporationAttendeeCacheModel.resultNote = null;
		}

		vrCorporationAttendeeCacheModel.progress = getProgress();

		String progress = vrCorporationAttendeeCacheModel.progress;

		if ((progress != null) && (progress.length() == 0)) {
			vrCorporationAttendeeCacheModel.progress = null;
		}

		vrCorporationAttendeeCacheModel.assignType = getAssignType();

		String assignType = vrCorporationAttendeeCacheModel.assignType;

		if ((assignType != null) && (assignType.length() == 0)) {
			vrCorporationAttendeeCacheModel.assignType = null;
		}

		vrCorporationAttendeeCacheModel.jobPosId = getJobPosId();

		vrCorporationAttendeeCacheModel.jobPosTitle = getJobPosTitle();

		String jobPosTitle = vrCorporationAttendeeCacheModel.jobPosTitle;

		if ((jobPosTitle != null) && (jobPosTitle.length() == 0)) {
			vrCorporationAttendeeCacheModel.jobPosTitle = null;
		}

		vrCorporationAttendeeCacheModel.invitation = getInvitation();

		String invitation = vrCorporationAttendeeCacheModel.invitation;

		if ((invitation != null) && (invitation.length() == 0)) {
			vrCorporationAttendeeCacheModel.invitation = null;
		}

		vrCorporationAttendeeCacheModel.editable = getEditable();

		String editable = vrCorporationAttendeeCacheModel.editable;

		if ((editable != null) && (editable.length() == 0)) {
			vrCorporationAttendeeCacheModel.editable = null;
		}

		vrCorporationAttendeeCacheModel.vaqcontactname = getVaqcontactname();

		String vaqcontactname = vrCorporationAttendeeCacheModel.vaqcontactname;

		if ((vaqcontactname != null) && (vaqcontactname.length() == 0)) {
			vrCorporationAttendeeCacheModel.vaqcontactname = null;
		}

		vrCorporationAttendeeCacheModel.vaqcontactphone = getVaqcontactphone();

		String vaqcontactphone = vrCorporationAttendeeCacheModel.vaqcontactphone;

		if ((vaqcontactphone != null) && (vaqcontactphone.length() == 0)) {
			vrCorporationAttendeeCacheModel.vaqcontactphone = null;
		}

		vrCorporationAttendeeCacheModel.applicantIdNo = getApplicantIdNo();

		String applicantIdNo = vrCorporationAttendeeCacheModel.applicantIdNo;

		if ((applicantIdNo != null) && (applicantIdNo.length() == 0)) {
			vrCorporationAttendeeCacheModel.applicantIdNo = null;
		}

		vrCorporationAttendeeCacheModel.importercontactname = getImportercontactname();

		String importercontactname = vrCorporationAttendeeCacheModel.importercontactname;

		if ((importercontactname != null) &&
				(importercontactname.length() == 0)) {
			vrCorporationAttendeeCacheModel.importercontactname = null;
		}

		vrCorporationAttendeeCacheModel.importercontactphone = getImportercontactphone();

		String importercontactphone = vrCorporationAttendeeCacheModel.importercontactphone;

		if ((importercontactphone != null) &&
				(importercontactphone.length() == 0)) {
			vrCorporationAttendeeCacheModel.importercontactphone = null;
		}

		vrCorporationAttendeeCacheModel.importercontactemail = getImportercontactemail();

		String importercontactemail = vrCorporationAttendeeCacheModel.importercontactemail;

		if ((importercontactemail != null) &&
				(importercontactemail.length() == 0)) {
			vrCorporationAttendeeCacheModel.importercontactemail = null;
		}

		vrCorporationAttendeeCacheModel.importerfax = getImporterfax();

		String importerfax = vrCorporationAttendeeCacheModel.importerfax;

		if ((importerfax != null) && (importerfax.length() == 0)) {
			vrCorporationAttendeeCacheModel.importerfax = null;
		}

		vrCorporationAttendeeCacheModel.soTKHQ = getSoTKHQ();

		String soTKHQ = vrCorporationAttendeeCacheModel.soTKHQ;

		if ((soTKHQ != null) && (soTKHQ.length() == 0)) {
			vrCorporationAttendeeCacheModel.soTKHQ = null;
		}

		vrCorporationAttendeeCacheModel.ngayTKHQ = getNgayTKHQ();

		String ngayTKHQ = vrCorporationAttendeeCacheModel.ngayTKHQ;

		if ((ngayTKHQ != null) && (ngayTKHQ.length() == 0)) {
			vrCorporationAttendeeCacheModel.ngayTKHQ = null;
		}

		vrCorporationAttendeeCacheModel.maChiCucHQ = getMaChiCucHQ();

		String maChiCucHQ = vrCorporationAttendeeCacheModel.maChiCucHQ;

		if ((maChiCucHQ != null) && (maChiCucHQ.length() == 0)) {
			vrCorporationAttendeeCacheModel.maChiCucHQ = null;
		}

		vrCorporationAttendeeCacheModel.nhanHieu = getNhanHieu();

		String nhanHieu = vrCorporationAttendeeCacheModel.nhanHieu;

		if ((nhanHieu != null) && (nhanHieu.length() == 0)) {
			vrCorporationAttendeeCacheModel.nhanHieu = null;
		}

		vrCorporationAttendeeCacheModel.tenThuongMai = getTenThuongMai();

		String tenThuongMai = vrCorporationAttendeeCacheModel.tenThuongMai;

		if ((tenThuongMai != null) && (tenThuongMai.length() == 0)) {
			vrCorporationAttendeeCacheModel.tenThuongMai = null;
		}

		vrCorporationAttendeeCacheModel.maKieuLoai = getMaKieuLoai();

		String maKieuLoai = vrCorporationAttendeeCacheModel.maKieuLoai;

		if ((maKieuLoai != null) && (maKieuLoai.length() == 0)) {
			vrCorporationAttendeeCacheModel.maKieuLoai = null;
		}

		vrCorporationAttendeeCacheModel.loaiPhuongTien = getLoaiPhuongTien();

		String loaiPhuongTien = vrCorporationAttendeeCacheModel.loaiPhuongTien;

		if ((loaiPhuongTien != null) && (loaiPhuongTien.length() == 0)) {
			vrCorporationAttendeeCacheModel.loaiPhuongTien = null;
		}

		vrCorporationAttendeeCacheModel.soKhung = getSoKhung();

		String soKhung = vrCorporationAttendeeCacheModel.soKhung;

		if ((soKhung != null) && (soKhung.length() == 0)) {
			vrCorporationAttendeeCacheModel.soKhung = null;
		}

		vrCorporationAttendeeCacheModel.soDongCo = getSoDongCo();

		String soDongCo = vrCorporationAttendeeCacheModel.soDongCo;

		if ((soDongCo != null) && (soDongCo.length() == 0)) {
			vrCorporationAttendeeCacheModel.soDongCo = null;
		}

		vrCorporationAttendeeCacheModel.tinhTrangPhuongTien = getTinhTrangPhuongTien();

		String tinhTrangPhuongTien = vrCorporationAttendeeCacheModel.tinhTrangPhuongTien;

		if ((tinhTrangPhuongTien != null) &&
				(tinhTrangPhuongTien.length() == 0)) {
			vrCorporationAttendeeCacheModel.tinhTrangPhuongTien = null;
		}

		vrCorporationAttendeeCacheModel.kyHieuThietKe = getKyHieuThietKe();

		String kyHieuThietKe = vrCorporationAttendeeCacheModel.kyHieuThietKe;

		if ((kyHieuThietKe != null) && (kyHieuThietKe.length() == 0)) {
			vrCorporationAttendeeCacheModel.kyHieuThietKe = null;
		}

		vrCorporationAttendeeCacheModel.soGCNThamDinhThietKe = getSoGCNThamDinhThietKe();

		String soGCNThamDinhThietKe = vrCorporationAttendeeCacheModel.soGCNThamDinhThietKe;

		if ((soGCNThamDinhThietKe != null) &&
				(soGCNThamDinhThietKe.length() == 0)) {
			vrCorporationAttendeeCacheModel.soGCNThamDinhThietKe = null;
		}

		vrCorporationAttendeeCacheModel.soGCNPheDuyetKieuLoaiNuocNgoai = getSoGCNPheDuyetKieuLoaiNuocNgoai();

		String soGCNPheDuyetKieuLoaiNuocNgoai = vrCorporationAttendeeCacheModel.soGCNPheDuyetKieuLoaiNuocNgoai;

		if ((soGCNPheDuyetKieuLoaiNuocNgoai != null) &&
				(soGCNPheDuyetKieuLoaiNuocNgoai.length() == 0)) {
			vrCorporationAttendeeCacheModel.soGCNPheDuyetKieuLoaiNuocNgoai = null;
		}

		vrCorporationAttendeeCacheModel.tenCoSoSanXuat = getTenCoSoSanXuat();

		String tenCoSoSanXuat = vrCorporationAttendeeCacheModel.tenCoSoSanXuat;

		if ((tenCoSoSanXuat != null) && (tenCoSoSanXuat.length() == 0)) {
			vrCorporationAttendeeCacheModel.tenCoSoSanXuat = null;
		}

		vrCorporationAttendeeCacheModel.diaChiCoSoSanXuat = getDiaChiCoSoSanXuat();

		String diaChiCoSoSanXuat = vrCorporationAttendeeCacheModel.diaChiCoSoSanXuat;

		if ((diaChiCoSoSanXuat != null) && (diaChiCoSoSanXuat.length() == 0)) {
			vrCorporationAttendeeCacheModel.diaChiCoSoSanXuat = null;
		}

		vrCorporationAttendeeCacheModel.tenXuongSanXuat = getTenXuongSanXuat();

		String tenXuongSanXuat = vrCorporationAttendeeCacheModel.tenXuongSanXuat;

		if ((tenXuongSanXuat != null) && (tenXuongSanXuat.length() == 0)) {
			vrCorporationAttendeeCacheModel.tenXuongSanXuat = null;
		}

		vrCorporationAttendeeCacheModel.diaChiXuongSanXuat = getDiaChiXuongSanXuat();

		String diaChiXuongSanXuat = vrCorporationAttendeeCacheModel.diaChiXuongSanXuat;

		if ((diaChiXuongSanXuat != null) && (diaChiXuongSanXuat.length() == 0)) {
			vrCorporationAttendeeCacheModel.diaChiXuongSanXuat = null;
		}

		return vrCorporationAttendeeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(151);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", mtCore=");
		sb.append(getMtCore());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifyDate=");
		sb.append(getModifyDate());
		sb.append(", syncDate=");
		sb.append(getSyncDate());
		sb.append(", corporationCode=");
		sb.append(getCorporationCode());
		sb.append(", corporationName=");
		sb.append(getCorporationName());
		sb.append(", inspectionDate=");
		sb.append(getInspectionDate());
		sb.append(", registerednumber=");
		sb.append(getRegisterednumber());
		sb.append(", testingRegisteredPlace=");
		sb.append(getTestingRegisteredPlace());
		sb.append(", testingPlaceDistrict=");
		sb.append(getTestingPlaceDistrict());
		sb.append(", testingPlaceCity=");
		sb.append(getTestingPlaceCity());
		sb.append(", testingPlaceRegion=");
		sb.append(getTestingPlaceRegion());
		sb.append(", testingPlaceCountry=");
		sb.append(getTestingPlaceCountry());
		sb.append(", testingRemarks=");
		sb.append(getTestingRemarks());
		sb.append(", activityId=");
		sb.append(getActivityId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", activityType=");
		sb.append(getActivityType());
		sb.append(", activityCatetory=");
		sb.append(getActivityCatetory());
		sb.append(", categoryName=");
		sb.append(getCategoryName());
		sb.append(", dossierId=");
		sb.append(getDossierId());
		sb.append(", serviceName=");
		sb.append(getServiceName());
		sb.append(", subject=");
		sb.append(getSubject());
		sb.append(", hostingId=");
		sb.append(getHostingId());
		sb.append(", hosting=");
		sb.append(getHosting());
		sb.append(", locationId=");
		sb.append(getLocationId());
		sb.append(", location=");
		sb.append(getLocation());
		sb.append(", geolocation=");
		sb.append(getGeolocation());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", finishDate=");
		sb.append(getFinishDate());
		sb.append(", state=");
		sb.append(getState());
		sb.append(", stateName=");
		sb.append(getStateName());
		sb.append(", stateColor=");
		sb.append(getStateColor());
		sb.append(", priority=");
		sb.append(getPriority());
		sb.append(", overdue=");
		sb.append(getOverdue());
		sb.append(", managerId=");
		sb.append(getManagerId());
		sb.append(", managerName=");
		sb.append(getManagerName());
		sb.append(", leaderId=");
		sb.append(getLeaderId());
		sb.append(", leaderName=");
		sb.append(getLeaderName());
		sb.append(", leaderJobTitle=");
		sb.append(getLeaderJobTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", permission=");
		sb.append(getPermission());
		sb.append(", resultNote=");
		sb.append(getResultNote());
		sb.append(", progress=");
		sb.append(getProgress());
		sb.append(", assignType=");
		sb.append(getAssignType());
		sb.append(", jobPosId=");
		sb.append(getJobPosId());
		sb.append(", jobPosTitle=");
		sb.append(getJobPosTitle());
		sb.append(", invitation=");
		sb.append(getInvitation());
		sb.append(", editable=");
		sb.append(getEditable());
		sb.append(", vaqcontactname=");
		sb.append(getVaqcontactname());
		sb.append(", vaqcontactphone=");
		sb.append(getVaqcontactphone());
		sb.append(", applicantIdNo=");
		sb.append(getApplicantIdNo());
		sb.append(", importercontactname=");
		sb.append(getImportercontactname());
		sb.append(", importercontactphone=");
		sb.append(getImportercontactphone());
		sb.append(", importercontactemail=");
		sb.append(getImportercontactemail());
		sb.append(", importerfax=");
		sb.append(getImporterfax());
		sb.append(", soTKHQ=");
		sb.append(getSoTKHQ());
		sb.append(", ngayTKHQ=");
		sb.append(getNgayTKHQ());
		sb.append(", maChiCucHQ=");
		sb.append(getMaChiCucHQ());
		sb.append(", nhanHieu=");
		sb.append(getNhanHieu());
		sb.append(", tenThuongMai=");
		sb.append(getTenThuongMai());
		sb.append(", maKieuLoai=");
		sb.append(getMaKieuLoai());
		sb.append(", loaiPhuongTien=");
		sb.append(getLoaiPhuongTien());
		sb.append(", soKhung=");
		sb.append(getSoKhung());
		sb.append(", soDongCo=");
		sb.append(getSoDongCo());
		sb.append(", tinhTrangPhuongTien=");
		sb.append(getTinhTrangPhuongTien());
		sb.append(", kyHieuThietKe=");
		sb.append(getKyHieuThietKe());
		sb.append(", soGCNThamDinhThietKe=");
		sb.append(getSoGCNThamDinhThietKe());
		sb.append(", soGCNPheDuyetKieuLoaiNuocNgoai=");
		sb.append(getSoGCNPheDuyetKieuLoaiNuocNgoai());
		sb.append(", tenCoSoSanXuat=");
		sb.append(getTenCoSoSanXuat());
		sb.append(", diaChiCoSoSanXuat=");
		sb.append(getDiaChiCoSoSanXuat());
		sb.append(", tenXuongSanXuat=");
		sb.append(getTenXuongSanXuat());
		sb.append(", diaChiXuongSanXuat=");
		sb.append(getDiaChiXuongSanXuat());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(229);

		sb.append("<model><model-name>");
		sb.append("com.fds.vr.business.model.VRCorporationAttendee");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mtCore</column-name><column-value><![CDATA[");
		sb.append(getMtCore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifyDate</column-name><column-value><![CDATA[");
		sb.append(getModifyDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncDate</column-name><column-value><![CDATA[");
		sb.append(getSyncDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>corporationCode</column-name><column-value><![CDATA[");
		sb.append(getCorporationCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>corporationName</column-name><column-value><![CDATA[");
		sb.append(getCorporationName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionDate</column-name><column-value><![CDATA[");
		sb.append(getInspectionDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registerednumber</column-name><column-value><![CDATA[");
		sb.append(getRegisterednumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>testingRegisteredPlace</column-name><column-value><![CDATA[");
		sb.append(getTestingRegisteredPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>testingPlaceDistrict</column-name><column-value><![CDATA[");
		sb.append(getTestingPlaceDistrict());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>testingPlaceCity</column-name><column-value><![CDATA[");
		sb.append(getTestingPlaceCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>testingPlaceRegion</column-name><column-value><![CDATA[");
		sb.append(getTestingPlaceRegion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>testingPlaceCountry</column-name><column-value><![CDATA[");
		sb.append(getTestingPlaceCountry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>testingRemarks</column-name><column-value><![CDATA[");
		sb.append(getTestingRemarks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityId</column-name><column-value><![CDATA[");
		sb.append(getActivityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityType</column-name><column-value><![CDATA[");
		sb.append(getActivityType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityCatetory</column-name><column-value><![CDATA[");
		sb.append(getActivityCatetory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryName</column-name><column-value><![CDATA[");
		sb.append(getCategoryName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierId</column-name><column-value><![CDATA[");
		sb.append(getDossierId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serviceName</column-name><column-value><![CDATA[");
		sb.append(getServiceName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subject</column-name><column-value><![CDATA[");
		sb.append(getSubject());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hostingId</column-name><column-value><![CDATA[");
		sb.append(getHostingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hosting</column-name><column-value><![CDATA[");
		sb.append(getHosting());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>locationId</column-name><column-value><![CDATA[");
		sb.append(getLocationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>location</column-name><column-value><![CDATA[");
		sb.append(getLocation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>geolocation</column-name><column-value><![CDATA[");
		sb.append(getGeolocation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>finishDate</column-name><column-value><![CDATA[");
		sb.append(getFinishDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>state</column-name><column-value><![CDATA[");
		sb.append(getState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stateName</column-name><column-value><![CDATA[");
		sb.append(getStateName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stateColor</column-name><column-value><![CDATA[");
		sb.append(getStateColor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priority</column-name><column-value><![CDATA[");
		sb.append(getPriority());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>overdue</column-name><column-value><![CDATA[");
		sb.append(getOverdue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>managerId</column-name><column-value><![CDATA[");
		sb.append(getManagerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>managerName</column-name><column-value><![CDATA[");
		sb.append(getManagerName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leaderId</column-name><column-value><![CDATA[");
		sb.append(getLeaderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leaderName</column-name><column-value><![CDATA[");
		sb.append(getLeaderName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leaderJobTitle</column-name><column-value><![CDATA[");
		sb.append(getLeaderJobTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>permission</column-name><column-value><![CDATA[");
		sb.append(getPermission());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resultNote</column-name><column-value><![CDATA[");
		sb.append(getResultNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>progress</column-name><column-value><![CDATA[");
		sb.append(getProgress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assignType</column-name><column-value><![CDATA[");
		sb.append(getAssignType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jobPosId</column-name><column-value><![CDATA[");
		sb.append(getJobPosId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jobPosTitle</column-name><column-value><![CDATA[");
		sb.append(getJobPosTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>invitation</column-name><column-value><![CDATA[");
		sb.append(getInvitation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>editable</column-name><column-value><![CDATA[");
		sb.append(getEditable());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vaqcontactname</column-name><column-value><![CDATA[");
		sb.append(getVaqcontactname());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vaqcontactphone</column-name><column-value><![CDATA[");
		sb.append(getVaqcontactphone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantIdNo</column-name><column-value><![CDATA[");
		sb.append(getApplicantIdNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importercontactname</column-name><column-value><![CDATA[");
		sb.append(getImportercontactname());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importercontactphone</column-name><column-value><![CDATA[");
		sb.append(getImportercontactphone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importercontactemail</column-name><column-value><![CDATA[");
		sb.append(getImportercontactemail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importerfax</column-name><column-value><![CDATA[");
		sb.append(getImporterfax());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>soTKHQ</column-name><column-value><![CDATA[");
		sb.append(getSoTKHQ());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ngayTKHQ</column-name><column-value><![CDATA[");
		sb.append(getNgayTKHQ());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maChiCucHQ</column-name><column-value><![CDATA[");
		sb.append(getMaChiCucHQ());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nhanHieu</column-name><column-value><![CDATA[");
		sb.append(getNhanHieu());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tenThuongMai</column-name><column-value><![CDATA[");
		sb.append(getTenThuongMai());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maKieuLoai</column-name><column-value><![CDATA[");
		sb.append(getMaKieuLoai());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>loaiPhuongTien</column-name><column-value><![CDATA[");
		sb.append(getLoaiPhuongTien());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>soKhung</column-name><column-value><![CDATA[");
		sb.append(getSoKhung());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>soDongCo</column-name><column-value><![CDATA[");
		sb.append(getSoDongCo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tinhTrangPhuongTien</column-name><column-value><![CDATA[");
		sb.append(getTinhTrangPhuongTien());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>kyHieuThietKe</column-name><column-value><![CDATA[");
		sb.append(getKyHieuThietKe());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>soGCNThamDinhThietKe</column-name><column-value><![CDATA[");
		sb.append(getSoGCNThamDinhThietKe());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>soGCNPheDuyetKieuLoaiNuocNgoai</column-name><column-value><![CDATA[");
		sb.append(getSoGCNPheDuyetKieuLoaiNuocNgoai());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tenCoSoSanXuat</column-name><column-value><![CDATA[");
		sb.append(getTenCoSoSanXuat());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>diaChiCoSoSanXuat</column-name><column-value><![CDATA[");
		sb.append(getDiaChiCoSoSanXuat());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tenXuongSanXuat</column-name><column-value><![CDATA[");
		sb.append(getTenXuongSanXuat());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>diaChiXuongSanXuat</column-name><column-value><![CDATA[");
		sb.append(getDiaChiXuongSanXuat());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VRCorporationAttendee.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VRCorporationAttendee.class
		};
	private long _id;
	private long _mtCore;
	private Date _createDate;
	private Date _modifyDate;
	private Date _syncDate;
	private String _corporationCode;
	private String _originalCorporationCode;
	private String _corporationName;
	private Date _inspectionDate;
	private Date _originalInspectionDate;
	private String _registerednumber;
	private String _testingRegisteredPlace;
	private String _testingPlaceDistrict;
	private String _testingPlaceCity;
	private String _testingPlaceRegion;
	private String _testingPlaceCountry;
	private String _testingRemarks;
	private long _activityId;
	private long _userId;
	private String _userName;
	private String _activityType;
	private String _activityCatetory;
	private String _originalActivityCatetory;
	private String _categoryName;
	private long _dossierId;
	private long _originalDossierId;
	private boolean _setOriginalDossierId;
	private String _serviceName;
	private String _subject;
	private int _hostingId;
	private String _hosting;
	private int _locationId;
	private String _location;
	private String _geolocation;
	private Date _startDate;
	private Date _endDate;
	private Date _finishDate;
	private String _state;
	private String _stateName;
	private String _stateColor;
	private String _priority;
	private String _overdue;
	private long _managerId;
	private long _originalManagerId;
	private boolean _setOriginalManagerId;
	private String _managerName;
	private long _leaderId;
	private long _originalLeaderId;
	private boolean _setOriginalLeaderId;
	private String _leaderName;
	private String _leaderJobTitle;
	private String _description;
	private String _permission;
	private String _resultNote;
	private String _progress;
	private String _assignType;
	private String _originalAssignType;
	private long _jobPosId;
	private String _jobPosTitle;
	private String _invitation;
	private String _editable;
	private String _vaqcontactname;
	private String _vaqcontactphone;
	private String _applicantIdNo;
	private String _originalApplicantIdNo;
	private String _importercontactname;
	private String _importercontactphone;
	private String _importercontactemail;
	private String _importerfax;
	private String _soTKHQ;
	private String _ngayTKHQ;
	private String _maChiCucHQ;
	private String _nhanHieu;
	private String _tenThuongMai;
	private String _maKieuLoai;
	private String _loaiPhuongTien;
	private String _soKhung;
	private String _soDongCo;
	private String _tinhTrangPhuongTien;
	private String _kyHieuThietKe;
	private String _soGCNThamDinhThietKe;
	private String _soGCNPheDuyetKieuLoaiNuocNgoai;
	private String _tenCoSoSanXuat;
	private String _diaChiCoSoSanXuat;
	private String _tenXuongSanXuat;
	private String _diaChiXuongSanXuat;
	private long _columnBitmask;
	private VRCorporationAttendee _escapedModel;
}