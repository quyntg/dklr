/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.business.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.business.model.VRProductionClassification;
import com.fds.vr.business.model.VRProductionClassificationModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VRProductionClassification service. Represents a row in the &quot;vr_productclassification&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VRProductionClassificationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VRProductionClassificationImpl}.
 * </p>
 *
 * @author LamTV
 * @see VRProductionClassificationImpl
 * @see VRProductionClassification
 * @see VRProductionClassificationModel
 * @generated
 */
@ProviderType
public class VRProductionClassificationModelImpl extends BaseModelImpl<VRProductionClassification>
	implements VRProductionClassificationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vr production classification model instance should use the {@link VRProductionClassification} interface instead.
	 */
	public static final String TABLE_NAME = "vr_productclassification";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "mtCore", Types.BIGINT },
			{ "applicantProfileId", Types.BIGINT },
			{ "applicantCode", Types.VARCHAR },
			{ "productionPlantId", Types.BIGINT },
			{ "productionPlantCode", Types.VARCHAR },
			{ "sequenceNo", Types.INTEGER },
			{ "productClassificationCode", Types.VARCHAR },
			{ "productClassificationDescription", Types.VARCHAR },
			{ "classificationMode", Types.VARCHAR },
			{ "remarks", Types.VARCHAR },
			{ "status", Types.VARCHAR },
			{ "modifyDate", Types.TIMESTAMP },
			{ "syncDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mtCore", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("applicantProfileId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("applicantCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionPlantId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("productionPlantCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sequenceNo", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("productClassificationCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productClassificationDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("classificationMode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("remarks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modifyDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("syncDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table vr_productclassification (id LONG not null primary key,mtCore LONG,applicantProfileId LONG,applicantCode VARCHAR(75) null,productionPlantId LONG,productionPlantCode VARCHAR(75) null,sequenceNo INTEGER,productClassificationCode VARCHAR(75) null,productClassificationDescription VARCHAR(75) null,classificationMode VARCHAR(75) null,remarks VARCHAR(75) null,status VARCHAR(75) null,modifyDate DATE null,syncDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table vr_productclassification";
	public static final String ORDER_BY_JPQL = " ORDER BY vrProductionClassification.modifyDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_productclassification.modifyDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fds.vr.business.model.VRProductionClassification"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fds.vr.business.model.VRProductionClassification"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fds.vr.business.model.VRProductionClassification"),
			true);
	public static final long PRODUCTIONPLANTCODE_COLUMN_BITMASK = 1L;
	public static final long MODIFYDATE_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.fds.vr.service.util.ServiceProps.get(
				"lock.expiration.time.com.fds.vr.business.model.VRProductionClassification"));

	public VRProductionClassificationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VRProductionClassification.class;
	}

	@Override
	public String getModelClassName() {
		return VRProductionClassification.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("mtCore", getMtCore());
		attributes.put("applicantProfileId", getApplicantProfileId());
		attributes.put("applicantCode", getApplicantCode());
		attributes.put("productionPlantId", getProductionPlantId());
		attributes.put("productionPlantCode", getProductionPlantCode());
		attributes.put("sequenceNo", getSequenceNo());
		attributes.put("productClassificationCode",
			getProductClassificationCode());
		attributes.put("productClassificationDescription",
			getProductClassificationDescription());
		attributes.put("classificationMode", getClassificationMode());
		attributes.put("remarks", getRemarks());
		attributes.put("status", getStatus());
		attributes.put("modifyDate", getModifyDate());
		attributes.put("syncDate", getSyncDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long mtCore = (Long)attributes.get("mtCore");

		if (mtCore != null) {
			setMtCore(mtCore);
		}

		Long applicantProfileId = (Long)attributes.get("applicantProfileId");

		if (applicantProfileId != null) {
			setApplicantProfileId(applicantProfileId);
		}

		String applicantCode = (String)attributes.get("applicantCode");

		if (applicantCode != null) {
			setApplicantCode(applicantCode);
		}

		Long productionPlantId = (Long)attributes.get("productionPlantId");

		if (productionPlantId != null) {
			setProductionPlantId(productionPlantId);
		}

		String productionPlantCode = (String)attributes.get(
				"productionPlantCode");

		if (productionPlantCode != null) {
			setProductionPlantCode(productionPlantCode);
		}

		Integer sequenceNo = (Integer)attributes.get("sequenceNo");

		if (sequenceNo != null) {
			setSequenceNo(sequenceNo);
		}

		String productClassificationCode = (String)attributes.get(
				"productClassificationCode");

		if (productClassificationCode != null) {
			setProductClassificationCode(productClassificationCode);
		}

		String productClassificationDescription = (String)attributes.get(
				"productClassificationDescription");

		if (productClassificationDescription != null) {
			setProductClassificationDescription(productClassificationDescription);
		}

		String classificationMode = (String)attributes.get("classificationMode");

		if (classificationMode != null) {
			setClassificationMode(classificationMode);
		}

		String remarks = (String)attributes.get("remarks");

		if (remarks != null) {
			setRemarks(remarks);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Date modifyDate = (Date)attributes.get("modifyDate");

		if (modifyDate != null) {
			setModifyDate(modifyDate);
		}

		Date syncDate = (Date)attributes.get("syncDate");

		if (syncDate != null) {
			setSyncDate(syncDate);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getMtCore() {
		return _mtCore;
	}

	@Override
	public void setMtCore(long mtCore) {
		_mtCore = mtCore;
	}

	@Override
	public long getApplicantProfileId() {
		return _applicantProfileId;
	}

	@Override
	public void setApplicantProfileId(long applicantProfileId) {
		_applicantProfileId = applicantProfileId;
	}

	@Override
	public String getApplicantCode() {
		if (_applicantCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantCode;
		}
	}

	@Override
	public void setApplicantCode(String applicantCode) {
		_applicantCode = applicantCode;
	}

	@Override
	public long getProductionPlantId() {
		return _productionPlantId;
	}

	@Override
	public void setProductionPlantId(long productionPlantId) {
		_productionPlantId = productionPlantId;
	}

	@Override
	public String getProductionPlantCode() {
		if (_productionPlantCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionPlantCode;
		}
	}

	@Override
	public void setProductionPlantCode(String productionPlantCode) {
		_columnBitmask |= PRODUCTIONPLANTCODE_COLUMN_BITMASK;

		if (_originalProductionPlantCode == null) {
			_originalProductionPlantCode = _productionPlantCode;
		}

		_productionPlantCode = productionPlantCode;
	}

	public String getOriginalProductionPlantCode() {
		return GetterUtil.getString(_originalProductionPlantCode);
	}

	@Override
	public int getSequenceNo() {
		return _sequenceNo;
	}

	@Override
	public void setSequenceNo(int sequenceNo) {
		_sequenceNo = sequenceNo;
	}

	@Override
	public String getProductClassificationCode() {
		if (_productClassificationCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _productClassificationCode;
		}
	}

	@Override
	public void setProductClassificationCode(String productClassificationCode) {
		_productClassificationCode = productClassificationCode;
	}

	@Override
	public String getProductClassificationDescription() {
		if (_productClassificationDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _productClassificationDescription;
		}
	}

	@Override
	public void setProductClassificationDescription(
		String productClassificationDescription) {
		_productClassificationDescription = productClassificationDescription;
	}

	@Override
	public String getClassificationMode() {
		if (_classificationMode == null) {
			return StringPool.BLANK;
		}
		else {
			return _classificationMode;
		}
	}

	@Override
	public void setClassificationMode(String classificationMode) {
		_classificationMode = classificationMode;
	}

	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		_remarks = remarks;
	}

	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_status = status;
	}

	@Override
	public Date getModifyDate() {
		return _modifyDate;
	}

	@Override
	public void setModifyDate(Date modifyDate) {
		_columnBitmask = -1L;

		_modifyDate = modifyDate;
	}

	@Override
	public Date getSyncDate() {
		return _syncDate;
	}

	@Override
	public void setSyncDate(Date syncDate) {
		_syncDate = syncDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VRProductionClassification.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VRProductionClassification toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VRProductionClassification)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VRProductionClassificationImpl vrProductionClassificationImpl = new VRProductionClassificationImpl();

		vrProductionClassificationImpl.setId(getId());
		vrProductionClassificationImpl.setMtCore(getMtCore());
		vrProductionClassificationImpl.setApplicantProfileId(getApplicantProfileId());
		vrProductionClassificationImpl.setApplicantCode(getApplicantCode());
		vrProductionClassificationImpl.setProductionPlantId(getProductionPlantId());
		vrProductionClassificationImpl.setProductionPlantCode(getProductionPlantCode());
		vrProductionClassificationImpl.setSequenceNo(getSequenceNo());
		vrProductionClassificationImpl.setProductClassificationCode(getProductClassificationCode());
		vrProductionClassificationImpl.setProductClassificationDescription(getProductClassificationDescription());
		vrProductionClassificationImpl.setClassificationMode(getClassificationMode());
		vrProductionClassificationImpl.setRemarks(getRemarks());
		vrProductionClassificationImpl.setStatus(getStatus());
		vrProductionClassificationImpl.setModifyDate(getModifyDate());
		vrProductionClassificationImpl.setSyncDate(getSyncDate());

		vrProductionClassificationImpl.resetOriginalValues();

		return vrProductionClassificationImpl;
	}

	@Override
	public int compareTo(VRProductionClassification vrProductionClassification) {
		int value = 0;

		value = DateUtil.compareTo(getModifyDate(),
				vrProductionClassification.getModifyDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VRProductionClassification)) {
			return false;
		}

		VRProductionClassification vrProductionClassification = (VRProductionClassification)obj;

		long primaryKey = vrProductionClassification.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VRProductionClassificationModelImpl vrProductionClassificationModelImpl = this;

		vrProductionClassificationModelImpl._originalProductionPlantCode = vrProductionClassificationModelImpl._productionPlantCode;

		vrProductionClassificationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VRProductionClassification> toCacheModel() {
		VRProductionClassificationCacheModel vrProductionClassificationCacheModel =
			new VRProductionClassificationCacheModel();

		vrProductionClassificationCacheModel.id = getId();

		vrProductionClassificationCacheModel.mtCore = getMtCore();

		vrProductionClassificationCacheModel.applicantProfileId = getApplicantProfileId();

		vrProductionClassificationCacheModel.applicantCode = getApplicantCode();

		String applicantCode = vrProductionClassificationCacheModel.applicantCode;

		if ((applicantCode != null) && (applicantCode.length() == 0)) {
			vrProductionClassificationCacheModel.applicantCode = null;
		}

		vrProductionClassificationCacheModel.productionPlantId = getProductionPlantId();

		vrProductionClassificationCacheModel.productionPlantCode = getProductionPlantCode();

		String productionPlantCode = vrProductionClassificationCacheModel.productionPlantCode;

		if ((productionPlantCode != null) &&
				(productionPlantCode.length() == 0)) {
			vrProductionClassificationCacheModel.productionPlantCode = null;
		}

		vrProductionClassificationCacheModel.sequenceNo = getSequenceNo();

		vrProductionClassificationCacheModel.productClassificationCode = getProductClassificationCode();

		String productClassificationCode = vrProductionClassificationCacheModel.productClassificationCode;

		if ((productClassificationCode != null) &&
				(productClassificationCode.length() == 0)) {
			vrProductionClassificationCacheModel.productClassificationCode = null;
		}

		vrProductionClassificationCacheModel.productClassificationDescription = getProductClassificationDescription();

		String productClassificationDescription = vrProductionClassificationCacheModel.productClassificationDescription;

		if ((productClassificationDescription != null) &&
				(productClassificationDescription.length() == 0)) {
			vrProductionClassificationCacheModel.productClassificationDescription = null;
		}

		vrProductionClassificationCacheModel.classificationMode = getClassificationMode();

		String classificationMode = vrProductionClassificationCacheModel.classificationMode;

		if ((classificationMode != null) && (classificationMode.length() == 0)) {
			vrProductionClassificationCacheModel.classificationMode = null;
		}

		vrProductionClassificationCacheModel.remarks = getRemarks();

		String remarks = vrProductionClassificationCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			vrProductionClassificationCacheModel.remarks = null;
		}

		vrProductionClassificationCacheModel.status = getStatus();

		String status = vrProductionClassificationCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			vrProductionClassificationCacheModel.status = null;
		}

		Date modifyDate = getModifyDate();

		if (modifyDate != null) {
			vrProductionClassificationCacheModel.modifyDate = modifyDate.getTime();
		}
		else {
			vrProductionClassificationCacheModel.modifyDate = Long.MIN_VALUE;
		}

		Date syncDate = getSyncDate();

		if (syncDate != null) {
			vrProductionClassificationCacheModel.syncDate = syncDate.getTime();
		}
		else {
			vrProductionClassificationCacheModel.syncDate = Long.MIN_VALUE;
		}

		return vrProductionClassificationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", mtCore=");
		sb.append(getMtCore());
		sb.append(", applicantProfileId=");
		sb.append(getApplicantProfileId());
		sb.append(", applicantCode=");
		sb.append(getApplicantCode());
		sb.append(", productionPlantId=");
		sb.append(getProductionPlantId());
		sb.append(", productionPlantCode=");
		sb.append(getProductionPlantCode());
		sb.append(", sequenceNo=");
		sb.append(getSequenceNo());
		sb.append(", productClassificationCode=");
		sb.append(getProductClassificationCode());
		sb.append(", productClassificationDescription=");
		sb.append(getProductClassificationDescription());
		sb.append(", classificationMode=");
		sb.append(getClassificationMode());
		sb.append(", remarks=");
		sb.append(getRemarks());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", modifyDate=");
		sb.append(getModifyDate());
		sb.append(", syncDate=");
		sb.append(getSyncDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.fds.vr.business.model.VRProductionClassification");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mtCore</column-name><column-value><![CDATA[");
		sb.append(getMtCore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantProfileId</column-name><column-value><![CDATA[");
		sb.append(getApplicantProfileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantCode</column-name><column-value><![CDATA[");
		sb.append(getApplicantCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantId</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantCode</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sequenceNo</column-name><column-value><![CDATA[");
		sb.append(getSequenceNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productClassificationCode</column-name><column-value><![CDATA[");
		sb.append(getProductClassificationCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productClassificationDescription</column-name><column-value><![CDATA[");
		sb.append(getProductClassificationDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classificationMode</column-name><column-value><![CDATA[");
		sb.append(getClassificationMode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remarks</column-name><column-value><![CDATA[");
		sb.append(getRemarks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifyDate</column-name><column-value><![CDATA[");
		sb.append(getModifyDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncDate</column-name><column-value><![CDATA[");
		sb.append(getSyncDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VRProductionClassification.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VRProductionClassification.class
		};
	private long _id;
	private long _mtCore;
	private long _applicantProfileId;
	private String _applicantCode;
	private long _productionPlantId;
	private String _productionPlantCode;
	private String _originalProductionPlantCode;
	private int _sequenceNo;
	private String _productClassificationCode;
	private String _productClassificationDescription;
	private String _classificationMode;
	private String _remarks;
	private String _status;
	private Date _modifyDate;
	private Date _syncDate;
	private long _columnBitmask;
	private VRProductionClassification _escapedModel;
}