/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.business.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.business.model.VRVehicleTypeCertificate;
import com.fds.vr.business.model.VRVehicleTypeCertificateModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VRVehicleTypeCertificate service. Represents a row in the &quot;vr_vehicletypecertificate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VRVehicleTypeCertificateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VRVehicleTypeCertificateImpl}.
 * </p>
 *
 * @author LamTV
 * @see VRVehicleTypeCertificateImpl
 * @see VRVehicleTypeCertificate
 * @see VRVehicleTypeCertificateModel
 * @generated
 */
@ProviderType
public class VRVehicleTypeCertificateModelImpl extends BaseModelImpl<VRVehicleTypeCertificate>
	implements VRVehicleTypeCertificateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vr vehicle type certificate model instance should use the {@link VRVehicleTypeCertificate} interface instead.
	 */
	public static final String TABLE_NAME = "vr_vehicletypecertificate";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "mtCore", Types.BIGINT },
			{ "dossierId", Types.BIGINT },
			{ "dossierIdCTN", Types.VARCHAR },
			{ "dossierType", Types.VARCHAR },
			{ "dossierNo", Types.VARCHAR },
			{ "referenceUid", Types.VARCHAR },
			{ "serviceCode", Types.VARCHAR },
			{ "serviceName", Types.VARCHAR },
			{ "convertassembleId", Types.BIGINT },
			{ "applicantIdNo", Types.VARCHAR },
			{ "applicantTelNo", Types.VARCHAR },
			{ "applicantName", Types.VARCHAR },
			{ "applicantIdDate", Types.TIMESTAMP },
			{ "applicantAddress", Types.VARCHAR },
			{ "applicantRepresentative", Types.VARCHAR },
			{ "applicantRepresentativeTitle", Types.VARCHAR },
			{ "applicantEmail", Types.VARCHAR },
			{ "applicantPhone", Types.VARCHAR },
			{ "applicantFax", Types.VARCHAR },
			{ "applicantContactName", Types.VARCHAR },
			{ "applicantContactEmail", Types.VARCHAR },
			{ "applicantcontactPhone", Types.VARCHAR },
			{ "applicantcontactTelNo", Types.VARCHAR },
			{ "cityCode", Types.VARCHAR },
			{ "cityName", Types.VARCHAR },
			{ "districtCode", Types.VARCHAR },
			{ "districtName", Types.VARCHAR },
			{ "wardCode", Types.VARCHAR },
			{ "wardName", Types.VARCHAR },
			{ "manufacturerForeignCode", Types.VARCHAR },
			{ "manufacturerName", Types.VARCHAR },
			{ "manufacturerAddress", Types.VARCHAR },
			{ "manufacturerRepresentative", Types.VARCHAR },
			{ "manufacturerRepresentativeTitle", Types.VARCHAR },
			{ "manufacturerEmail", Types.VARCHAR },
			{ "manufacturerPhone", Types.VARCHAR },
			{ "manufacturerFax", Types.VARCHAR },
			{ "productionPlantCode", Types.VARCHAR },
			{ "productionPlantName", Types.VARCHAR },
			{ "productionPlantAddress", Types.VARCHAR },
			{ "productionPlantRepresentative", Types.VARCHAR },
			{ "productionPlantRepresentativeTitle", Types.VARCHAR },
			{ "copReportNo", Types.VARCHAR },
			{ "copReportDate", Types.TIMESTAMP },
			{ "copReportExpireDate", Types.TIMESTAMP },
			{ "designerCode", Types.VARCHAR },
			{ "designerName", Types.VARCHAR },
			{ "designerAddress", Types.VARCHAR },
			{ "designerRepresentative", Types.VARCHAR },
			{ "designerRepresentativeTitle", Types.VARCHAR },
			{ "designerEmail", Types.VARCHAR },
			{ "designerPhone", Types.VARCHAR },
			{ "designerFax", Types.VARCHAR },
			{ "verificationCertificateNo", Types.VARCHAR },
			{ "verificationCertificateDate", Types.TIMESTAMP },
			{ "verificationRefNo", Types.VARCHAR },
			{ "verificationRefDate", Types.TIMESTAMP },
			{ "typeApprovalCertificateNo", Types.VARCHAR },
			{ "typeApprovalCertificateDate", Types.TIMESTAMP },
			{ "designModelCode", Types.VARCHAR },
			{ "designModelDescription", Types.VARCHAR },
			{ "designSymbol", Types.VARCHAR },
			{ "registeredNumber", Types.VARCHAR },
			{ "inspectorReceiveDate", Types.TIMESTAMP },
			{ "inspectorSubmitDate", Types.TIMESTAMP },
			{ "inspectorendorSementDate", Types.TIMESTAMP },
			{ "inspectorDeadline", Types.TIMESTAMP },
			{ "inspectorFinishDate", Types.TIMESTAMP },
			{ "inspectorCancelDate", Types.TIMESTAMP },
			{ "inspectorOrganization", Types.VARCHAR },
			{ "inspectorDivision", Types.VARCHAR },
			{ "inspectorSignName", Types.VARCHAR },
			{ "inspectorSignTitle", Types.VARCHAR },
			{ "inspectorSignPlace", Types.VARCHAR },
			{ "certificateType", Types.VARCHAR },
			{ "referenceCertificateNo", Types.VARCHAR },
			{ "referenceCertificateDate", Types.TIMESTAMP },
			{ "certificateRecordNo", Types.VARCHAR },
			{ "certificateSignName", Types.VARCHAR },
			{ "certificateSignTitle", Types.VARCHAR },
			{ "certificateSignPlace", Types.VARCHAR },
			{ "certificateRecordDate", Types.TIMESTAMP },
			{ "certificateRecordExpireDate", Types.TIMESTAMP },
			{ "expiredStatus", Types.VARCHAR },
			{ "certificateRecordStatus", Types.VARCHAR },
			{ "digitalIssueStatus", Types.VARCHAR },
			{ "vehicleClass", Types.VARCHAR },
			{ "certifiedVehicleType", Types.VARCHAR },
			{ "certifiedVehicleTypeDescription", Types.VARCHAR },
			{ "certifiedTrademark", Types.VARCHAR },
			{ "certifiedTrademarkName", Types.VARCHAR },
			{ "certifiedCommercialName", Types.VARCHAR },
			{ "certifiedModelCode", Types.VARCHAR },
			{ "certifiedAssemblyType", Types.VARCHAR },
			{ "certifiedAssemblyTypeDescription", Types.VARCHAR },
			{ "certifiedVINNo", Types.VARCHAR },
			{ "certifiedVINPosition", Types.VARCHAR },
			{ "certifiedFrameNo", Types.VARCHAR },
			{ "certifiedFrameAttachPlace", Types.VARCHAR },
			{ "certifiedFramePosition", Types.VARCHAR },
			{ "certifiedEngineNo", Types.VARCHAR },
			{ "certifiedEngineAttachPlace", Types.VARCHAR },
			{ "certifiedEnginePosition", Types.VARCHAR },
			{ "safetyTestReportNo", Types.VARCHAR },
			{ "safetyTestReportDate", Types.TIMESTAMP },
			{ "emissionTestReportNo", Types.VARCHAR },
			{ "emissionTestReportDate", Types.TIMESTAMP },
			{ "commonSafetyStandard", Types.VARCHAR },
			{ "commonSafetyDescription", Types.VARCHAR },
			{ "emissionStandard", Types.VARCHAR },
			{ "emissionDescription", Types.VARCHAR },
			{ "otherTestReportNo", Types.VARCHAR },
			{ "otherTestReportDate", Types.TIMESTAMP },
			{ "sampleFrameNo", Types.VARCHAR },
			{ "sampleVINNo", Types.VARCHAR },
			{ "sampleEngineNo", Types.VARCHAR },
			{ "sampleVehicleType", Types.VARCHAR },
			{ "sampleVehicleTypeDescription", Types.VARCHAR },
			{ "sampleTrademark", Types.VARCHAR },
			{ "sampleTrademarkName", Types.VARCHAR },
			{ "sampleCommercialName", Types.VARCHAR },
			{ "sampleModelCode", Types.VARCHAR },
			{ "customsDeclarationNo", Types.VARCHAR },
			{ "customsDeclarationDate", Types.TIMESTAMP },
			{ "productionCountry", Types.VARCHAR },
			{ "importerQuantity", Types.BIGINT },
			{ "inspectionRecordNo", Types.VARCHAR },
			{ "inspectionDate", Types.TIMESTAMP },
			{ "inspectionSite", Types.VARCHAR },
			{ "inspectionDistrictCode", Types.VARCHAR },
			{ "inspectionDistrictName", Types.VARCHAR },
			{ "inspectionProvinceCode", Types.VARCHAR },
			{ "inspectionProvinceName", Types.VARCHAR },
			{ "corporationId", Types.VARCHAR },
			{ "inspectorId", Types.BIGINT },
			{ "remarks", Types.VARCHAR },
			{ "inspectionNote", Types.VARCHAR },
			{ "certificateNote", Types.VARCHAR },
			{ "deliverableCode", Types.VARCHAR },
			{ "deliverableFileEntryid", Types.BIGINT },
			{ "module", Types.VARCHAR },
			{ "modifyDate", Types.TIMESTAMP },
			{ "syncDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mtCore", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dossierId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dossierIdCTN", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dossierType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dossierNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("referenceUid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("serviceCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("serviceName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("convertassembleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("applicantIdNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantTelNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantIdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("applicantAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantRepresentative", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantRepresentativeTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantPhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantFax", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantContactName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantContactEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantcontactPhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantcontactTelNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cityCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cityName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("districtCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("districtName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("wardCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("wardName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufacturerForeignCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufacturerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufacturerAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufacturerRepresentative", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufacturerRepresentativeTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufacturerEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufacturerPhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufacturerFax", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionPlantCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionPlantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionPlantAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionPlantRepresentative", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionPlantRepresentativeTitle",
			Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("copReportExpireDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("designerCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("designerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("designerAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("designerRepresentative", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("designerRepresentativeTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("designerEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("designerPhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("designerFax", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("verificationCertificateNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("verificationCertificateDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("verificationRefNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("verificationRefDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("typeApprovalCertificateNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typeApprovalCertificateDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("designModelCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("designModelDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("designSymbol", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("registeredNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectorReceiveDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("inspectorSubmitDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("inspectorendorSementDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("inspectorDeadline", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("inspectorFinishDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("inspectorCancelDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("inspectorOrganization", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectorDivision", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectorSignName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectorSignTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectorSignPlace", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certificateType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("referenceCertificateNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("referenceCertificateDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("certificateRecordNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certificateSignName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certificateSignTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certificateSignPlace", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certificateRecordDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("certificateRecordExpireDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("expiredStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certificateRecordStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("digitalIssueStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("vehicleClass", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certifiedVehicleType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certifiedVehicleTypeDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certifiedTrademark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certifiedTrademarkName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certifiedCommercialName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certifiedModelCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certifiedAssemblyType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certifiedAssemblyTypeDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certifiedVINNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certifiedVINPosition", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certifiedFrameNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certifiedFrameAttachPlace", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certifiedFramePosition", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certifiedEngineNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certifiedEngineAttachPlace", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certifiedEnginePosition", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("safetyTestReportNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("safetyTestReportDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("emissionTestReportNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emissionTestReportDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("commonSafetyStandard", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("commonSafetyDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emissionStandard", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emissionDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherTestReportNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherTestReportDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("sampleFrameNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sampleVINNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sampleEngineNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sampleVehicleType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sampleVehicleTypeDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sampleTrademark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sampleTrademarkName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sampleCommercialName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sampleModelCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("customsDeclarationNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("customsDeclarationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("productionCountry", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("importerQuantity", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("inspectionRecordNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectionDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("inspectionSite", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectionDistrictCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectionDistrictName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectionProvinceCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectionProvinceName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("corporationId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectorId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("remarks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectionNote", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certificateNote", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deliverableCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deliverableFileEntryid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("module", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modifyDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("syncDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table vr_vehicletypecertificate (id LONG not null primary key,mtCore LONG,dossierId LONG,dossierIdCTN VARCHAR(75) null,dossierType VARCHAR(75) null,dossierNo VARCHAR(75) null,referenceUid VARCHAR(75) null,serviceCode VARCHAR(75) null,serviceName VARCHAR(75) null,convertassembleId LONG,applicantIdNo VARCHAR(75) null,applicantTelNo VARCHAR(75) null,applicantName VARCHAR(75) null,applicantIdDate DATE null,applicantAddress VARCHAR(75) null,applicantRepresentative VARCHAR(75) null,applicantRepresentativeTitle VARCHAR(75) null,applicantEmail VARCHAR(75) null,applicantPhone VARCHAR(75) null,applicantFax VARCHAR(75) null,applicantContactName VARCHAR(75) null,applicantContactEmail VARCHAR(75) null,applicantcontactPhone VARCHAR(75) null,applicantcontactTelNo VARCHAR(75) null,cityCode VARCHAR(75) null,cityName VARCHAR(75) null,districtCode VARCHAR(75) null,districtName VARCHAR(75) null,wardCode VARCHAR(75) null,wardName VARCHAR(75) null,manufacturerForeignCode VARCHAR(75) null,manufacturerName VARCHAR(75) null,manufacturerAddress VARCHAR(75) null,manufacturerRepresentative VARCHAR(75) null,manufacturerRepresentativeTitle VARCHAR(75) null,manufacturerEmail VARCHAR(75) null,manufacturerPhone VARCHAR(75) null,manufacturerFax VARCHAR(75) null,productionPlantCode VARCHAR(75) null,productionPlantName VARCHAR(75) null,productionPlantAddress VARCHAR(75) null,productionPlantRepresentative VARCHAR(75) null,productionPlantRepresentativeTitle VARCHAR(75) null,copReportNo VARCHAR(75) null,copReportDate DATE null,copReportExpireDate DATE null,designerCode VARCHAR(75) null,designerName VARCHAR(75) null,designerAddress VARCHAR(75) null,designerRepresentative VARCHAR(75) null,designerRepresentativeTitle VARCHAR(75) null,designerEmail VARCHAR(75) null,designerPhone VARCHAR(75) null,designerFax VARCHAR(75) null,verificationCertificateNo VARCHAR(75) null,verificationCertificateDate DATE null,verificationRefNo VARCHAR(75) null,verificationRefDate DATE null,typeApprovalCertificateNo VARCHAR(75) null,typeApprovalCertificateDate DATE null,designModelCode VARCHAR(75) null,designModelDescription VARCHAR(75) null,designSymbol VARCHAR(75) null,registeredNumber VARCHAR(75) null,inspectorReceiveDate DATE null,inspectorSubmitDate DATE null,inspectorendorSementDate DATE null,inspectorDeadline DATE null,inspectorFinishDate DATE null,inspectorCancelDate DATE null,inspectorOrganization VARCHAR(75) null,inspectorDivision VARCHAR(75) null,inspectorSignName VARCHAR(75) null,inspectorSignTitle VARCHAR(75) null,inspectorSignPlace VARCHAR(75) null,certificateType VARCHAR(75) null,referenceCertificateNo VARCHAR(75) null,referenceCertificateDate DATE null,certificateRecordNo VARCHAR(75) null,certificateSignName VARCHAR(75) null,certificateSignTitle VARCHAR(75) null,certificateSignPlace VARCHAR(75) null,certificateRecordDate DATE null,certificateRecordExpireDate DATE null,expiredStatus VARCHAR(75) null,certificateRecordStatus VARCHAR(75) null,digitalIssueStatus VARCHAR(75) null,vehicleClass VARCHAR(75) null,certifiedVehicleType VARCHAR(75) null,certifiedVehicleTypeDescription VARCHAR(75) null,certifiedTrademark VARCHAR(75) null,certifiedTrademarkName VARCHAR(75) null,certifiedCommercialName VARCHAR(75) null,certifiedModelCode VARCHAR(75) null,certifiedAssemblyType VARCHAR(75) null,certifiedAssemblyTypeDescription VARCHAR(75) null,certifiedVINNo VARCHAR(75) null,certifiedVINPosition VARCHAR(75) null,certifiedFrameNo VARCHAR(75) null,certifiedFrameAttachPlace VARCHAR(75) null,certifiedFramePosition VARCHAR(75) null,certifiedEngineNo VARCHAR(75) null,certifiedEngineAttachPlace VARCHAR(75) null,certifiedEnginePosition VARCHAR(75) null,safetyTestReportNo VARCHAR(75) null,safetyTestReportDate DATE null,emissionTestReportNo VARCHAR(75) null,emissionTestReportDate DATE null,commonSafetyStandard VARCHAR(75) null,commonSafetyDescription VARCHAR(75) null,emissionStandard VARCHAR(75) null,emissionDescription VARCHAR(75) null,otherTestReportNo VARCHAR(75) null,otherTestReportDate DATE null,sampleFrameNo VARCHAR(75) null,sampleVINNo VARCHAR(75) null,sampleEngineNo VARCHAR(75) null,sampleVehicleType VARCHAR(75) null,sampleVehicleTypeDescription VARCHAR(75) null,sampleTrademark VARCHAR(75) null,sampleTrademarkName VARCHAR(75) null,sampleCommercialName VARCHAR(75) null,sampleModelCode VARCHAR(75) null,customsDeclarationNo VARCHAR(75) null,customsDeclarationDate DATE null,productionCountry VARCHAR(75) null,importerQuantity LONG,inspectionRecordNo VARCHAR(75) null,inspectionDate DATE null,inspectionSite VARCHAR(75) null,inspectionDistrictCode VARCHAR(75) null,inspectionDistrictName VARCHAR(75) null,inspectionProvinceCode VARCHAR(75) null,inspectionProvinceName VARCHAR(75) null,corporationId VARCHAR(75) null,inspectorId LONG,remarks VARCHAR(75) null,inspectionNote VARCHAR(75) null,certificateNote VARCHAR(75) null,deliverableCode VARCHAR(75) null,deliverableFileEntryid LONG,module VARCHAR(75) null,modifyDate DATE null,syncDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table vr_vehicletypecertificate";
	public static final String ORDER_BY_JPQL = " ORDER BY vrVehicleTypeCertificate.modifyDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_vehicletypecertificate.modifyDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fds.vr.business.model.VRVehicleTypeCertificate"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fds.vr.business.model.VRVehicleTypeCertificate"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fds.vr.business.model.VRVehicleTypeCertificate"),
			true);
	public static final long APPLICANTIDNO_COLUMN_BITMASK = 1L;
	public static final long CERTIFICATERECORDNO_COLUMN_BITMASK = 2L;
	public static final long CERTIFIEDCOMMERCIALNAME_COLUMN_BITMASK = 4L;
	public static final long CERTIFIEDMODELCODE_COLUMN_BITMASK = 8L;
	public static final long CERTIFIEDTRADEMARKNAME_COLUMN_BITMASK = 16L;
	public static final long CERTIFIEDVEHICLETYPE_COLUMN_BITMASK = 32L;
	public static final long COMMONSAFETYSTANDARD_COLUMN_BITMASK = 64L;
	public static final long COPREPORTNO_COLUMN_BITMASK = 128L;
	public static final long CORPORATIONID_COLUMN_BITMASK = 256L;
	public static final long DELIVERABLECODE_COLUMN_BITMASK = 512L;
	public static final long DESIGNSYMBOL_COLUMN_BITMASK = 1024L;
	public static final long DESIGNERCODE_COLUMN_BITMASK = 2048L;
	public static final long DOSSIERID_COLUMN_BITMASK = 4096L;
	public static final long DOSSIERNO_COLUMN_BITMASK = 8192L;
	public static final long EMISSIONSTANDARD_COLUMN_BITMASK = 16384L;
	public static final long EXPIREDSTATUS_COLUMN_BITMASK = 32768L;
	public static final long INSPECTIONRECORDNO_COLUMN_BITMASK = 65536L;
	public static final long INSPECTORID_COLUMN_BITMASK = 131072L;
	public static final long MANUFACTURERFOREIGNCODE_COLUMN_BITMASK = 262144L;
	public static final long MTCORE_COLUMN_BITMASK = 524288L;
	public static final long PRODUCTIONPLANTADDRESS_COLUMN_BITMASK = 1048576L;
	public static final long PRODUCTIONPLANTCODE_COLUMN_BITMASK = 2097152L;
	public static final long PRODUCTIONPLANTNAME_COLUMN_BITMASK = 4194304L;
	public static final long SERVICECODE_COLUMN_BITMASK = 8388608L;
	public static final long VEHICLECLASS_COLUMN_BITMASK = 16777216L;
	public static final long VERIFICATIONCERTIFICATENO_COLUMN_BITMASK = 33554432L;
	public static final long MODIFYDATE_COLUMN_BITMASK = 67108864L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.fds.vr.service.util.ServiceProps.get(
				"lock.expiration.time.com.fds.vr.business.model.VRVehicleTypeCertificate"));

	public VRVehicleTypeCertificateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VRVehicleTypeCertificate.class;
	}

	@Override
	public String getModelClassName() {
		return VRVehicleTypeCertificate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("mtCore", getMtCore());
		attributes.put("dossierId", getDossierId());
		attributes.put("dossierIdCTN", getDossierIdCTN());
		attributes.put("dossierType", getDossierType());
		attributes.put("dossierNo", getDossierNo());
		attributes.put("referenceUid", getReferenceUid());
		attributes.put("serviceCode", getServiceCode());
		attributes.put("serviceName", getServiceName());
		attributes.put("convertassembleId", getConvertassembleId());
		attributes.put("applicantIdNo", getApplicantIdNo());
		attributes.put("applicantTelNo", getApplicantTelNo());
		attributes.put("applicantName", getApplicantName());
		attributes.put("applicantIdDate", getApplicantIdDate());
		attributes.put("applicantAddress", getApplicantAddress());
		attributes.put("applicantRepresentative", getApplicantRepresentative());
		attributes.put("applicantRepresentativeTitle",
			getApplicantRepresentativeTitle());
		attributes.put("applicantEmail", getApplicantEmail());
		attributes.put("applicantPhone", getApplicantPhone());
		attributes.put("applicantFax", getApplicantFax());
		attributes.put("applicantContactName", getApplicantContactName());
		attributes.put("applicantContactEmail", getApplicantContactEmail());
		attributes.put("applicantcontactPhone", getApplicantcontactPhone());
		attributes.put("applicantcontactTelNo", getApplicantcontactTelNo());
		attributes.put("cityCode", getCityCode());
		attributes.put("cityName", getCityName());
		attributes.put("districtCode", getDistrictCode());
		attributes.put("districtName", getDistrictName());
		attributes.put("wardCode", getWardCode());
		attributes.put("wardName", getWardName());
		attributes.put("manufacturerForeignCode", getManufacturerForeignCode());
		attributes.put("manufacturerName", getManufacturerName());
		attributes.put("manufacturerAddress", getManufacturerAddress());
		attributes.put("manufacturerRepresentative",
			getManufacturerRepresentative());
		attributes.put("manufacturerRepresentativeTitle",
			getManufacturerRepresentativeTitle());
		attributes.put("manufacturerEmail", getManufacturerEmail());
		attributes.put("manufacturerPhone", getManufacturerPhone());
		attributes.put("manufacturerFax", getManufacturerFax());
		attributes.put("productionPlantCode", getProductionPlantCode());
		attributes.put("productionPlantName", getProductionPlantName());
		attributes.put("productionPlantAddress", getProductionPlantAddress());
		attributes.put("productionPlantRepresentative",
			getProductionPlantRepresentative());
		attributes.put("productionPlantRepresentativeTitle",
			getProductionPlantRepresentativeTitle());
		attributes.put("copReportNo", getCopReportNo());
		attributes.put("copReportDate", getCopReportDate());
		attributes.put("copReportExpireDate", getCopReportExpireDate());
		attributes.put("designerCode", getDesignerCode());
		attributes.put("designerName", getDesignerName());
		attributes.put("designerAddress", getDesignerAddress());
		attributes.put("designerRepresentative", getDesignerRepresentative());
		attributes.put("designerRepresentativeTitle",
			getDesignerRepresentativeTitle());
		attributes.put("designerEmail", getDesignerEmail());
		attributes.put("designerPhone", getDesignerPhone());
		attributes.put("designerFax", getDesignerFax());
		attributes.put("verificationCertificateNo",
			getVerificationCertificateNo());
		attributes.put("verificationCertificateDate",
			getVerificationCertificateDate());
		attributes.put("verificationRefNo", getVerificationRefNo());
		attributes.put("verificationRefDate", getVerificationRefDate());
		attributes.put("typeApprovalCertificateNo",
			getTypeApprovalCertificateNo());
		attributes.put("typeApprovalCertificateDate",
			getTypeApprovalCertificateDate());
		attributes.put("designModelCode", getDesignModelCode());
		attributes.put("designModelDescription", getDesignModelDescription());
		attributes.put("designSymbol", getDesignSymbol());
		attributes.put("registeredNumber", getRegisteredNumber());
		attributes.put("inspectorReceiveDate", getInspectorReceiveDate());
		attributes.put("inspectorSubmitDate", getInspectorSubmitDate());
		attributes.put("inspectorendorSementDate", getInspectorendorSementDate());
		attributes.put("inspectorDeadline", getInspectorDeadline());
		attributes.put("inspectorFinishDate", getInspectorFinishDate());
		attributes.put("inspectorCancelDate", getInspectorCancelDate());
		attributes.put("inspectorOrganization", getInspectorOrganization());
		attributes.put("inspectorDivision", getInspectorDivision());
		attributes.put("inspectorSignName", getInspectorSignName());
		attributes.put("inspectorSignTitle", getInspectorSignTitle());
		attributes.put("inspectorSignPlace", getInspectorSignPlace());
		attributes.put("certificateType", getCertificateType());
		attributes.put("referenceCertificateNo", getReferenceCertificateNo());
		attributes.put("referenceCertificateDate", getReferenceCertificateDate());
		attributes.put("certificateRecordNo", getCertificateRecordNo());
		attributes.put("certificateSignName", getCertificateSignName());
		attributes.put("certificateSignTitle", getCertificateSignTitle());
		attributes.put("certificateSignPlace", getCertificateSignPlace());
		attributes.put("certificateRecordDate", getCertificateRecordDate());
		attributes.put("certificateRecordExpireDate",
			getCertificateRecordExpireDate());
		attributes.put("expiredStatus", getExpiredStatus());
		attributes.put("certificateRecordStatus", getCertificateRecordStatus());
		attributes.put("digitalIssueStatus", getDigitalIssueStatus());
		attributes.put("vehicleClass", getVehicleClass());
		attributes.put("certifiedVehicleType", getCertifiedVehicleType());
		attributes.put("certifiedVehicleTypeDescription",
			getCertifiedVehicleTypeDescription());
		attributes.put("certifiedTrademark", getCertifiedTrademark());
		attributes.put("certifiedTrademarkName", getCertifiedTrademarkName());
		attributes.put("certifiedCommercialName", getCertifiedCommercialName());
		attributes.put("certifiedModelCode", getCertifiedModelCode());
		attributes.put("certifiedAssemblyType", getCertifiedAssemblyType());
		attributes.put("certifiedAssemblyTypeDescription",
			getCertifiedAssemblyTypeDescription());
		attributes.put("certifiedVINNo", getCertifiedVINNo());
		attributes.put("certifiedVINPosition", getCertifiedVINPosition());
		attributes.put("certifiedFrameNo", getCertifiedFrameNo());
		attributes.put("certifiedFrameAttachPlace",
			getCertifiedFrameAttachPlace());
		attributes.put("certifiedFramePosition", getCertifiedFramePosition());
		attributes.put("certifiedEngineNo", getCertifiedEngineNo());
		attributes.put("certifiedEngineAttachPlace",
			getCertifiedEngineAttachPlace());
		attributes.put("certifiedEnginePosition", getCertifiedEnginePosition());
		attributes.put("safetyTestReportNo", getSafetyTestReportNo());
		attributes.put("safetyTestReportDate", getSafetyTestReportDate());
		attributes.put("emissionTestReportNo", getEmissionTestReportNo());
		attributes.put("emissionTestReportDate", getEmissionTestReportDate());
		attributes.put("commonSafetyStandard", getCommonSafetyStandard());
		attributes.put("commonSafetyDescription", getCommonSafetyDescription());
		attributes.put("emissionStandard", getEmissionStandard());
		attributes.put("emissionDescription", getEmissionDescription());
		attributes.put("otherTestReportNo", getOtherTestReportNo());
		attributes.put("otherTestReportDate", getOtherTestReportDate());
		attributes.put("sampleFrameNo", getSampleFrameNo());
		attributes.put("sampleVINNo", getSampleVINNo());
		attributes.put("sampleEngineNo", getSampleEngineNo());
		attributes.put("sampleVehicleType", getSampleVehicleType());
		attributes.put("sampleVehicleTypeDescription",
			getSampleVehicleTypeDescription());
		attributes.put("sampleTrademark", getSampleTrademark());
		attributes.put("sampleTrademarkName", getSampleTrademarkName());
		attributes.put("sampleCommercialName", getSampleCommercialName());
		attributes.put("sampleModelCode", getSampleModelCode());
		attributes.put("customsDeclarationNo", getCustomsDeclarationNo());
		attributes.put("customsDeclarationDate", getCustomsDeclarationDate());
		attributes.put("productionCountry", getProductionCountry());
		attributes.put("importerQuantity", getImporterQuantity());
		attributes.put("inspectionRecordNo", getInspectionRecordNo());
		attributes.put("inspectionDate", getInspectionDate());
		attributes.put("inspectionSite", getInspectionSite());
		attributes.put("inspectionDistrictCode", getInspectionDistrictCode());
		attributes.put("inspectionDistrictName", getInspectionDistrictName());
		attributes.put("inspectionProvinceCode", getInspectionProvinceCode());
		attributes.put("inspectionProvinceName", getInspectionProvinceName());
		attributes.put("corporationId", getCorporationId());
		attributes.put("inspectorId", getInspectorId());
		attributes.put("remarks", getRemarks());
		attributes.put("inspectionNote", getInspectionNote());
		attributes.put("certificateNote", getCertificateNote());
		attributes.put("deliverableCode", getDeliverableCode());
		attributes.put("deliverableFileEntryid", getDeliverableFileEntryid());
		attributes.put("module", getModule());
		attributes.put("modifyDate", getModifyDate());
		attributes.put("syncDate", getSyncDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long mtCore = (Long)attributes.get("mtCore");

		if (mtCore != null) {
			setMtCore(mtCore);
		}

		Long dossierId = (Long)attributes.get("dossierId");

		if (dossierId != null) {
			setDossierId(dossierId);
		}

		String dossierIdCTN = (String)attributes.get("dossierIdCTN");

		if (dossierIdCTN != null) {
			setDossierIdCTN(dossierIdCTN);
		}

		String dossierType = (String)attributes.get("dossierType");

		if (dossierType != null) {
			setDossierType(dossierType);
		}

		String dossierNo = (String)attributes.get("dossierNo");

		if (dossierNo != null) {
			setDossierNo(dossierNo);
		}

		String referenceUid = (String)attributes.get("referenceUid");

		if (referenceUid != null) {
			setReferenceUid(referenceUid);
		}

		String serviceCode = (String)attributes.get("serviceCode");

		if (serviceCode != null) {
			setServiceCode(serviceCode);
		}

		String serviceName = (String)attributes.get("serviceName");

		if (serviceName != null) {
			setServiceName(serviceName);
		}

		Long convertassembleId = (Long)attributes.get("convertassembleId");

		if (convertassembleId != null) {
			setConvertassembleId(convertassembleId);
		}

		String applicantIdNo = (String)attributes.get("applicantIdNo");

		if (applicantIdNo != null) {
			setApplicantIdNo(applicantIdNo);
		}

		String applicantTelNo = (String)attributes.get("applicantTelNo");

		if (applicantTelNo != null) {
			setApplicantTelNo(applicantTelNo);
		}

		String applicantName = (String)attributes.get("applicantName");

		if (applicantName != null) {
			setApplicantName(applicantName);
		}

		Date applicantIdDate = (Date)attributes.get("applicantIdDate");

		if (applicantIdDate != null) {
			setApplicantIdDate(applicantIdDate);
		}

		String applicantAddress = (String)attributes.get("applicantAddress");

		if (applicantAddress != null) {
			setApplicantAddress(applicantAddress);
		}

		String applicantRepresentative = (String)attributes.get(
				"applicantRepresentative");

		if (applicantRepresentative != null) {
			setApplicantRepresentative(applicantRepresentative);
		}

		String applicantRepresentativeTitle = (String)attributes.get(
				"applicantRepresentativeTitle");

		if (applicantRepresentativeTitle != null) {
			setApplicantRepresentativeTitle(applicantRepresentativeTitle);
		}

		String applicantEmail = (String)attributes.get("applicantEmail");

		if (applicantEmail != null) {
			setApplicantEmail(applicantEmail);
		}

		String applicantPhone = (String)attributes.get("applicantPhone");

		if (applicantPhone != null) {
			setApplicantPhone(applicantPhone);
		}

		String applicantFax = (String)attributes.get("applicantFax");

		if (applicantFax != null) {
			setApplicantFax(applicantFax);
		}

		String applicantContactName = (String)attributes.get(
				"applicantContactName");

		if (applicantContactName != null) {
			setApplicantContactName(applicantContactName);
		}

		String applicantContactEmail = (String)attributes.get(
				"applicantContactEmail");

		if (applicantContactEmail != null) {
			setApplicantContactEmail(applicantContactEmail);
		}

		String applicantcontactPhone = (String)attributes.get(
				"applicantcontactPhone");

		if (applicantcontactPhone != null) {
			setApplicantcontactPhone(applicantcontactPhone);
		}

		String applicantcontactTelNo = (String)attributes.get(
				"applicantcontactTelNo");

		if (applicantcontactTelNo != null) {
			setApplicantcontactTelNo(applicantcontactTelNo);
		}

		String cityCode = (String)attributes.get("cityCode");

		if (cityCode != null) {
			setCityCode(cityCode);
		}

		String cityName = (String)attributes.get("cityName");

		if (cityName != null) {
			setCityName(cityName);
		}

		String districtCode = (String)attributes.get("districtCode");

		if (districtCode != null) {
			setDistrictCode(districtCode);
		}

		String districtName = (String)attributes.get("districtName");

		if (districtName != null) {
			setDistrictName(districtName);
		}

		String wardCode = (String)attributes.get("wardCode");

		if (wardCode != null) {
			setWardCode(wardCode);
		}

		String wardName = (String)attributes.get("wardName");

		if (wardName != null) {
			setWardName(wardName);
		}

		String manufacturerForeignCode = (String)attributes.get(
				"manufacturerForeignCode");

		if (manufacturerForeignCode != null) {
			setManufacturerForeignCode(manufacturerForeignCode);
		}

		String manufacturerName = (String)attributes.get("manufacturerName");

		if (manufacturerName != null) {
			setManufacturerName(manufacturerName);
		}

		String manufacturerAddress = (String)attributes.get(
				"manufacturerAddress");

		if (manufacturerAddress != null) {
			setManufacturerAddress(manufacturerAddress);
		}

		String manufacturerRepresentative = (String)attributes.get(
				"manufacturerRepresentative");

		if (manufacturerRepresentative != null) {
			setManufacturerRepresentative(manufacturerRepresentative);
		}

		String manufacturerRepresentativeTitle = (String)attributes.get(
				"manufacturerRepresentativeTitle");

		if (manufacturerRepresentativeTitle != null) {
			setManufacturerRepresentativeTitle(manufacturerRepresentativeTitle);
		}

		String manufacturerEmail = (String)attributes.get("manufacturerEmail");

		if (manufacturerEmail != null) {
			setManufacturerEmail(manufacturerEmail);
		}

		String manufacturerPhone = (String)attributes.get("manufacturerPhone");

		if (manufacturerPhone != null) {
			setManufacturerPhone(manufacturerPhone);
		}

		String manufacturerFax = (String)attributes.get("manufacturerFax");

		if (manufacturerFax != null) {
			setManufacturerFax(manufacturerFax);
		}

		String productionPlantCode = (String)attributes.get(
				"productionPlantCode");

		if (productionPlantCode != null) {
			setProductionPlantCode(productionPlantCode);
		}

		String productionPlantName = (String)attributes.get(
				"productionPlantName");

		if (productionPlantName != null) {
			setProductionPlantName(productionPlantName);
		}

		String productionPlantAddress = (String)attributes.get(
				"productionPlantAddress");

		if (productionPlantAddress != null) {
			setProductionPlantAddress(productionPlantAddress);
		}

		String productionPlantRepresentative = (String)attributes.get(
				"productionPlantRepresentative");

		if (productionPlantRepresentative != null) {
			setProductionPlantRepresentative(productionPlantRepresentative);
		}

		String productionPlantRepresentativeTitle = (String)attributes.get(
				"productionPlantRepresentativeTitle");

		if (productionPlantRepresentativeTitle != null) {
			setProductionPlantRepresentativeTitle(productionPlantRepresentativeTitle);
		}

		String copReportNo = (String)attributes.get("copReportNo");

		if (copReportNo != null) {
			setCopReportNo(copReportNo);
		}

		Date copReportDate = (Date)attributes.get("copReportDate");

		if (copReportDate != null) {
			setCopReportDate(copReportDate);
		}

		Date copReportExpireDate = (Date)attributes.get("copReportExpireDate");

		if (copReportExpireDate != null) {
			setCopReportExpireDate(copReportExpireDate);
		}

		String designerCode = (String)attributes.get("designerCode");

		if (designerCode != null) {
			setDesignerCode(designerCode);
		}

		String designerName = (String)attributes.get("designerName");

		if (designerName != null) {
			setDesignerName(designerName);
		}

		String designerAddress = (String)attributes.get("designerAddress");

		if (designerAddress != null) {
			setDesignerAddress(designerAddress);
		}

		String designerRepresentative = (String)attributes.get(
				"designerRepresentative");

		if (designerRepresentative != null) {
			setDesignerRepresentative(designerRepresentative);
		}

		String designerRepresentativeTitle = (String)attributes.get(
				"designerRepresentativeTitle");

		if (designerRepresentativeTitle != null) {
			setDesignerRepresentativeTitle(designerRepresentativeTitle);
		}

		String designerEmail = (String)attributes.get("designerEmail");

		if (designerEmail != null) {
			setDesignerEmail(designerEmail);
		}

		String designerPhone = (String)attributes.get("designerPhone");

		if (designerPhone != null) {
			setDesignerPhone(designerPhone);
		}

		String designerFax = (String)attributes.get("designerFax");

		if (designerFax != null) {
			setDesignerFax(designerFax);
		}

		String verificationCertificateNo = (String)attributes.get(
				"verificationCertificateNo");

		if (verificationCertificateNo != null) {
			setVerificationCertificateNo(verificationCertificateNo);
		}

		Date verificationCertificateDate = (Date)attributes.get(
				"verificationCertificateDate");

		if (verificationCertificateDate != null) {
			setVerificationCertificateDate(verificationCertificateDate);
		}

		String verificationRefNo = (String)attributes.get("verificationRefNo");

		if (verificationRefNo != null) {
			setVerificationRefNo(verificationRefNo);
		}

		Date verificationRefDate = (Date)attributes.get("verificationRefDate");

		if (verificationRefDate != null) {
			setVerificationRefDate(verificationRefDate);
		}

		String typeApprovalCertificateNo = (String)attributes.get(
				"typeApprovalCertificateNo");

		if (typeApprovalCertificateNo != null) {
			setTypeApprovalCertificateNo(typeApprovalCertificateNo);
		}

		Date typeApprovalCertificateDate = (Date)attributes.get(
				"typeApprovalCertificateDate");

		if (typeApprovalCertificateDate != null) {
			setTypeApprovalCertificateDate(typeApprovalCertificateDate);
		}

		String designModelCode = (String)attributes.get("designModelCode");

		if (designModelCode != null) {
			setDesignModelCode(designModelCode);
		}

		String designModelDescription = (String)attributes.get(
				"designModelDescription");

		if (designModelDescription != null) {
			setDesignModelDescription(designModelDescription);
		}

		String designSymbol = (String)attributes.get("designSymbol");

		if (designSymbol != null) {
			setDesignSymbol(designSymbol);
		}

		String registeredNumber = (String)attributes.get("registeredNumber");

		if (registeredNumber != null) {
			setRegisteredNumber(registeredNumber);
		}

		Date inspectorReceiveDate = (Date)attributes.get("inspectorReceiveDate");

		if (inspectorReceiveDate != null) {
			setInspectorReceiveDate(inspectorReceiveDate);
		}

		Date inspectorSubmitDate = (Date)attributes.get("inspectorSubmitDate");

		if (inspectorSubmitDate != null) {
			setInspectorSubmitDate(inspectorSubmitDate);
		}

		Date inspectorendorSementDate = (Date)attributes.get(
				"inspectorendorSementDate");

		if (inspectorendorSementDate != null) {
			setInspectorendorSementDate(inspectorendorSementDate);
		}

		Date inspectorDeadline = (Date)attributes.get("inspectorDeadline");

		if (inspectorDeadline != null) {
			setInspectorDeadline(inspectorDeadline);
		}

		Date inspectorFinishDate = (Date)attributes.get("inspectorFinishDate");

		if (inspectorFinishDate != null) {
			setInspectorFinishDate(inspectorFinishDate);
		}

		Date inspectorCancelDate = (Date)attributes.get("inspectorCancelDate");

		if (inspectorCancelDate != null) {
			setInspectorCancelDate(inspectorCancelDate);
		}

		String inspectorOrganization = (String)attributes.get(
				"inspectorOrganization");

		if (inspectorOrganization != null) {
			setInspectorOrganization(inspectorOrganization);
		}

		String inspectorDivision = (String)attributes.get("inspectorDivision");

		if (inspectorDivision != null) {
			setInspectorDivision(inspectorDivision);
		}

		String inspectorSignName = (String)attributes.get("inspectorSignName");

		if (inspectorSignName != null) {
			setInspectorSignName(inspectorSignName);
		}

		String inspectorSignTitle = (String)attributes.get("inspectorSignTitle");

		if (inspectorSignTitle != null) {
			setInspectorSignTitle(inspectorSignTitle);
		}

		String inspectorSignPlace = (String)attributes.get("inspectorSignPlace");

		if (inspectorSignPlace != null) {
			setInspectorSignPlace(inspectorSignPlace);
		}

		String certificateType = (String)attributes.get("certificateType");

		if (certificateType != null) {
			setCertificateType(certificateType);
		}

		String referenceCertificateNo = (String)attributes.get(
				"referenceCertificateNo");

		if (referenceCertificateNo != null) {
			setReferenceCertificateNo(referenceCertificateNo);
		}

		Date referenceCertificateDate = (Date)attributes.get(
				"referenceCertificateDate");

		if (referenceCertificateDate != null) {
			setReferenceCertificateDate(referenceCertificateDate);
		}

		String certificateRecordNo = (String)attributes.get(
				"certificateRecordNo");

		if (certificateRecordNo != null) {
			setCertificateRecordNo(certificateRecordNo);
		}

		String certificateSignName = (String)attributes.get(
				"certificateSignName");

		if (certificateSignName != null) {
			setCertificateSignName(certificateSignName);
		}

		String certificateSignTitle = (String)attributes.get(
				"certificateSignTitle");

		if (certificateSignTitle != null) {
			setCertificateSignTitle(certificateSignTitle);
		}

		String certificateSignPlace = (String)attributes.get(
				"certificateSignPlace");

		if (certificateSignPlace != null) {
			setCertificateSignPlace(certificateSignPlace);
		}

		Date certificateRecordDate = (Date)attributes.get(
				"certificateRecordDate");

		if (certificateRecordDate != null) {
			setCertificateRecordDate(certificateRecordDate);
		}

		Date certificateRecordExpireDate = (Date)attributes.get(
				"certificateRecordExpireDate");

		if (certificateRecordExpireDate != null) {
			setCertificateRecordExpireDate(certificateRecordExpireDate);
		}

		String expiredStatus = (String)attributes.get("expiredStatus");

		if (expiredStatus != null) {
			setExpiredStatus(expiredStatus);
		}

		String certificateRecordStatus = (String)attributes.get(
				"certificateRecordStatus");

		if (certificateRecordStatus != null) {
			setCertificateRecordStatus(certificateRecordStatus);
		}

		String digitalIssueStatus = (String)attributes.get("digitalIssueStatus");

		if (digitalIssueStatus != null) {
			setDigitalIssueStatus(digitalIssueStatus);
		}

		String vehicleClass = (String)attributes.get("vehicleClass");

		if (vehicleClass != null) {
			setVehicleClass(vehicleClass);
		}

		String certifiedVehicleType = (String)attributes.get(
				"certifiedVehicleType");

		if (certifiedVehicleType != null) {
			setCertifiedVehicleType(certifiedVehicleType);
		}

		String certifiedVehicleTypeDescription = (String)attributes.get(
				"certifiedVehicleTypeDescription");

		if (certifiedVehicleTypeDescription != null) {
			setCertifiedVehicleTypeDescription(certifiedVehicleTypeDescription);
		}

		String certifiedTrademark = (String)attributes.get("certifiedTrademark");

		if (certifiedTrademark != null) {
			setCertifiedTrademark(certifiedTrademark);
		}

		String certifiedTrademarkName = (String)attributes.get(
				"certifiedTrademarkName");

		if (certifiedTrademarkName != null) {
			setCertifiedTrademarkName(certifiedTrademarkName);
		}

		String certifiedCommercialName = (String)attributes.get(
				"certifiedCommercialName");

		if (certifiedCommercialName != null) {
			setCertifiedCommercialName(certifiedCommercialName);
		}

		String certifiedModelCode = (String)attributes.get("certifiedModelCode");

		if (certifiedModelCode != null) {
			setCertifiedModelCode(certifiedModelCode);
		}

		String certifiedAssemblyType = (String)attributes.get(
				"certifiedAssemblyType");

		if (certifiedAssemblyType != null) {
			setCertifiedAssemblyType(certifiedAssemblyType);
		}

		String certifiedAssemblyTypeDescription = (String)attributes.get(
				"certifiedAssemblyTypeDescription");

		if (certifiedAssemblyTypeDescription != null) {
			setCertifiedAssemblyTypeDescription(certifiedAssemblyTypeDescription);
		}

		String certifiedVINNo = (String)attributes.get("certifiedVINNo");

		if (certifiedVINNo != null) {
			setCertifiedVINNo(certifiedVINNo);
		}

		String certifiedVINPosition = (String)attributes.get(
				"certifiedVINPosition");

		if (certifiedVINPosition != null) {
			setCertifiedVINPosition(certifiedVINPosition);
		}

		String certifiedFrameNo = (String)attributes.get("certifiedFrameNo");

		if (certifiedFrameNo != null) {
			setCertifiedFrameNo(certifiedFrameNo);
		}

		String certifiedFrameAttachPlace = (String)attributes.get(
				"certifiedFrameAttachPlace");

		if (certifiedFrameAttachPlace != null) {
			setCertifiedFrameAttachPlace(certifiedFrameAttachPlace);
		}

		String certifiedFramePosition = (String)attributes.get(
				"certifiedFramePosition");

		if (certifiedFramePosition != null) {
			setCertifiedFramePosition(certifiedFramePosition);
		}

		String certifiedEngineNo = (String)attributes.get("certifiedEngineNo");

		if (certifiedEngineNo != null) {
			setCertifiedEngineNo(certifiedEngineNo);
		}

		String certifiedEngineAttachPlace = (String)attributes.get(
				"certifiedEngineAttachPlace");

		if (certifiedEngineAttachPlace != null) {
			setCertifiedEngineAttachPlace(certifiedEngineAttachPlace);
		}

		String certifiedEnginePosition = (String)attributes.get(
				"certifiedEnginePosition");

		if (certifiedEnginePosition != null) {
			setCertifiedEnginePosition(certifiedEnginePosition);
		}

		String safetyTestReportNo = (String)attributes.get("safetyTestReportNo");

		if (safetyTestReportNo != null) {
			setSafetyTestReportNo(safetyTestReportNo);
		}

		Date safetyTestReportDate = (Date)attributes.get("safetyTestReportDate");

		if (safetyTestReportDate != null) {
			setSafetyTestReportDate(safetyTestReportDate);
		}

		String emissionTestReportNo = (String)attributes.get(
				"emissionTestReportNo");

		if (emissionTestReportNo != null) {
			setEmissionTestReportNo(emissionTestReportNo);
		}

		Date emissionTestReportDate = (Date)attributes.get(
				"emissionTestReportDate");

		if (emissionTestReportDate != null) {
			setEmissionTestReportDate(emissionTestReportDate);
		}

		String commonSafetyStandard = (String)attributes.get(
				"commonSafetyStandard");

		if (commonSafetyStandard != null) {
			setCommonSafetyStandard(commonSafetyStandard);
		}

		String commonSafetyDescription = (String)attributes.get(
				"commonSafetyDescription");

		if (commonSafetyDescription != null) {
			setCommonSafetyDescription(commonSafetyDescription);
		}

		String emissionStandard = (String)attributes.get("emissionStandard");

		if (emissionStandard != null) {
			setEmissionStandard(emissionStandard);
		}

		String emissionDescription = (String)attributes.get(
				"emissionDescription");

		if (emissionDescription != null) {
			setEmissionDescription(emissionDescription);
		}

		String otherTestReportNo = (String)attributes.get("otherTestReportNo");

		if (otherTestReportNo != null) {
			setOtherTestReportNo(otherTestReportNo);
		}

		Date otherTestReportDate = (Date)attributes.get("otherTestReportDate");

		if (otherTestReportDate != null) {
			setOtherTestReportDate(otherTestReportDate);
		}

		String sampleFrameNo = (String)attributes.get("sampleFrameNo");

		if (sampleFrameNo != null) {
			setSampleFrameNo(sampleFrameNo);
		}

		String sampleVINNo = (String)attributes.get("sampleVINNo");

		if (sampleVINNo != null) {
			setSampleVINNo(sampleVINNo);
		}

		String sampleEngineNo = (String)attributes.get("sampleEngineNo");

		if (sampleEngineNo != null) {
			setSampleEngineNo(sampleEngineNo);
		}

		String sampleVehicleType = (String)attributes.get("sampleVehicleType");

		if (sampleVehicleType != null) {
			setSampleVehicleType(sampleVehicleType);
		}

		String sampleVehicleTypeDescription = (String)attributes.get(
				"sampleVehicleTypeDescription");

		if (sampleVehicleTypeDescription != null) {
			setSampleVehicleTypeDescription(sampleVehicleTypeDescription);
		}

		String sampleTrademark = (String)attributes.get("sampleTrademark");

		if (sampleTrademark != null) {
			setSampleTrademark(sampleTrademark);
		}

		String sampleTrademarkName = (String)attributes.get(
				"sampleTrademarkName");

		if (sampleTrademarkName != null) {
			setSampleTrademarkName(sampleTrademarkName);
		}

		String sampleCommercialName = (String)attributes.get(
				"sampleCommercialName");

		if (sampleCommercialName != null) {
			setSampleCommercialName(sampleCommercialName);
		}

		String sampleModelCode = (String)attributes.get("sampleModelCode");

		if (sampleModelCode != null) {
			setSampleModelCode(sampleModelCode);
		}

		String customsDeclarationNo = (String)attributes.get(
				"customsDeclarationNo");

		if (customsDeclarationNo != null) {
			setCustomsDeclarationNo(customsDeclarationNo);
		}

		Date customsDeclarationDate = (Date)attributes.get(
				"customsDeclarationDate");

		if (customsDeclarationDate != null) {
			setCustomsDeclarationDate(customsDeclarationDate);
		}

		String productionCountry = (String)attributes.get("productionCountry");

		if (productionCountry != null) {
			setProductionCountry(productionCountry);
		}

		Long importerQuantity = (Long)attributes.get("importerQuantity");

		if (importerQuantity != null) {
			setImporterQuantity(importerQuantity);
		}

		String inspectionRecordNo = (String)attributes.get("inspectionRecordNo");

		if (inspectionRecordNo != null) {
			setInspectionRecordNo(inspectionRecordNo);
		}

		Date inspectionDate = (Date)attributes.get("inspectionDate");

		if (inspectionDate != null) {
			setInspectionDate(inspectionDate);
		}

		String inspectionSite = (String)attributes.get("inspectionSite");

		if (inspectionSite != null) {
			setInspectionSite(inspectionSite);
		}

		String inspectionDistrictCode = (String)attributes.get(
				"inspectionDistrictCode");

		if (inspectionDistrictCode != null) {
			setInspectionDistrictCode(inspectionDistrictCode);
		}

		String inspectionDistrictName = (String)attributes.get(
				"inspectionDistrictName");

		if (inspectionDistrictName != null) {
			setInspectionDistrictName(inspectionDistrictName);
		}

		String inspectionProvinceCode = (String)attributes.get(
				"inspectionProvinceCode");

		if (inspectionProvinceCode != null) {
			setInspectionProvinceCode(inspectionProvinceCode);
		}

		String inspectionProvinceName = (String)attributes.get(
				"inspectionProvinceName");

		if (inspectionProvinceName != null) {
			setInspectionProvinceName(inspectionProvinceName);
		}

		String corporationId = (String)attributes.get("corporationId");

		if (corporationId != null) {
			setCorporationId(corporationId);
		}

		Long inspectorId = (Long)attributes.get("inspectorId");

		if (inspectorId != null) {
			setInspectorId(inspectorId);
		}

		String remarks = (String)attributes.get("remarks");

		if (remarks != null) {
			setRemarks(remarks);
		}

		String inspectionNote = (String)attributes.get("inspectionNote");

		if (inspectionNote != null) {
			setInspectionNote(inspectionNote);
		}

		String certificateNote = (String)attributes.get("certificateNote");

		if (certificateNote != null) {
			setCertificateNote(certificateNote);
		}

		String deliverableCode = (String)attributes.get("deliverableCode");

		if (deliverableCode != null) {
			setDeliverableCode(deliverableCode);
		}

		Long deliverableFileEntryid = (Long)attributes.get(
				"deliverableFileEntryid");

		if (deliverableFileEntryid != null) {
			setDeliverableFileEntryid(deliverableFileEntryid);
		}

		String module = (String)attributes.get("module");

		if (module != null) {
			setModule(module);
		}

		Date modifyDate = (Date)attributes.get("modifyDate");

		if (modifyDate != null) {
			setModifyDate(modifyDate);
		}

		Date syncDate = (Date)attributes.get("syncDate");

		if (syncDate != null) {
			setSyncDate(syncDate);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getMtCore() {
		return _mtCore;
	}

	@Override
	public void setMtCore(long mtCore) {
		_columnBitmask |= MTCORE_COLUMN_BITMASK;

		if (!_setOriginalMtCore) {
			_setOriginalMtCore = true;

			_originalMtCore = _mtCore;
		}

		_mtCore = mtCore;
	}

	public long getOriginalMtCore() {
		return _originalMtCore;
	}

	@Override
	public long getDossierId() {
		return _dossierId;
	}

	@Override
	public void setDossierId(long dossierId) {
		_columnBitmask |= DOSSIERID_COLUMN_BITMASK;

		if (!_setOriginalDossierId) {
			_setOriginalDossierId = true;

			_originalDossierId = _dossierId;
		}

		_dossierId = dossierId;
	}

	public long getOriginalDossierId() {
		return _originalDossierId;
	}

	@Override
	public String getDossierIdCTN() {
		if (_dossierIdCTN == null) {
			return StringPool.BLANK;
		}
		else {
			return _dossierIdCTN;
		}
	}

	@Override
	public void setDossierIdCTN(String dossierIdCTN) {
		_dossierIdCTN = dossierIdCTN;
	}

	@Override
	public String getDossierType() {
		if (_dossierType == null) {
			return StringPool.BLANK;
		}
		else {
			return _dossierType;
		}
	}

	@Override
	public void setDossierType(String dossierType) {
		_dossierType = dossierType;
	}

	@Override
	public String getDossierNo() {
		if (_dossierNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _dossierNo;
		}
	}

	@Override
	public void setDossierNo(String dossierNo) {
		_columnBitmask |= DOSSIERNO_COLUMN_BITMASK;

		if (_originalDossierNo == null) {
			_originalDossierNo = _dossierNo;
		}

		_dossierNo = dossierNo;
	}

	public String getOriginalDossierNo() {
		return GetterUtil.getString(_originalDossierNo);
	}

	@Override
	public String getReferenceUid() {
		if (_referenceUid == null) {
			return StringPool.BLANK;
		}
		else {
			return _referenceUid;
		}
	}

	@Override
	public void setReferenceUid(String referenceUid) {
		_referenceUid = referenceUid;
	}

	@Override
	public String getServiceCode() {
		if (_serviceCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _serviceCode;
		}
	}

	@Override
	public void setServiceCode(String serviceCode) {
		_columnBitmask |= SERVICECODE_COLUMN_BITMASK;

		if (_originalServiceCode == null) {
			_originalServiceCode = _serviceCode;
		}

		_serviceCode = serviceCode;
	}

	public String getOriginalServiceCode() {
		return GetterUtil.getString(_originalServiceCode);
	}

	@Override
	public String getServiceName() {
		if (_serviceName == null) {
			return StringPool.BLANK;
		}
		else {
			return _serviceName;
		}
	}

	@Override
	public void setServiceName(String serviceName) {
		_serviceName = serviceName;
	}

	@Override
	public long getConvertassembleId() {
		return _convertassembleId;
	}

	@Override
	public void setConvertassembleId(long convertassembleId) {
		_convertassembleId = convertassembleId;
	}

	@Override
	public String getApplicantIdNo() {
		if (_applicantIdNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantIdNo;
		}
	}

	@Override
	public void setApplicantIdNo(String applicantIdNo) {
		_columnBitmask |= APPLICANTIDNO_COLUMN_BITMASK;

		if (_originalApplicantIdNo == null) {
			_originalApplicantIdNo = _applicantIdNo;
		}

		_applicantIdNo = applicantIdNo;
	}

	public String getOriginalApplicantIdNo() {
		return GetterUtil.getString(_originalApplicantIdNo);
	}

	@Override
	public String getApplicantTelNo() {
		if (_applicantTelNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantTelNo;
		}
	}

	@Override
	public void setApplicantTelNo(String applicantTelNo) {
		_applicantTelNo = applicantTelNo;
	}

	@Override
	public String getApplicantName() {
		if (_applicantName == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantName;
		}
	}

	@Override
	public void setApplicantName(String applicantName) {
		_applicantName = applicantName;
	}

	@Override
	public Date getApplicantIdDate() {
		return _applicantIdDate;
	}

	@Override
	public void setApplicantIdDate(Date applicantIdDate) {
		_applicantIdDate = applicantIdDate;
	}

	@Override
	public String getApplicantAddress() {
		if (_applicantAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantAddress;
		}
	}

	@Override
	public void setApplicantAddress(String applicantAddress) {
		_applicantAddress = applicantAddress;
	}

	@Override
	public String getApplicantRepresentative() {
		if (_applicantRepresentative == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantRepresentative;
		}
	}

	@Override
	public void setApplicantRepresentative(String applicantRepresentative) {
		_applicantRepresentative = applicantRepresentative;
	}

	@Override
	public String getApplicantRepresentativeTitle() {
		if (_applicantRepresentativeTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantRepresentativeTitle;
		}
	}

	@Override
	public void setApplicantRepresentativeTitle(
		String applicantRepresentativeTitle) {
		_applicantRepresentativeTitle = applicantRepresentativeTitle;
	}

	@Override
	public String getApplicantEmail() {
		if (_applicantEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantEmail;
		}
	}

	@Override
	public void setApplicantEmail(String applicantEmail) {
		_applicantEmail = applicantEmail;
	}

	@Override
	public String getApplicantPhone() {
		if (_applicantPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantPhone;
		}
	}

	@Override
	public void setApplicantPhone(String applicantPhone) {
		_applicantPhone = applicantPhone;
	}

	@Override
	public String getApplicantFax() {
		if (_applicantFax == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantFax;
		}
	}

	@Override
	public void setApplicantFax(String applicantFax) {
		_applicantFax = applicantFax;
	}

	@Override
	public String getApplicantContactName() {
		if (_applicantContactName == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantContactName;
		}
	}

	@Override
	public void setApplicantContactName(String applicantContactName) {
		_applicantContactName = applicantContactName;
	}

	@Override
	public String getApplicantContactEmail() {
		if (_applicantContactEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantContactEmail;
		}
	}

	@Override
	public void setApplicantContactEmail(String applicantContactEmail) {
		_applicantContactEmail = applicantContactEmail;
	}

	@Override
	public String getApplicantcontactPhone() {
		if (_applicantcontactPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantcontactPhone;
		}
	}

	@Override
	public void setApplicantcontactPhone(String applicantcontactPhone) {
		_applicantcontactPhone = applicantcontactPhone;
	}

	@Override
	public String getApplicantcontactTelNo() {
		if (_applicantcontactTelNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantcontactTelNo;
		}
	}

	@Override
	public void setApplicantcontactTelNo(String applicantcontactTelNo) {
		_applicantcontactTelNo = applicantcontactTelNo;
	}

	@Override
	public String getCityCode() {
		if (_cityCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _cityCode;
		}
	}

	@Override
	public void setCityCode(String cityCode) {
		_cityCode = cityCode;
	}

	@Override
	public String getCityName() {
		if (_cityName == null) {
			return StringPool.BLANK;
		}
		else {
			return _cityName;
		}
	}

	@Override
	public void setCityName(String cityName) {
		_cityName = cityName;
	}

	@Override
	public String getDistrictCode() {
		if (_districtCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _districtCode;
		}
	}

	@Override
	public void setDistrictCode(String districtCode) {
		_districtCode = districtCode;
	}

	@Override
	public String getDistrictName() {
		if (_districtName == null) {
			return StringPool.BLANK;
		}
		else {
			return _districtName;
		}
	}

	@Override
	public void setDistrictName(String districtName) {
		_districtName = districtName;
	}

	@Override
	public String getWardCode() {
		if (_wardCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _wardCode;
		}
	}

	@Override
	public void setWardCode(String wardCode) {
		_wardCode = wardCode;
	}

	@Override
	public String getWardName() {
		if (_wardName == null) {
			return StringPool.BLANK;
		}
		else {
			return _wardName;
		}
	}

	@Override
	public void setWardName(String wardName) {
		_wardName = wardName;
	}

	@Override
	public String getManufacturerForeignCode() {
		if (_manufacturerForeignCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _manufacturerForeignCode;
		}
	}

	@Override
	public void setManufacturerForeignCode(String manufacturerForeignCode) {
		_columnBitmask |= MANUFACTURERFOREIGNCODE_COLUMN_BITMASK;

		if (_originalManufacturerForeignCode == null) {
			_originalManufacturerForeignCode = _manufacturerForeignCode;
		}

		_manufacturerForeignCode = manufacturerForeignCode;
	}

	public String getOriginalManufacturerForeignCode() {
		return GetterUtil.getString(_originalManufacturerForeignCode);
	}

	@Override
	public String getManufacturerName() {
		if (_manufacturerName == null) {
			return StringPool.BLANK;
		}
		else {
			return _manufacturerName;
		}
	}

	@Override
	public void setManufacturerName(String manufacturerName) {
		_manufacturerName = manufacturerName;
	}

	@Override
	public String getManufacturerAddress() {
		if (_manufacturerAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _manufacturerAddress;
		}
	}

	@Override
	public void setManufacturerAddress(String manufacturerAddress) {
		_manufacturerAddress = manufacturerAddress;
	}

	@Override
	public String getManufacturerRepresentative() {
		if (_manufacturerRepresentative == null) {
			return StringPool.BLANK;
		}
		else {
			return _manufacturerRepresentative;
		}
	}

	@Override
	public void setManufacturerRepresentative(String manufacturerRepresentative) {
		_manufacturerRepresentative = manufacturerRepresentative;
	}

	@Override
	public String getManufacturerRepresentativeTitle() {
		if (_manufacturerRepresentativeTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _manufacturerRepresentativeTitle;
		}
	}

	@Override
	public void setManufacturerRepresentativeTitle(
		String manufacturerRepresentativeTitle) {
		_manufacturerRepresentativeTitle = manufacturerRepresentativeTitle;
	}

	@Override
	public String getManufacturerEmail() {
		if (_manufacturerEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _manufacturerEmail;
		}
	}

	@Override
	public void setManufacturerEmail(String manufacturerEmail) {
		_manufacturerEmail = manufacturerEmail;
	}

	@Override
	public String getManufacturerPhone() {
		if (_manufacturerPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _manufacturerPhone;
		}
	}

	@Override
	public void setManufacturerPhone(String manufacturerPhone) {
		_manufacturerPhone = manufacturerPhone;
	}

	@Override
	public String getManufacturerFax() {
		if (_manufacturerFax == null) {
			return StringPool.BLANK;
		}
		else {
			return _manufacturerFax;
		}
	}

	@Override
	public void setManufacturerFax(String manufacturerFax) {
		_manufacturerFax = manufacturerFax;
	}

	@Override
	public String getProductionPlantCode() {
		if (_productionPlantCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionPlantCode;
		}
	}

	@Override
	public void setProductionPlantCode(String productionPlantCode) {
		_columnBitmask |= PRODUCTIONPLANTCODE_COLUMN_BITMASK;

		if (_originalProductionPlantCode == null) {
			_originalProductionPlantCode = _productionPlantCode;
		}

		_productionPlantCode = productionPlantCode;
	}

	public String getOriginalProductionPlantCode() {
		return GetterUtil.getString(_originalProductionPlantCode);
	}

	@Override
	public String getProductionPlantName() {
		if (_productionPlantName == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionPlantName;
		}
	}

	@Override
	public void setProductionPlantName(String productionPlantName) {
		_columnBitmask |= PRODUCTIONPLANTNAME_COLUMN_BITMASK;

		if (_originalProductionPlantName == null) {
			_originalProductionPlantName = _productionPlantName;
		}

		_productionPlantName = productionPlantName;
	}

	public String getOriginalProductionPlantName() {
		return GetterUtil.getString(_originalProductionPlantName);
	}

	@Override
	public String getProductionPlantAddress() {
		if (_productionPlantAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionPlantAddress;
		}
	}

	@Override
	public void setProductionPlantAddress(String productionPlantAddress) {
		_columnBitmask |= PRODUCTIONPLANTADDRESS_COLUMN_BITMASK;

		if (_originalProductionPlantAddress == null) {
			_originalProductionPlantAddress = _productionPlantAddress;
		}

		_productionPlantAddress = productionPlantAddress;
	}

	public String getOriginalProductionPlantAddress() {
		return GetterUtil.getString(_originalProductionPlantAddress);
	}

	@Override
	public String getProductionPlantRepresentative() {
		if (_productionPlantRepresentative == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionPlantRepresentative;
		}
	}

	@Override
	public void setProductionPlantRepresentative(
		String productionPlantRepresentative) {
		_productionPlantRepresentative = productionPlantRepresentative;
	}

	@Override
	public String getProductionPlantRepresentativeTitle() {
		if (_productionPlantRepresentativeTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionPlantRepresentativeTitle;
		}
	}

	@Override
	public void setProductionPlantRepresentativeTitle(
		String productionPlantRepresentativeTitle) {
		_productionPlantRepresentativeTitle = productionPlantRepresentativeTitle;
	}

	@Override
	public String getCopReportNo() {
		if (_copReportNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _copReportNo;
		}
	}

	@Override
	public void setCopReportNo(String copReportNo) {
		_columnBitmask |= COPREPORTNO_COLUMN_BITMASK;

		if (_originalCopReportNo == null) {
			_originalCopReportNo = _copReportNo;
		}

		_copReportNo = copReportNo;
	}

	public String getOriginalCopReportNo() {
		return GetterUtil.getString(_originalCopReportNo);
	}

	@Override
	public Date getCopReportDate() {
		return _copReportDate;
	}

	@Override
	public void setCopReportDate(Date copReportDate) {
		_copReportDate = copReportDate;
	}

	@Override
	public Date getCopReportExpireDate() {
		return _copReportExpireDate;
	}

	@Override
	public void setCopReportExpireDate(Date copReportExpireDate) {
		_copReportExpireDate = copReportExpireDate;
	}

	@Override
	public String getDesignerCode() {
		if (_designerCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _designerCode;
		}
	}

	@Override
	public void setDesignerCode(String designerCode) {
		_columnBitmask |= DESIGNERCODE_COLUMN_BITMASK;

		if (_originalDesignerCode == null) {
			_originalDesignerCode = _designerCode;
		}

		_designerCode = designerCode;
	}

	public String getOriginalDesignerCode() {
		return GetterUtil.getString(_originalDesignerCode);
	}

	@Override
	public String getDesignerName() {
		if (_designerName == null) {
			return StringPool.BLANK;
		}
		else {
			return _designerName;
		}
	}

	@Override
	public void setDesignerName(String designerName) {
		_designerName = designerName;
	}

	@Override
	public String getDesignerAddress() {
		if (_designerAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _designerAddress;
		}
	}

	@Override
	public void setDesignerAddress(String designerAddress) {
		_designerAddress = designerAddress;
	}

	@Override
	public String getDesignerRepresentative() {
		if (_designerRepresentative == null) {
			return StringPool.BLANK;
		}
		else {
			return _designerRepresentative;
		}
	}

	@Override
	public void setDesignerRepresentative(String designerRepresentative) {
		_designerRepresentative = designerRepresentative;
	}

	@Override
	public String getDesignerRepresentativeTitle() {
		if (_designerRepresentativeTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _designerRepresentativeTitle;
		}
	}

	@Override
	public void setDesignerRepresentativeTitle(
		String designerRepresentativeTitle) {
		_designerRepresentativeTitle = designerRepresentativeTitle;
	}

	@Override
	public String getDesignerEmail() {
		if (_designerEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _designerEmail;
		}
	}

	@Override
	public void setDesignerEmail(String designerEmail) {
		_designerEmail = designerEmail;
	}

	@Override
	public String getDesignerPhone() {
		if (_designerPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _designerPhone;
		}
	}

	@Override
	public void setDesignerPhone(String designerPhone) {
		_designerPhone = designerPhone;
	}

	@Override
	public String getDesignerFax() {
		if (_designerFax == null) {
			return StringPool.BLANK;
		}
		else {
			return _designerFax;
		}
	}

	@Override
	public void setDesignerFax(String designerFax) {
		_designerFax = designerFax;
	}

	@Override
	public String getVerificationCertificateNo() {
		if (_verificationCertificateNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _verificationCertificateNo;
		}
	}

	@Override
	public void setVerificationCertificateNo(String verificationCertificateNo) {
		_columnBitmask |= VERIFICATIONCERTIFICATENO_COLUMN_BITMASK;

		if (_originalVerificationCertificateNo == null) {
			_originalVerificationCertificateNo = _verificationCertificateNo;
		}

		_verificationCertificateNo = verificationCertificateNo;
	}

	public String getOriginalVerificationCertificateNo() {
		return GetterUtil.getString(_originalVerificationCertificateNo);
	}

	@Override
	public Date getVerificationCertificateDate() {
		return _verificationCertificateDate;
	}

	@Override
	public void setVerificationCertificateDate(Date verificationCertificateDate) {
		_verificationCertificateDate = verificationCertificateDate;
	}

	@Override
	public String getVerificationRefNo() {
		if (_verificationRefNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _verificationRefNo;
		}
	}

	@Override
	public void setVerificationRefNo(String verificationRefNo) {
		_verificationRefNo = verificationRefNo;
	}

	@Override
	public Date getVerificationRefDate() {
		return _verificationRefDate;
	}

	@Override
	public void setVerificationRefDate(Date verificationRefDate) {
		_verificationRefDate = verificationRefDate;
	}

	@Override
	public String getTypeApprovalCertificateNo() {
		if (_typeApprovalCertificateNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _typeApprovalCertificateNo;
		}
	}

	@Override
	public void setTypeApprovalCertificateNo(String typeApprovalCertificateNo) {
		_typeApprovalCertificateNo = typeApprovalCertificateNo;
	}

	@Override
	public Date getTypeApprovalCertificateDate() {
		return _typeApprovalCertificateDate;
	}

	@Override
	public void setTypeApprovalCertificateDate(Date typeApprovalCertificateDate) {
		_typeApprovalCertificateDate = typeApprovalCertificateDate;
	}

	@Override
	public String getDesignModelCode() {
		if (_designModelCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _designModelCode;
		}
	}

	@Override
	public void setDesignModelCode(String designModelCode) {
		_designModelCode = designModelCode;
	}

	@Override
	public String getDesignModelDescription() {
		if (_designModelDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _designModelDescription;
		}
	}

	@Override
	public void setDesignModelDescription(String designModelDescription) {
		_designModelDescription = designModelDescription;
	}

	@Override
	public String getDesignSymbol() {
		if (_designSymbol == null) {
			return StringPool.BLANK;
		}
		else {
			return _designSymbol;
		}
	}

	@Override
	public void setDesignSymbol(String designSymbol) {
		_columnBitmask |= DESIGNSYMBOL_COLUMN_BITMASK;

		if (_originalDesignSymbol == null) {
			_originalDesignSymbol = _designSymbol;
		}

		_designSymbol = designSymbol;
	}

	public String getOriginalDesignSymbol() {
		return GetterUtil.getString(_originalDesignSymbol);
	}

	@Override
	public String getRegisteredNumber() {
		if (_registeredNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _registeredNumber;
		}
	}

	@Override
	public void setRegisteredNumber(String registeredNumber) {
		_registeredNumber = registeredNumber;
	}

	@Override
	public Date getInspectorReceiveDate() {
		return _inspectorReceiveDate;
	}

	@Override
	public void setInspectorReceiveDate(Date inspectorReceiveDate) {
		_inspectorReceiveDate = inspectorReceiveDate;
	}

	@Override
	public Date getInspectorSubmitDate() {
		return _inspectorSubmitDate;
	}

	@Override
	public void setInspectorSubmitDate(Date inspectorSubmitDate) {
		_inspectorSubmitDate = inspectorSubmitDate;
	}

	@Override
	public Date getInspectorendorSementDate() {
		return _inspectorendorSementDate;
	}

	@Override
	public void setInspectorendorSementDate(Date inspectorendorSementDate) {
		_inspectorendorSementDate = inspectorendorSementDate;
	}

	@Override
	public Date getInspectorDeadline() {
		return _inspectorDeadline;
	}

	@Override
	public void setInspectorDeadline(Date inspectorDeadline) {
		_inspectorDeadline = inspectorDeadline;
	}

	@Override
	public Date getInspectorFinishDate() {
		return _inspectorFinishDate;
	}

	@Override
	public void setInspectorFinishDate(Date inspectorFinishDate) {
		_inspectorFinishDate = inspectorFinishDate;
	}

	@Override
	public Date getInspectorCancelDate() {
		return _inspectorCancelDate;
	}

	@Override
	public void setInspectorCancelDate(Date inspectorCancelDate) {
		_inspectorCancelDate = inspectorCancelDate;
	}

	@Override
	public String getInspectorOrganization() {
		if (_inspectorOrganization == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectorOrganization;
		}
	}

	@Override
	public void setInspectorOrganization(String inspectorOrganization) {
		_inspectorOrganization = inspectorOrganization;
	}

	@Override
	public String getInspectorDivision() {
		if (_inspectorDivision == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectorDivision;
		}
	}

	@Override
	public void setInspectorDivision(String inspectorDivision) {
		_inspectorDivision = inspectorDivision;
	}

	@Override
	public String getInspectorSignName() {
		if (_inspectorSignName == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectorSignName;
		}
	}

	@Override
	public void setInspectorSignName(String inspectorSignName) {
		_inspectorSignName = inspectorSignName;
	}

	@Override
	public String getInspectorSignTitle() {
		if (_inspectorSignTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectorSignTitle;
		}
	}

	@Override
	public void setInspectorSignTitle(String inspectorSignTitle) {
		_inspectorSignTitle = inspectorSignTitle;
	}

	@Override
	public String getInspectorSignPlace() {
		if (_inspectorSignPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectorSignPlace;
		}
	}

	@Override
	public void setInspectorSignPlace(String inspectorSignPlace) {
		_inspectorSignPlace = inspectorSignPlace;
	}

	@Override
	public String getCertificateType() {
		if (_certificateType == null) {
			return StringPool.BLANK;
		}
		else {
			return _certificateType;
		}
	}

	@Override
	public void setCertificateType(String certificateType) {
		_certificateType = certificateType;
	}

	@Override
	public String getReferenceCertificateNo() {
		if (_referenceCertificateNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _referenceCertificateNo;
		}
	}

	@Override
	public void setReferenceCertificateNo(String referenceCertificateNo) {
		_referenceCertificateNo = referenceCertificateNo;
	}

	@Override
	public Date getReferenceCertificateDate() {
		return _referenceCertificateDate;
	}

	@Override
	public void setReferenceCertificateDate(Date referenceCertificateDate) {
		_referenceCertificateDate = referenceCertificateDate;
	}

	@Override
	public String getCertificateRecordNo() {
		if (_certificateRecordNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _certificateRecordNo;
		}
	}

	@Override
	public void setCertificateRecordNo(String certificateRecordNo) {
		_columnBitmask |= CERTIFICATERECORDNO_COLUMN_BITMASK;

		if (_originalCertificateRecordNo == null) {
			_originalCertificateRecordNo = _certificateRecordNo;
		}

		_certificateRecordNo = certificateRecordNo;
	}

	public String getOriginalCertificateRecordNo() {
		return GetterUtil.getString(_originalCertificateRecordNo);
	}

	@Override
	public String getCertificateSignName() {
		if (_certificateSignName == null) {
			return StringPool.BLANK;
		}
		else {
			return _certificateSignName;
		}
	}

	@Override
	public void setCertificateSignName(String certificateSignName) {
		_certificateSignName = certificateSignName;
	}

	@Override
	public String getCertificateSignTitle() {
		if (_certificateSignTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _certificateSignTitle;
		}
	}

	@Override
	public void setCertificateSignTitle(String certificateSignTitle) {
		_certificateSignTitle = certificateSignTitle;
	}

	@Override
	public String getCertificateSignPlace() {
		if (_certificateSignPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _certificateSignPlace;
		}
	}

	@Override
	public void setCertificateSignPlace(String certificateSignPlace) {
		_certificateSignPlace = certificateSignPlace;
	}

	@Override
	public Date getCertificateRecordDate() {
		return _certificateRecordDate;
	}

	@Override
	public void setCertificateRecordDate(Date certificateRecordDate) {
		_certificateRecordDate = certificateRecordDate;
	}

	@Override
	public Date getCertificateRecordExpireDate() {
		return _certificateRecordExpireDate;
	}

	@Override
	public void setCertificateRecordExpireDate(Date certificateRecordExpireDate) {
		_certificateRecordExpireDate = certificateRecordExpireDate;
	}

	@Override
	public String getExpiredStatus() {
		if (_expiredStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _expiredStatus;
		}
	}

	@Override
	public void setExpiredStatus(String expiredStatus) {
		_columnBitmask |= EXPIREDSTATUS_COLUMN_BITMASK;

		if (_originalExpiredStatus == null) {
			_originalExpiredStatus = _expiredStatus;
		}

		_expiredStatus = expiredStatus;
	}

	public String getOriginalExpiredStatus() {
		return GetterUtil.getString(_originalExpiredStatus);
	}

	@Override
	public String getCertificateRecordStatus() {
		if (_certificateRecordStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _certificateRecordStatus;
		}
	}

	@Override
	public void setCertificateRecordStatus(String certificateRecordStatus) {
		_certificateRecordStatus = certificateRecordStatus;
	}

	@Override
	public String getDigitalIssueStatus() {
		if (_digitalIssueStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _digitalIssueStatus;
		}
	}

	@Override
	public void setDigitalIssueStatus(String digitalIssueStatus) {
		_digitalIssueStatus = digitalIssueStatus;
	}

	@Override
	public String getVehicleClass() {
		if (_vehicleClass == null) {
			return StringPool.BLANK;
		}
		else {
			return _vehicleClass;
		}
	}

	@Override
	public void setVehicleClass(String vehicleClass) {
		_columnBitmask |= VEHICLECLASS_COLUMN_BITMASK;

		if (_originalVehicleClass == null) {
			_originalVehicleClass = _vehicleClass;
		}

		_vehicleClass = vehicleClass;
	}

	public String getOriginalVehicleClass() {
		return GetterUtil.getString(_originalVehicleClass);
	}

	@Override
	public String getCertifiedVehicleType() {
		if (_certifiedVehicleType == null) {
			return StringPool.BLANK;
		}
		else {
			return _certifiedVehicleType;
		}
	}

	@Override
	public void setCertifiedVehicleType(String certifiedVehicleType) {
		_columnBitmask |= CERTIFIEDVEHICLETYPE_COLUMN_BITMASK;

		if (_originalCertifiedVehicleType == null) {
			_originalCertifiedVehicleType = _certifiedVehicleType;
		}

		_certifiedVehicleType = certifiedVehicleType;
	}

	public String getOriginalCertifiedVehicleType() {
		return GetterUtil.getString(_originalCertifiedVehicleType);
	}

	@Override
	public String getCertifiedVehicleTypeDescription() {
		if (_certifiedVehicleTypeDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _certifiedVehicleTypeDescription;
		}
	}

	@Override
	public void setCertifiedVehicleTypeDescription(
		String certifiedVehicleTypeDescription) {
		_certifiedVehicleTypeDescription = certifiedVehicleTypeDescription;
	}

	@Override
	public String getCertifiedTrademark() {
		if (_certifiedTrademark == null) {
			return StringPool.BLANK;
		}
		else {
			return _certifiedTrademark;
		}
	}

	@Override
	public void setCertifiedTrademark(String certifiedTrademark) {
		_certifiedTrademark = certifiedTrademark;
	}

	@Override
	public String getCertifiedTrademarkName() {
		if (_certifiedTrademarkName == null) {
			return StringPool.BLANK;
		}
		else {
			return _certifiedTrademarkName;
		}
	}

	@Override
	public void setCertifiedTrademarkName(String certifiedTrademarkName) {
		_columnBitmask |= CERTIFIEDTRADEMARKNAME_COLUMN_BITMASK;

		if (_originalCertifiedTrademarkName == null) {
			_originalCertifiedTrademarkName = _certifiedTrademarkName;
		}

		_certifiedTrademarkName = certifiedTrademarkName;
	}

	public String getOriginalCertifiedTrademarkName() {
		return GetterUtil.getString(_originalCertifiedTrademarkName);
	}

	@Override
	public String getCertifiedCommercialName() {
		if (_certifiedCommercialName == null) {
			return StringPool.BLANK;
		}
		else {
			return _certifiedCommercialName;
		}
	}

	@Override
	public void setCertifiedCommercialName(String certifiedCommercialName) {
		_columnBitmask |= CERTIFIEDCOMMERCIALNAME_COLUMN_BITMASK;

		if (_originalCertifiedCommercialName == null) {
			_originalCertifiedCommercialName = _certifiedCommercialName;
		}

		_certifiedCommercialName = certifiedCommercialName;
	}

	public String getOriginalCertifiedCommercialName() {
		return GetterUtil.getString(_originalCertifiedCommercialName);
	}

	@Override
	public String getCertifiedModelCode() {
		if (_certifiedModelCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _certifiedModelCode;
		}
	}

	@Override
	public void setCertifiedModelCode(String certifiedModelCode) {
		_columnBitmask |= CERTIFIEDMODELCODE_COLUMN_BITMASK;

		if (_originalCertifiedModelCode == null) {
			_originalCertifiedModelCode = _certifiedModelCode;
		}

		_certifiedModelCode = certifiedModelCode;
	}

	public String getOriginalCertifiedModelCode() {
		return GetterUtil.getString(_originalCertifiedModelCode);
	}

	@Override
	public String getCertifiedAssemblyType() {
		if (_certifiedAssemblyType == null) {
			return StringPool.BLANK;
		}
		else {
			return _certifiedAssemblyType;
		}
	}

	@Override
	public void setCertifiedAssemblyType(String certifiedAssemblyType) {
		_certifiedAssemblyType = certifiedAssemblyType;
	}

	@Override
	public String getCertifiedAssemblyTypeDescription() {
		if (_certifiedAssemblyTypeDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _certifiedAssemblyTypeDescription;
		}
	}

	@Override
	public void setCertifiedAssemblyTypeDescription(
		String certifiedAssemblyTypeDescription) {
		_certifiedAssemblyTypeDescription = certifiedAssemblyTypeDescription;
	}

	@Override
	public String getCertifiedVINNo() {
		if (_certifiedVINNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _certifiedVINNo;
		}
	}

	@Override
	public void setCertifiedVINNo(String certifiedVINNo) {
		_certifiedVINNo = certifiedVINNo;
	}

	@Override
	public String getCertifiedVINPosition() {
		if (_certifiedVINPosition == null) {
			return StringPool.BLANK;
		}
		else {
			return _certifiedVINPosition;
		}
	}

	@Override
	public void setCertifiedVINPosition(String certifiedVINPosition) {
		_certifiedVINPosition = certifiedVINPosition;
	}

	@Override
	public String getCertifiedFrameNo() {
		if (_certifiedFrameNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _certifiedFrameNo;
		}
	}

	@Override
	public void setCertifiedFrameNo(String certifiedFrameNo) {
		_certifiedFrameNo = certifiedFrameNo;
	}

	@Override
	public String getCertifiedFrameAttachPlace() {
		if (_certifiedFrameAttachPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _certifiedFrameAttachPlace;
		}
	}

	@Override
	public void setCertifiedFrameAttachPlace(String certifiedFrameAttachPlace) {
		_certifiedFrameAttachPlace = certifiedFrameAttachPlace;
	}

	@Override
	public String getCertifiedFramePosition() {
		if (_certifiedFramePosition == null) {
			return StringPool.BLANK;
		}
		else {
			return _certifiedFramePosition;
		}
	}

	@Override
	public void setCertifiedFramePosition(String certifiedFramePosition) {
		_certifiedFramePosition = certifiedFramePosition;
	}

	@Override
	public String getCertifiedEngineNo() {
		if (_certifiedEngineNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _certifiedEngineNo;
		}
	}

	@Override
	public void setCertifiedEngineNo(String certifiedEngineNo) {
		_certifiedEngineNo = certifiedEngineNo;
	}

	@Override
	public String getCertifiedEngineAttachPlace() {
		if (_certifiedEngineAttachPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _certifiedEngineAttachPlace;
		}
	}

	@Override
	public void setCertifiedEngineAttachPlace(String certifiedEngineAttachPlace) {
		_certifiedEngineAttachPlace = certifiedEngineAttachPlace;
	}

	@Override
	public String getCertifiedEnginePosition() {
		if (_certifiedEnginePosition == null) {
			return StringPool.BLANK;
		}
		else {
			return _certifiedEnginePosition;
		}
	}

	@Override
	public void setCertifiedEnginePosition(String certifiedEnginePosition) {
		_certifiedEnginePosition = certifiedEnginePosition;
	}

	@Override
	public String getSafetyTestReportNo() {
		if (_safetyTestReportNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _safetyTestReportNo;
		}
	}

	@Override
	public void setSafetyTestReportNo(String safetyTestReportNo) {
		_safetyTestReportNo = safetyTestReportNo;
	}

	@Override
	public Date getSafetyTestReportDate() {
		return _safetyTestReportDate;
	}

	@Override
	public void setSafetyTestReportDate(Date safetyTestReportDate) {
		_safetyTestReportDate = safetyTestReportDate;
	}

	@Override
	public String getEmissionTestReportNo() {
		if (_emissionTestReportNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _emissionTestReportNo;
		}
	}

	@Override
	public void setEmissionTestReportNo(String emissionTestReportNo) {
		_emissionTestReportNo = emissionTestReportNo;
	}

	@Override
	public Date getEmissionTestReportDate() {
		return _emissionTestReportDate;
	}

	@Override
	public void setEmissionTestReportDate(Date emissionTestReportDate) {
		_emissionTestReportDate = emissionTestReportDate;
	}

	@Override
	public String getCommonSafetyStandard() {
		if (_commonSafetyStandard == null) {
			return StringPool.BLANK;
		}
		else {
			return _commonSafetyStandard;
		}
	}

	@Override
	public void setCommonSafetyStandard(String commonSafetyStandard) {
		_columnBitmask |= COMMONSAFETYSTANDARD_COLUMN_BITMASK;

		if (_originalCommonSafetyStandard == null) {
			_originalCommonSafetyStandard = _commonSafetyStandard;
		}

		_commonSafetyStandard = commonSafetyStandard;
	}

	public String getOriginalCommonSafetyStandard() {
		return GetterUtil.getString(_originalCommonSafetyStandard);
	}

	@Override
	public String getCommonSafetyDescription() {
		if (_commonSafetyDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _commonSafetyDescription;
		}
	}

	@Override
	public void setCommonSafetyDescription(String commonSafetyDescription) {
		_commonSafetyDescription = commonSafetyDescription;
	}

	@Override
	public String getEmissionStandard() {
		if (_emissionStandard == null) {
			return StringPool.BLANK;
		}
		else {
			return _emissionStandard;
		}
	}

	@Override
	public void setEmissionStandard(String emissionStandard) {
		_columnBitmask |= EMISSIONSTANDARD_COLUMN_BITMASK;

		if (_originalEmissionStandard == null) {
			_originalEmissionStandard = _emissionStandard;
		}

		_emissionStandard = emissionStandard;
	}

	public String getOriginalEmissionStandard() {
		return GetterUtil.getString(_originalEmissionStandard);
	}

	@Override
	public String getEmissionDescription() {
		if (_emissionDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _emissionDescription;
		}
	}

	@Override
	public void setEmissionDescription(String emissionDescription) {
		_emissionDescription = emissionDescription;
	}

	@Override
	public String getOtherTestReportNo() {
		if (_otherTestReportNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _otherTestReportNo;
		}
	}

	@Override
	public void setOtherTestReportNo(String otherTestReportNo) {
		_otherTestReportNo = otherTestReportNo;
	}

	@Override
	public Date getOtherTestReportDate() {
		return _otherTestReportDate;
	}

	@Override
	public void setOtherTestReportDate(Date otherTestReportDate) {
		_otherTestReportDate = otherTestReportDate;
	}

	@Override
	public String getSampleFrameNo() {
		if (_sampleFrameNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _sampleFrameNo;
		}
	}

	@Override
	public void setSampleFrameNo(String sampleFrameNo) {
		_sampleFrameNo = sampleFrameNo;
	}

	@Override
	public String getSampleVINNo() {
		if (_sampleVINNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _sampleVINNo;
		}
	}

	@Override
	public void setSampleVINNo(String sampleVINNo) {
		_sampleVINNo = sampleVINNo;
	}

	@Override
	public String getSampleEngineNo() {
		if (_sampleEngineNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _sampleEngineNo;
		}
	}

	@Override
	public void setSampleEngineNo(String sampleEngineNo) {
		_sampleEngineNo = sampleEngineNo;
	}

	@Override
	public String getSampleVehicleType() {
		if (_sampleVehicleType == null) {
			return StringPool.BLANK;
		}
		else {
			return _sampleVehicleType;
		}
	}

	@Override
	public void setSampleVehicleType(String sampleVehicleType) {
		_sampleVehicleType = sampleVehicleType;
	}

	@Override
	public String getSampleVehicleTypeDescription() {
		if (_sampleVehicleTypeDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _sampleVehicleTypeDescription;
		}
	}

	@Override
	public void setSampleVehicleTypeDescription(
		String sampleVehicleTypeDescription) {
		_sampleVehicleTypeDescription = sampleVehicleTypeDescription;
	}

	@Override
	public String getSampleTrademark() {
		if (_sampleTrademark == null) {
			return StringPool.BLANK;
		}
		else {
			return _sampleTrademark;
		}
	}

	@Override
	public void setSampleTrademark(String sampleTrademark) {
		_sampleTrademark = sampleTrademark;
	}

	@Override
	public String getSampleTrademarkName() {
		if (_sampleTrademarkName == null) {
			return StringPool.BLANK;
		}
		else {
			return _sampleTrademarkName;
		}
	}

	@Override
	public void setSampleTrademarkName(String sampleTrademarkName) {
		_sampleTrademarkName = sampleTrademarkName;
	}

	@Override
	public String getSampleCommercialName() {
		if (_sampleCommercialName == null) {
			return StringPool.BLANK;
		}
		else {
			return _sampleCommercialName;
		}
	}

	@Override
	public void setSampleCommercialName(String sampleCommercialName) {
		_sampleCommercialName = sampleCommercialName;
	}

	@Override
	public String getSampleModelCode() {
		if (_sampleModelCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _sampleModelCode;
		}
	}

	@Override
	public void setSampleModelCode(String sampleModelCode) {
		_sampleModelCode = sampleModelCode;
	}

	@Override
	public String getCustomsDeclarationNo() {
		if (_customsDeclarationNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _customsDeclarationNo;
		}
	}

	@Override
	public void setCustomsDeclarationNo(String customsDeclarationNo) {
		_customsDeclarationNo = customsDeclarationNo;
	}

	@Override
	public Date getCustomsDeclarationDate() {
		return _customsDeclarationDate;
	}

	@Override
	public void setCustomsDeclarationDate(Date customsDeclarationDate) {
		_customsDeclarationDate = customsDeclarationDate;
	}

	@Override
	public String getProductionCountry() {
		if (_productionCountry == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionCountry;
		}
	}

	@Override
	public void setProductionCountry(String productionCountry) {
		_productionCountry = productionCountry;
	}

	@Override
	public long getImporterQuantity() {
		return _importerQuantity;
	}

	@Override
	public void setImporterQuantity(long importerQuantity) {
		_importerQuantity = importerQuantity;
	}

	@Override
	public String getInspectionRecordNo() {
		if (_inspectionRecordNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectionRecordNo;
		}
	}

	@Override
	public void setInspectionRecordNo(String inspectionRecordNo) {
		_columnBitmask |= INSPECTIONRECORDNO_COLUMN_BITMASK;

		if (_originalInspectionRecordNo == null) {
			_originalInspectionRecordNo = _inspectionRecordNo;
		}

		_inspectionRecordNo = inspectionRecordNo;
	}

	public String getOriginalInspectionRecordNo() {
		return GetterUtil.getString(_originalInspectionRecordNo);
	}

	@Override
	public Date getInspectionDate() {
		return _inspectionDate;
	}

	@Override
	public void setInspectionDate(Date inspectionDate) {
		_inspectionDate = inspectionDate;
	}

	@Override
	public String getInspectionSite() {
		if (_inspectionSite == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectionSite;
		}
	}

	@Override
	public void setInspectionSite(String inspectionSite) {
		_inspectionSite = inspectionSite;
	}

	@Override
	public String getInspectionDistrictCode() {
		if (_inspectionDistrictCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectionDistrictCode;
		}
	}

	@Override
	public void setInspectionDistrictCode(String inspectionDistrictCode) {
		_inspectionDistrictCode = inspectionDistrictCode;
	}

	@Override
	public String getInspectionDistrictName() {
		if (_inspectionDistrictName == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectionDistrictName;
		}
	}

	@Override
	public void setInspectionDistrictName(String inspectionDistrictName) {
		_inspectionDistrictName = inspectionDistrictName;
	}

	@Override
	public String getInspectionProvinceCode() {
		if (_inspectionProvinceCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectionProvinceCode;
		}
	}

	@Override
	public void setInspectionProvinceCode(String inspectionProvinceCode) {
		_inspectionProvinceCode = inspectionProvinceCode;
	}

	@Override
	public String getInspectionProvinceName() {
		if (_inspectionProvinceName == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectionProvinceName;
		}
	}

	@Override
	public void setInspectionProvinceName(String inspectionProvinceName) {
		_inspectionProvinceName = inspectionProvinceName;
	}

	@Override
	public String getCorporationId() {
		if (_corporationId == null) {
			return StringPool.BLANK;
		}
		else {
			return _corporationId;
		}
	}

	@Override
	public void setCorporationId(String corporationId) {
		_columnBitmask |= CORPORATIONID_COLUMN_BITMASK;

		if (_originalCorporationId == null) {
			_originalCorporationId = _corporationId;
		}

		_corporationId = corporationId;
	}

	public String getOriginalCorporationId() {
		return GetterUtil.getString(_originalCorporationId);
	}

	@Override
	public long getInspectorId() {
		return _inspectorId;
	}

	@Override
	public void setInspectorId(long inspectorId) {
		_columnBitmask |= INSPECTORID_COLUMN_BITMASK;

		if (!_setOriginalInspectorId) {
			_setOriginalInspectorId = true;

			_originalInspectorId = _inspectorId;
		}

		_inspectorId = inspectorId;
	}

	public long getOriginalInspectorId() {
		return _originalInspectorId;
	}

	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		_remarks = remarks;
	}

	@Override
	public String getInspectionNote() {
		if (_inspectionNote == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectionNote;
		}
	}

	@Override
	public void setInspectionNote(String inspectionNote) {
		_inspectionNote = inspectionNote;
	}

	@Override
	public String getCertificateNote() {
		if (_certificateNote == null) {
			return StringPool.BLANK;
		}
		else {
			return _certificateNote;
		}
	}

	@Override
	public void setCertificateNote(String certificateNote) {
		_certificateNote = certificateNote;
	}

	@Override
	public String getDeliverableCode() {
		if (_deliverableCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _deliverableCode;
		}
	}

	@Override
	public void setDeliverableCode(String deliverableCode) {
		_columnBitmask |= DELIVERABLECODE_COLUMN_BITMASK;

		if (_originalDeliverableCode == null) {
			_originalDeliverableCode = _deliverableCode;
		}

		_deliverableCode = deliverableCode;
	}

	public String getOriginalDeliverableCode() {
		return GetterUtil.getString(_originalDeliverableCode);
	}

	@Override
	public long getDeliverableFileEntryid() {
		return _deliverableFileEntryid;
	}

	@Override
	public void setDeliverableFileEntryid(long deliverableFileEntryid) {
		_deliverableFileEntryid = deliverableFileEntryid;
	}

	@Override
	public String getModule() {
		if (_module == null) {
			return StringPool.BLANK;
		}
		else {
			return _module;
		}
	}

	@Override
	public void setModule(String module) {
		_module = module;
	}

	@Override
	public Date getModifyDate() {
		return _modifyDate;
	}

	@Override
	public void setModifyDate(Date modifyDate) {
		_columnBitmask = -1L;

		_modifyDate = modifyDate;
	}

	@Override
	public Date getSyncDate() {
		return _syncDate;
	}

	@Override
	public void setSyncDate(Date syncDate) {
		_syncDate = syncDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VRVehicleTypeCertificate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VRVehicleTypeCertificate toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VRVehicleTypeCertificate)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VRVehicleTypeCertificateImpl vrVehicleTypeCertificateImpl = new VRVehicleTypeCertificateImpl();

		vrVehicleTypeCertificateImpl.setId(getId());
		vrVehicleTypeCertificateImpl.setMtCore(getMtCore());
		vrVehicleTypeCertificateImpl.setDossierId(getDossierId());
		vrVehicleTypeCertificateImpl.setDossierIdCTN(getDossierIdCTN());
		vrVehicleTypeCertificateImpl.setDossierType(getDossierType());
		vrVehicleTypeCertificateImpl.setDossierNo(getDossierNo());
		vrVehicleTypeCertificateImpl.setReferenceUid(getReferenceUid());
		vrVehicleTypeCertificateImpl.setServiceCode(getServiceCode());
		vrVehicleTypeCertificateImpl.setServiceName(getServiceName());
		vrVehicleTypeCertificateImpl.setConvertassembleId(getConvertassembleId());
		vrVehicleTypeCertificateImpl.setApplicantIdNo(getApplicantIdNo());
		vrVehicleTypeCertificateImpl.setApplicantTelNo(getApplicantTelNo());
		vrVehicleTypeCertificateImpl.setApplicantName(getApplicantName());
		vrVehicleTypeCertificateImpl.setApplicantIdDate(getApplicantIdDate());
		vrVehicleTypeCertificateImpl.setApplicantAddress(getApplicantAddress());
		vrVehicleTypeCertificateImpl.setApplicantRepresentative(getApplicantRepresentative());
		vrVehicleTypeCertificateImpl.setApplicantRepresentativeTitle(getApplicantRepresentativeTitle());
		vrVehicleTypeCertificateImpl.setApplicantEmail(getApplicantEmail());
		vrVehicleTypeCertificateImpl.setApplicantPhone(getApplicantPhone());
		vrVehicleTypeCertificateImpl.setApplicantFax(getApplicantFax());
		vrVehicleTypeCertificateImpl.setApplicantContactName(getApplicantContactName());
		vrVehicleTypeCertificateImpl.setApplicantContactEmail(getApplicantContactEmail());
		vrVehicleTypeCertificateImpl.setApplicantcontactPhone(getApplicantcontactPhone());
		vrVehicleTypeCertificateImpl.setApplicantcontactTelNo(getApplicantcontactTelNo());
		vrVehicleTypeCertificateImpl.setCityCode(getCityCode());
		vrVehicleTypeCertificateImpl.setCityName(getCityName());
		vrVehicleTypeCertificateImpl.setDistrictCode(getDistrictCode());
		vrVehicleTypeCertificateImpl.setDistrictName(getDistrictName());
		vrVehicleTypeCertificateImpl.setWardCode(getWardCode());
		vrVehicleTypeCertificateImpl.setWardName(getWardName());
		vrVehicleTypeCertificateImpl.setManufacturerForeignCode(getManufacturerForeignCode());
		vrVehicleTypeCertificateImpl.setManufacturerName(getManufacturerName());
		vrVehicleTypeCertificateImpl.setManufacturerAddress(getManufacturerAddress());
		vrVehicleTypeCertificateImpl.setManufacturerRepresentative(getManufacturerRepresentative());
		vrVehicleTypeCertificateImpl.setManufacturerRepresentativeTitle(getManufacturerRepresentativeTitle());
		vrVehicleTypeCertificateImpl.setManufacturerEmail(getManufacturerEmail());
		vrVehicleTypeCertificateImpl.setManufacturerPhone(getManufacturerPhone());
		vrVehicleTypeCertificateImpl.setManufacturerFax(getManufacturerFax());
		vrVehicleTypeCertificateImpl.setProductionPlantCode(getProductionPlantCode());
		vrVehicleTypeCertificateImpl.setProductionPlantName(getProductionPlantName());
		vrVehicleTypeCertificateImpl.setProductionPlantAddress(getProductionPlantAddress());
		vrVehicleTypeCertificateImpl.setProductionPlantRepresentative(getProductionPlantRepresentative());
		vrVehicleTypeCertificateImpl.setProductionPlantRepresentativeTitle(getProductionPlantRepresentativeTitle());
		vrVehicleTypeCertificateImpl.setCopReportNo(getCopReportNo());
		vrVehicleTypeCertificateImpl.setCopReportDate(getCopReportDate());
		vrVehicleTypeCertificateImpl.setCopReportExpireDate(getCopReportExpireDate());
		vrVehicleTypeCertificateImpl.setDesignerCode(getDesignerCode());
		vrVehicleTypeCertificateImpl.setDesignerName(getDesignerName());
		vrVehicleTypeCertificateImpl.setDesignerAddress(getDesignerAddress());
		vrVehicleTypeCertificateImpl.setDesignerRepresentative(getDesignerRepresentative());
		vrVehicleTypeCertificateImpl.setDesignerRepresentativeTitle(getDesignerRepresentativeTitle());
		vrVehicleTypeCertificateImpl.setDesignerEmail(getDesignerEmail());
		vrVehicleTypeCertificateImpl.setDesignerPhone(getDesignerPhone());
		vrVehicleTypeCertificateImpl.setDesignerFax(getDesignerFax());
		vrVehicleTypeCertificateImpl.setVerificationCertificateNo(getVerificationCertificateNo());
		vrVehicleTypeCertificateImpl.setVerificationCertificateDate(getVerificationCertificateDate());
		vrVehicleTypeCertificateImpl.setVerificationRefNo(getVerificationRefNo());
		vrVehicleTypeCertificateImpl.setVerificationRefDate(getVerificationRefDate());
		vrVehicleTypeCertificateImpl.setTypeApprovalCertificateNo(getTypeApprovalCertificateNo());
		vrVehicleTypeCertificateImpl.setTypeApprovalCertificateDate(getTypeApprovalCertificateDate());
		vrVehicleTypeCertificateImpl.setDesignModelCode(getDesignModelCode());
		vrVehicleTypeCertificateImpl.setDesignModelDescription(getDesignModelDescription());
		vrVehicleTypeCertificateImpl.setDesignSymbol(getDesignSymbol());
		vrVehicleTypeCertificateImpl.setRegisteredNumber(getRegisteredNumber());
		vrVehicleTypeCertificateImpl.setInspectorReceiveDate(getInspectorReceiveDate());
		vrVehicleTypeCertificateImpl.setInspectorSubmitDate(getInspectorSubmitDate());
		vrVehicleTypeCertificateImpl.setInspectorendorSementDate(getInspectorendorSementDate());
		vrVehicleTypeCertificateImpl.setInspectorDeadline(getInspectorDeadline());
		vrVehicleTypeCertificateImpl.setInspectorFinishDate(getInspectorFinishDate());
		vrVehicleTypeCertificateImpl.setInspectorCancelDate(getInspectorCancelDate());
		vrVehicleTypeCertificateImpl.setInspectorOrganization(getInspectorOrganization());
		vrVehicleTypeCertificateImpl.setInspectorDivision(getInspectorDivision());
		vrVehicleTypeCertificateImpl.setInspectorSignName(getInspectorSignName());
		vrVehicleTypeCertificateImpl.setInspectorSignTitle(getInspectorSignTitle());
		vrVehicleTypeCertificateImpl.setInspectorSignPlace(getInspectorSignPlace());
		vrVehicleTypeCertificateImpl.setCertificateType(getCertificateType());
		vrVehicleTypeCertificateImpl.setReferenceCertificateNo(getReferenceCertificateNo());
		vrVehicleTypeCertificateImpl.setReferenceCertificateDate(getReferenceCertificateDate());
		vrVehicleTypeCertificateImpl.setCertificateRecordNo(getCertificateRecordNo());
		vrVehicleTypeCertificateImpl.setCertificateSignName(getCertificateSignName());
		vrVehicleTypeCertificateImpl.setCertificateSignTitle(getCertificateSignTitle());
		vrVehicleTypeCertificateImpl.setCertificateSignPlace(getCertificateSignPlace());
		vrVehicleTypeCertificateImpl.setCertificateRecordDate(getCertificateRecordDate());
		vrVehicleTypeCertificateImpl.setCertificateRecordExpireDate(getCertificateRecordExpireDate());
		vrVehicleTypeCertificateImpl.setExpiredStatus(getExpiredStatus());
		vrVehicleTypeCertificateImpl.setCertificateRecordStatus(getCertificateRecordStatus());
		vrVehicleTypeCertificateImpl.setDigitalIssueStatus(getDigitalIssueStatus());
		vrVehicleTypeCertificateImpl.setVehicleClass(getVehicleClass());
		vrVehicleTypeCertificateImpl.setCertifiedVehicleType(getCertifiedVehicleType());
		vrVehicleTypeCertificateImpl.setCertifiedVehicleTypeDescription(getCertifiedVehicleTypeDescription());
		vrVehicleTypeCertificateImpl.setCertifiedTrademark(getCertifiedTrademark());
		vrVehicleTypeCertificateImpl.setCertifiedTrademarkName(getCertifiedTrademarkName());
		vrVehicleTypeCertificateImpl.setCertifiedCommercialName(getCertifiedCommercialName());
		vrVehicleTypeCertificateImpl.setCertifiedModelCode(getCertifiedModelCode());
		vrVehicleTypeCertificateImpl.setCertifiedAssemblyType(getCertifiedAssemblyType());
		vrVehicleTypeCertificateImpl.setCertifiedAssemblyTypeDescription(getCertifiedAssemblyTypeDescription());
		vrVehicleTypeCertificateImpl.setCertifiedVINNo(getCertifiedVINNo());
		vrVehicleTypeCertificateImpl.setCertifiedVINPosition(getCertifiedVINPosition());
		vrVehicleTypeCertificateImpl.setCertifiedFrameNo(getCertifiedFrameNo());
		vrVehicleTypeCertificateImpl.setCertifiedFrameAttachPlace(getCertifiedFrameAttachPlace());
		vrVehicleTypeCertificateImpl.setCertifiedFramePosition(getCertifiedFramePosition());
		vrVehicleTypeCertificateImpl.setCertifiedEngineNo(getCertifiedEngineNo());
		vrVehicleTypeCertificateImpl.setCertifiedEngineAttachPlace(getCertifiedEngineAttachPlace());
		vrVehicleTypeCertificateImpl.setCertifiedEnginePosition(getCertifiedEnginePosition());
		vrVehicleTypeCertificateImpl.setSafetyTestReportNo(getSafetyTestReportNo());
		vrVehicleTypeCertificateImpl.setSafetyTestReportDate(getSafetyTestReportDate());
		vrVehicleTypeCertificateImpl.setEmissionTestReportNo(getEmissionTestReportNo());
		vrVehicleTypeCertificateImpl.setEmissionTestReportDate(getEmissionTestReportDate());
		vrVehicleTypeCertificateImpl.setCommonSafetyStandard(getCommonSafetyStandard());
		vrVehicleTypeCertificateImpl.setCommonSafetyDescription(getCommonSafetyDescription());
		vrVehicleTypeCertificateImpl.setEmissionStandard(getEmissionStandard());
		vrVehicleTypeCertificateImpl.setEmissionDescription(getEmissionDescription());
		vrVehicleTypeCertificateImpl.setOtherTestReportNo(getOtherTestReportNo());
		vrVehicleTypeCertificateImpl.setOtherTestReportDate(getOtherTestReportDate());
		vrVehicleTypeCertificateImpl.setSampleFrameNo(getSampleFrameNo());
		vrVehicleTypeCertificateImpl.setSampleVINNo(getSampleVINNo());
		vrVehicleTypeCertificateImpl.setSampleEngineNo(getSampleEngineNo());
		vrVehicleTypeCertificateImpl.setSampleVehicleType(getSampleVehicleType());
		vrVehicleTypeCertificateImpl.setSampleVehicleTypeDescription(getSampleVehicleTypeDescription());
		vrVehicleTypeCertificateImpl.setSampleTrademark(getSampleTrademark());
		vrVehicleTypeCertificateImpl.setSampleTrademarkName(getSampleTrademarkName());
		vrVehicleTypeCertificateImpl.setSampleCommercialName(getSampleCommercialName());
		vrVehicleTypeCertificateImpl.setSampleModelCode(getSampleModelCode());
		vrVehicleTypeCertificateImpl.setCustomsDeclarationNo(getCustomsDeclarationNo());
		vrVehicleTypeCertificateImpl.setCustomsDeclarationDate(getCustomsDeclarationDate());
		vrVehicleTypeCertificateImpl.setProductionCountry(getProductionCountry());
		vrVehicleTypeCertificateImpl.setImporterQuantity(getImporterQuantity());
		vrVehicleTypeCertificateImpl.setInspectionRecordNo(getInspectionRecordNo());
		vrVehicleTypeCertificateImpl.setInspectionDate(getInspectionDate());
		vrVehicleTypeCertificateImpl.setInspectionSite(getInspectionSite());
		vrVehicleTypeCertificateImpl.setInspectionDistrictCode(getInspectionDistrictCode());
		vrVehicleTypeCertificateImpl.setInspectionDistrictName(getInspectionDistrictName());
		vrVehicleTypeCertificateImpl.setInspectionProvinceCode(getInspectionProvinceCode());
		vrVehicleTypeCertificateImpl.setInspectionProvinceName(getInspectionProvinceName());
		vrVehicleTypeCertificateImpl.setCorporationId(getCorporationId());
		vrVehicleTypeCertificateImpl.setInspectorId(getInspectorId());
		vrVehicleTypeCertificateImpl.setRemarks(getRemarks());
		vrVehicleTypeCertificateImpl.setInspectionNote(getInspectionNote());
		vrVehicleTypeCertificateImpl.setCertificateNote(getCertificateNote());
		vrVehicleTypeCertificateImpl.setDeliverableCode(getDeliverableCode());
		vrVehicleTypeCertificateImpl.setDeliverableFileEntryid(getDeliverableFileEntryid());
		vrVehicleTypeCertificateImpl.setModule(getModule());
		vrVehicleTypeCertificateImpl.setModifyDate(getModifyDate());
		vrVehicleTypeCertificateImpl.setSyncDate(getSyncDate());

		vrVehicleTypeCertificateImpl.resetOriginalValues();

		return vrVehicleTypeCertificateImpl;
	}

	@Override
	public int compareTo(VRVehicleTypeCertificate vrVehicleTypeCertificate) {
		int value = 0;

		value = DateUtil.compareTo(getModifyDate(),
				vrVehicleTypeCertificate.getModifyDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VRVehicleTypeCertificate)) {
			return false;
		}

		VRVehicleTypeCertificate vrVehicleTypeCertificate = (VRVehicleTypeCertificate)obj;

		long primaryKey = vrVehicleTypeCertificate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VRVehicleTypeCertificateModelImpl vrVehicleTypeCertificateModelImpl = this;

		vrVehicleTypeCertificateModelImpl._originalMtCore = vrVehicleTypeCertificateModelImpl._mtCore;

		vrVehicleTypeCertificateModelImpl._setOriginalMtCore = false;

		vrVehicleTypeCertificateModelImpl._originalDossierId = vrVehicleTypeCertificateModelImpl._dossierId;

		vrVehicleTypeCertificateModelImpl._setOriginalDossierId = false;

		vrVehicleTypeCertificateModelImpl._originalDossierNo = vrVehicleTypeCertificateModelImpl._dossierNo;

		vrVehicleTypeCertificateModelImpl._originalServiceCode = vrVehicleTypeCertificateModelImpl._serviceCode;

		vrVehicleTypeCertificateModelImpl._originalApplicantIdNo = vrVehicleTypeCertificateModelImpl._applicantIdNo;

		vrVehicleTypeCertificateModelImpl._originalManufacturerForeignCode = vrVehicleTypeCertificateModelImpl._manufacturerForeignCode;

		vrVehicleTypeCertificateModelImpl._originalProductionPlantCode = vrVehicleTypeCertificateModelImpl._productionPlantCode;

		vrVehicleTypeCertificateModelImpl._originalProductionPlantName = vrVehicleTypeCertificateModelImpl._productionPlantName;

		vrVehicleTypeCertificateModelImpl._originalProductionPlantAddress = vrVehicleTypeCertificateModelImpl._productionPlantAddress;

		vrVehicleTypeCertificateModelImpl._originalCopReportNo = vrVehicleTypeCertificateModelImpl._copReportNo;

		vrVehicleTypeCertificateModelImpl._originalDesignerCode = vrVehicleTypeCertificateModelImpl._designerCode;

		vrVehicleTypeCertificateModelImpl._originalVerificationCertificateNo = vrVehicleTypeCertificateModelImpl._verificationCertificateNo;

		vrVehicleTypeCertificateModelImpl._originalDesignSymbol = vrVehicleTypeCertificateModelImpl._designSymbol;

		vrVehicleTypeCertificateModelImpl._originalCertificateRecordNo = vrVehicleTypeCertificateModelImpl._certificateRecordNo;

		vrVehicleTypeCertificateModelImpl._originalExpiredStatus = vrVehicleTypeCertificateModelImpl._expiredStatus;

		vrVehicleTypeCertificateModelImpl._originalVehicleClass = vrVehicleTypeCertificateModelImpl._vehicleClass;

		vrVehicleTypeCertificateModelImpl._originalCertifiedVehicleType = vrVehicleTypeCertificateModelImpl._certifiedVehicleType;

		vrVehicleTypeCertificateModelImpl._originalCertifiedTrademarkName = vrVehicleTypeCertificateModelImpl._certifiedTrademarkName;

		vrVehicleTypeCertificateModelImpl._originalCertifiedCommercialName = vrVehicleTypeCertificateModelImpl._certifiedCommercialName;

		vrVehicleTypeCertificateModelImpl._originalCertifiedModelCode = vrVehicleTypeCertificateModelImpl._certifiedModelCode;

		vrVehicleTypeCertificateModelImpl._originalCommonSafetyStandard = vrVehicleTypeCertificateModelImpl._commonSafetyStandard;

		vrVehicleTypeCertificateModelImpl._originalEmissionStandard = vrVehicleTypeCertificateModelImpl._emissionStandard;

		vrVehicleTypeCertificateModelImpl._originalInspectionRecordNo = vrVehicleTypeCertificateModelImpl._inspectionRecordNo;

		vrVehicleTypeCertificateModelImpl._originalCorporationId = vrVehicleTypeCertificateModelImpl._corporationId;

		vrVehicleTypeCertificateModelImpl._originalInspectorId = vrVehicleTypeCertificateModelImpl._inspectorId;

		vrVehicleTypeCertificateModelImpl._setOriginalInspectorId = false;

		vrVehicleTypeCertificateModelImpl._originalDeliverableCode = vrVehicleTypeCertificateModelImpl._deliverableCode;

		vrVehicleTypeCertificateModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VRVehicleTypeCertificate> toCacheModel() {
		VRVehicleTypeCertificateCacheModel vrVehicleTypeCertificateCacheModel = new VRVehicleTypeCertificateCacheModel();

		vrVehicleTypeCertificateCacheModel.id = getId();

		vrVehicleTypeCertificateCacheModel.mtCore = getMtCore();

		vrVehicleTypeCertificateCacheModel.dossierId = getDossierId();

		vrVehicleTypeCertificateCacheModel.dossierIdCTN = getDossierIdCTN();

		String dossierIdCTN = vrVehicleTypeCertificateCacheModel.dossierIdCTN;

		if ((dossierIdCTN != null) && (dossierIdCTN.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.dossierIdCTN = null;
		}

		vrVehicleTypeCertificateCacheModel.dossierType = getDossierType();

		String dossierType = vrVehicleTypeCertificateCacheModel.dossierType;

		if ((dossierType != null) && (dossierType.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.dossierType = null;
		}

		vrVehicleTypeCertificateCacheModel.dossierNo = getDossierNo();

		String dossierNo = vrVehicleTypeCertificateCacheModel.dossierNo;

		if ((dossierNo != null) && (dossierNo.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.dossierNo = null;
		}

		vrVehicleTypeCertificateCacheModel.referenceUid = getReferenceUid();

		String referenceUid = vrVehicleTypeCertificateCacheModel.referenceUid;

		if ((referenceUid != null) && (referenceUid.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.referenceUid = null;
		}

		vrVehicleTypeCertificateCacheModel.serviceCode = getServiceCode();

		String serviceCode = vrVehicleTypeCertificateCacheModel.serviceCode;

		if ((serviceCode != null) && (serviceCode.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.serviceCode = null;
		}

		vrVehicleTypeCertificateCacheModel.serviceName = getServiceName();

		String serviceName = vrVehicleTypeCertificateCacheModel.serviceName;

		if ((serviceName != null) && (serviceName.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.serviceName = null;
		}

		vrVehicleTypeCertificateCacheModel.convertassembleId = getConvertassembleId();

		vrVehicleTypeCertificateCacheModel.applicantIdNo = getApplicantIdNo();

		String applicantIdNo = vrVehicleTypeCertificateCacheModel.applicantIdNo;

		if ((applicantIdNo != null) && (applicantIdNo.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.applicantIdNo = null;
		}

		vrVehicleTypeCertificateCacheModel.applicantTelNo = getApplicantTelNo();

		String applicantTelNo = vrVehicleTypeCertificateCacheModel.applicantTelNo;

		if ((applicantTelNo != null) && (applicantTelNo.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.applicantTelNo = null;
		}

		vrVehicleTypeCertificateCacheModel.applicantName = getApplicantName();

		String applicantName = vrVehicleTypeCertificateCacheModel.applicantName;

		if ((applicantName != null) && (applicantName.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.applicantName = null;
		}

		Date applicantIdDate = getApplicantIdDate();

		if (applicantIdDate != null) {
			vrVehicleTypeCertificateCacheModel.applicantIdDate = applicantIdDate.getTime();
		}
		else {
			vrVehicleTypeCertificateCacheModel.applicantIdDate = Long.MIN_VALUE;
		}

		vrVehicleTypeCertificateCacheModel.applicantAddress = getApplicantAddress();

		String applicantAddress = vrVehicleTypeCertificateCacheModel.applicantAddress;

		if ((applicantAddress != null) && (applicantAddress.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.applicantAddress = null;
		}

		vrVehicleTypeCertificateCacheModel.applicantRepresentative = getApplicantRepresentative();

		String applicantRepresentative = vrVehicleTypeCertificateCacheModel.applicantRepresentative;

		if ((applicantRepresentative != null) &&
				(applicantRepresentative.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.applicantRepresentative = null;
		}

		vrVehicleTypeCertificateCacheModel.applicantRepresentativeTitle = getApplicantRepresentativeTitle();

		String applicantRepresentativeTitle = vrVehicleTypeCertificateCacheModel.applicantRepresentativeTitle;

		if ((applicantRepresentativeTitle != null) &&
				(applicantRepresentativeTitle.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.applicantRepresentativeTitle = null;
		}

		vrVehicleTypeCertificateCacheModel.applicantEmail = getApplicantEmail();

		String applicantEmail = vrVehicleTypeCertificateCacheModel.applicantEmail;

		if ((applicantEmail != null) && (applicantEmail.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.applicantEmail = null;
		}

		vrVehicleTypeCertificateCacheModel.applicantPhone = getApplicantPhone();

		String applicantPhone = vrVehicleTypeCertificateCacheModel.applicantPhone;

		if ((applicantPhone != null) && (applicantPhone.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.applicantPhone = null;
		}

		vrVehicleTypeCertificateCacheModel.applicantFax = getApplicantFax();

		String applicantFax = vrVehicleTypeCertificateCacheModel.applicantFax;

		if ((applicantFax != null) && (applicantFax.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.applicantFax = null;
		}

		vrVehicleTypeCertificateCacheModel.applicantContactName = getApplicantContactName();

		String applicantContactName = vrVehicleTypeCertificateCacheModel.applicantContactName;

		if ((applicantContactName != null) &&
				(applicantContactName.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.applicantContactName = null;
		}

		vrVehicleTypeCertificateCacheModel.applicantContactEmail = getApplicantContactEmail();

		String applicantContactEmail = vrVehicleTypeCertificateCacheModel.applicantContactEmail;

		if ((applicantContactEmail != null) &&
				(applicantContactEmail.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.applicantContactEmail = null;
		}

		vrVehicleTypeCertificateCacheModel.applicantcontactPhone = getApplicantcontactPhone();

		String applicantcontactPhone = vrVehicleTypeCertificateCacheModel.applicantcontactPhone;

		if ((applicantcontactPhone != null) &&
				(applicantcontactPhone.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.applicantcontactPhone = null;
		}

		vrVehicleTypeCertificateCacheModel.applicantcontactTelNo = getApplicantcontactTelNo();

		String applicantcontactTelNo = vrVehicleTypeCertificateCacheModel.applicantcontactTelNo;

		if ((applicantcontactTelNo != null) &&
				(applicantcontactTelNo.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.applicantcontactTelNo = null;
		}

		vrVehicleTypeCertificateCacheModel.cityCode = getCityCode();

		String cityCode = vrVehicleTypeCertificateCacheModel.cityCode;

		if ((cityCode != null) && (cityCode.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.cityCode = null;
		}

		vrVehicleTypeCertificateCacheModel.cityName = getCityName();

		String cityName = vrVehicleTypeCertificateCacheModel.cityName;

		if ((cityName != null) && (cityName.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.cityName = null;
		}

		vrVehicleTypeCertificateCacheModel.districtCode = getDistrictCode();

		String districtCode = vrVehicleTypeCertificateCacheModel.districtCode;

		if ((districtCode != null) && (districtCode.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.districtCode = null;
		}

		vrVehicleTypeCertificateCacheModel.districtName = getDistrictName();

		String districtName = vrVehicleTypeCertificateCacheModel.districtName;

		if ((districtName != null) && (districtName.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.districtName = null;
		}

		vrVehicleTypeCertificateCacheModel.wardCode = getWardCode();

		String wardCode = vrVehicleTypeCertificateCacheModel.wardCode;

		if ((wardCode != null) && (wardCode.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.wardCode = null;
		}

		vrVehicleTypeCertificateCacheModel.wardName = getWardName();

		String wardName = vrVehicleTypeCertificateCacheModel.wardName;

		if ((wardName != null) && (wardName.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.wardName = null;
		}

		vrVehicleTypeCertificateCacheModel.manufacturerForeignCode = getManufacturerForeignCode();

		String manufacturerForeignCode = vrVehicleTypeCertificateCacheModel.manufacturerForeignCode;

		if ((manufacturerForeignCode != null) &&
				(manufacturerForeignCode.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.manufacturerForeignCode = null;
		}

		vrVehicleTypeCertificateCacheModel.manufacturerName = getManufacturerName();

		String manufacturerName = vrVehicleTypeCertificateCacheModel.manufacturerName;

		if ((manufacturerName != null) && (manufacturerName.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.manufacturerName = null;
		}

		vrVehicleTypeCertificateCacheModel.manufacturerAddress = getManufacturerAddress();

		String manufacturerAddress = vrVehicleTypeCertificateCacheModel.manufacturerAddress;

		if ((manufacturerAddress != null) &&
				(manufacturerAddress.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.manufacturerAddress = null;
		}

		vrVehicleTypeCertificateCacheModel.manufacturerRepresentative = getManufacturerRepresentative();

		String manufacturerRepresentative = vrVehicleTypeCertificateCacheModel.manufacturerRepresentative;

		if ((manufacturerRepresentative != null) &&
				(manufacturerRepresentative.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.manufacturerRepresentative = null;
		}

		vrVehicleTypeCertificateCacheModel.manufacturerRepresentativeTitle = getManufacturerRepresentativeTitle();

		String manufacturerRepresentativeTitle = vrVehicleTypeCertificateCacheModel.manufacturerRepresentativeTitle;

		if ((manufacturerRepresentativeTitle != null) &&
				(manufacturerRepresentativeTitle.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.manufacturerRepresentativeTitle = null;
		}

		vrVehicleTypeCertificateCacheModel.manufacturerEmail = getManufacturerEmail();

		String manufacturerEmail = vrVehicleTypeCertificateCacheModel.manufacturerEmail;

		if ((manufacturerEmail != null) && (manufacturerEmail.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.manufacturerEmail = null;
		}

		vrVehicleTypeCertificateCacheModel.manufacturerPhone = getManufacturerPhone();

		String manufacturerPhone = vrVehicleTypeCertificateCacheModel.manufacturerPhone;

		if ((manufacturerPhone != null) && (manufacturerPhone.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.manufacturerPhone = null;
		}

		vrVehicleTypeCertificateCacheModel.manufacturerFax = getManufacturerFax();

		String manufacturerFax = vrVehicleTypeCertificateCacheModel.manufacturerFax;

		if ((manufacturerFax != null) && (manufacturerFax.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.manufacturerFax = null;
		}

		vrVehicleTypeCertificateCacheModel.productionPlantCode = getProductionPlantCode();

		String productionPlantCode = vrVehicleTypeCertificateCacheModel.productionPlantCode;

		if ((productionPlantCode != null) &&
				(productionPlantCode.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.productionPlantCode = null;
		}

		vrVehicleTypeCertificateCacheModel.productionPlantName = getProductionPlantName();

		String productionPlantName = vrVehicleTypeCertificateCacheModel.productionPlantName;

		if ((productionPlantName != null) &&
				(productionPlantName.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.productionPlantName = null;
		}

		vrVehicleTypeCertificateCacheModel.productionPlantAddress = getProductionPlantAddress();

		String productionPlantAddress = vrVehicleTypeCertificateCacheModel.productionPlantAddress;

		if ((productionPlantAddress != null) &&
				(productionPlantAddress.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.productionPlantAddress = null;
		}

		vrVehicleTypeCertificateCacheModel.productionPlantRepresentative = getProductionPlantRepresentative();

		String productionPlantRepresentative = vrVehicleTypeCertificateCacheModel.productionPlantRepresentative;

		if ((productionPlantRepresentative != null) &&
				(productionPlantRepresentative.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.productionPlantRepresentative = null;
		}

		vrVehicleTypeCertificateCacheModel.productionPlantRepresentativeTitle = getProductionPlantRepresentativeTitle();

		String productionPlantRepresentativeTitle = vrVehicleTypeCertificateCacheModel.productionPlantRepresentativeTitle;

		if ((productionPlantRepresentativeTitle != null) &&
				(productionPlantRepresentativeTitle.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.productionPlantRepresentativeTitle = null;
		}

		vrVehicleTypeCertificateCacheModel.copReportNo = getCopReportNo();

		String copReportNo = vrVehicleTypeCertificateCacheModel.copReportNo;

		if ((copReportNo != null) && (copReportNo.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.copReportNo = null;
		}

		Date copReportDate = getCopReportDate();

		if (copReportDate != null) {
			vrVehicleTypeCertificateCacheModel.copReportDate = copReportDate.getTime();
		}
		else {
			vrVehicleTypeCertificateCacheModel.copReportDate = Long.MIN_VALUE;
		}

		Date copReportExpireDate = getCopReportExpireDate();

		if (copReportExpireDate != null) {
			vrVehicleTypeCertificateCacheModel.copReportExpireDate = copReportExpireDate.getTime();
		}
		else {
			vrVehicleTypeCertificateCacheModel.copReportExpireDate = Long.MIN_VALUE;
		}

		vrVehicleTypeCertificateCacheModel.designerCode = getDesignerCode();

		String designerCode = vrVehicleTypeCertificateCacheModel.designerCode;

		if ((designerCode != null) && (designerCode.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.designerCode = null;
		}

		vrVehicleTypeCertificateCacheModel.designerName = getDesignerName();

		String designerName = vrVehicleTypeCertificateCacheModel.designerName;

		if ((designerName != null) && (designerName.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.designerName = null;
		}

		vrVehicleTypeCertificateCacheModel.designerAddress = getDesignerAddress();

		String designerAddress = vrVehicleTypeCertificateCacheModel.designerAddress;

		if ((designerAddress != null) && (designerAddress.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.designerAddress = null;
		}

		vrVehicleTypeCertificateCacheModel.designerRepresentative = getDesignerRepresentative();

		String designerRepresentative = vrVehicleTypeCertificateCacheModel.designerRepresentative;

		if ((designerRepresentative != null) &&
				(designerRepresentative.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.designerRepresentative = null;
		}

		vrVehicleTypeCertificateCacheModel.designerRepresentativeTitle = getDesignerRepresentativeTitle();

		String designerRepresentativeTitle = vrVehicleTypeCertificateCacheModel.designerRepresentativeTitle;

		if ((designerRepresentativeTitle != null) &&
				(designerRepresentativeTitle.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.designerRepresentativeTitle = null;
		}

		vrVehicleTypeCertificateCacheModel.designerEmail = getDesignerEmail();

		String designerEmail = vrVehicleTypeCertificateCacheModel.designerEmail;

		if ((designerEmail != null) && (designerEmail.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.designerEmail = null;
		}

		vrVehicleTypeCertificateCacheModel.designerPhone = getDesignerPhone();

		String designerPhone = vrVehicleTypeCertificateCacheModel.designerPhone;

		if ((designerPhone != null) && (designerPhone.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.designerPhone = null;
		}

		vrVehicleTypeCertificateCacheModel.designerFax = getDesignerFax();

		String designerFax = vrVehicleTypeCertificateCacheModel.designerFax;

		if ((designerFax != null) && (designerFax.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.designerFax = null;
		}

		vrVehicleTypeCertificateCacheModel.verificationCertificateNo = getVerificationCertificateNo();

		String verificationCertificateNo = vrVehicleTypeCertificateCacheModel.verificationCertificateNo;

		if ((verificationCertificateNo != null) &&
				(verificationCertificateNo.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.verificationCertificateNo = null;
		}

		Date verificationCertificateDate = getVerificationCertificateDate();

		if (verificationCertificateDate != null) {
			vrVehicleTypeCertificateCacheModel.verificationCertificateDate = verificationCertificateDate.getTime();
		}
		else {
			vrVehicleTypeCertificateCacheModel.verificationCertificateDate = Long.MIN_VALUE;
		}

		vrVehicleTypeCertificateCacheModel.verificationRefNo = getVerificationRefNo();

		String verificationRefNo = vrVehicleTypeCertificateCacheModel.verificationRefNo;

		if ((verificationRefNo != null) && (verificationRefNo.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.verificationRefNo = null;
		}

		Date verificationRefDate = getVerificationRefDate();

		if (verificationRefDate != null) {
			vrVehicleTypeCertificateCacheModel.verificationRefDate = verificationRefDate.getTime();
		}
		else {
			vrVehicleTypeCertificateCacheModel.verificationRefDate = Long.MIN_VALUE;
		}

		vrVehicleTypeCertificateCacheModel.typeApprovalCertificateNo = getTypeApprovalCertificateNo();

		String typeApprovalCertificateNo = vrVehicleTypeCertificateCacheModel.typeApprovalCertificateNo;

		if ((typeApprovalCertificateNo != null) &&
				(typeApprovalCertificateNo.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.typeApprovalCertificateNo = null;
		}

		Date typeApprovalCertificateDate = getTypeApprovalCertificateDate();

		if (typeApprovalCertificateDate != null) {
			vrVehicleTypeCertificateCacheModel.typeApprovalCertificateDate = typeApprovalCertificateDate.getTime();
		}
		else {
			vrVehicleTypeCertificateCacheModel.typeApprovalCertificateDate = Long.MIN_VALUE;
		}

		vrVehicleTypeCertificateCacheModel.designModelCode = getDesignModelCode();

		String designModelCode = vrVehicleTypeCertificateCacheModel.designModelCode;

		if ((designModelCode != null) && (designModelCode.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.designModelCode = null;
		}

		vrVehicleTypeCertificateCacheModel.designModelDescription = getDesignModelDescription();

		String designModelDescription = vrVehicleTypeCertificateCacheModel.designModelDescription;

		if ((designModelDescription != null) &&
				(designModelDescription.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.designModelDescription = null;
		}

		vrVehicleTypeCertificateCacheModel.designSymbol = getDesignSymbol();

		String designSymbol = vrVehicleTypeCertificateCacheModel.designSymbol;

		if ((designSymbol != null) && (designSymbol.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.designSymbol = null;
		}

		vrVehicleTypeCertificateCacheModel.registeredNumber = getRegisteredNumber();

		String registeredNumber = vrVehicleTypeCertificateCacheModel.registeredNumber;

		if ((registeredNumber != null) && (registeredNumber.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.registeredNumber = null;
		}

		Date inspectorReceiveDate = getInspectorReceiveDate();

		if (inspectorReceiveDate != null) {
			vrVehicleTypeCertificateCacheModel.inspectorReceiveDate = inspectorReceiveDate.getTime();
		}
		else {
			vrVehicleTypeCertificateCacheModel.inspectorReceiveDate = Long.MIN_VALUE;
		}

		Date inspectorSubmitDate = getInspectorSubmitDate();

		if (inspectorSubmitDate != null) {
			vrVehicleTypeCertificateCacheModel.inspectorSubmitDate = inspectorSubmitDate.getTime();
		}
		else {
			vrVehicleTypeCertificateCacheModel.inspectorSubmitDate = Long.MIN_VALUE;
		}

		Date inspectorendorSementDate = getInspectorendorSementDate();

		if (inspectorendorSementDate != null) {
			vrVehicleTypeCertificateCacheModel.inspectorendorSementDate = inspectorendorSementDate.getTime();
		}
		else {
			vrVehicleTypeCertificateCacheModel.inspectorendorSementDate = Long.MIN_VALUE;
		}

		Date inspectorDeadline = getInspectorDeadline();

		if (inspectorDeadline != null) {
			vrVehicleTypeCertificateCacheModel.inspectorDeadline = inspectorDeadline.getTime();
		}
		else {
			vrVehicleTypeCertificateCacheModel.inspectorDeadline = Long.MIN_VALUE;
		}

		Date inspectorFinishDate = getInspectorFinishDate();

		if (inspectorFinishDate != null) {
			vrVehicleTypeCertificateCacheModel.inspectorFinishDate = inspectorFinishDate.getTime();
		}
		else {
			vrVehicleTypeCertificateCacheModel.inspectorFinishDate = Long.MIN_VALUE;
		}

		Date inspectorCancelDate = getInspectorCancelDate();

		if (inspectorCancelDate != null) {
			vrVehicleTypeCertificateCacheModel.inspectorCancelDate = inspectorCancelDate.getTime();
		}
		else {
			vrVehicleTypeCertificateCacheModel.inspectorCancelDate = Long.MIN_VALUE;
		}

		vrVehicleTypeCertificateCacheModel.inspectorOrganization = getInspectorOrganization();

		String inspectorOrganization = vrVehicleTypeCertificateCacheModel.inspectorOrganization;

		if ((inspectorOrganization != null) &&
				(inspectorOrganization.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.inspectorOrganization = null;
		}

		vrVehicleTypeCertificateCacheModel.inspectorDivision = getInspectorDivision();

		String inspectorDivision = vrVehicleTypeCertificateCacheModel.inspectorDivision;

		if ((inspectorDivision != null) && (inspectorDivision.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.inspectorDivision = null;
		}

		vrVehicleTypeCertificateCacheModel.inspectorSignName = getInspectorSignName();

		String inspectorSignName = vrVehicleTypeCertificateCacheModel.inspectorSignName;

		if ((inspectorSignName != null) && (inspectorSignName.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.inspectorSignName = null;
		}

		vrVehicleTypeCertificateCacheModel.inspectorSignTitle = getInspectorSignTitle();

		String inspectorSignTitle = vrVehicleTypeCertificateCacheModel.inspectorSignTitle;

		if ((inspectorSignTitle != null) && (inspectorSignTitle.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.inspectorSignTitle = null;
		}

		vrVehicleTypeCertificateCacheModel.inspectorSignPlace = getInspectorSignPlace();

		String inspectorSignPlace = vrVehicleTypeCertificateCacheModel.inspectorSignPlace;

		if ((inspectorSignPlace != null) && (inspectorSignPlace.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.inspectorSignPlace = null;
		}

		vrVehicleTypeCertificateCacheModel.certificateType = getCertificateType();

		String certificateType = vrVehicleTypeCertificateCacheModel.certificateType;

		if ((certificateType != null) && (certificateType.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.certificateType = null;
		}

		vrVehicleTypeCertificateCacheModel.referenceCertificateNo = getReferenceCertificateNo();

		String referenceCertificateNo = vrVehicleTypeCertificateCacheModel.referenceCertificateNo;

		if ((referenceCertificateNo != null) &&
				(referenceCertificateNo.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.referenceCertificateNo = null;
		}

		Date referenceCertificateDate = getReferenceCertificateDate();

		if (referenceCertificateDate != null) {
			vrVehicleTypeCertificateCacheModel.referenceCertificateDate = referenceCertificateDate.getTime();
		}
		else {
			vrVehicleTypeCertificateCacheModel.referenceCertificateDate = Long.MIN_VALUE;
		}

		vrVehicleTypeCertificateCacheModel.certificateRecordNo = getCertificateRecordNo();

		String certificateRecordNo = vrVehicleTypeCertificateCacheModel.certificateRecordNo;

		if ((certificateRecordNo != null) &&
				(certificateRecordNo.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.certificateRecordNo = null;
		}

		vrVehicleTypeCertificateCacheModel.certificateSignName = getCertificateSignName();

		String certificateSignName = vrVehicleTypeCertificateCacheModel.certificateSignName;

		if ((certificateSignName != null) &&
				(certificateSignName.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.certificateSignName = null;
		}

		vrVehicleTypeCertificateCacheModel.certificateSignTitle = getCertificateSignTitle();

		String certificateSignTitle = vrVehicleTypeCertificateCacheModel.certificateSignTitle;

		if ((certificateSignTitle != null) &&
				(certificateSignTitle.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.certificateSignTitle = null;
		}

		vrVehicleTypeCertificateCacheModel.certificateSignPlace = getCertificateSignPlace();

		String certificateSignPlace = vrVehicleTypeCertificateCacheModel.certificateSignPlace;

		if ((certificateSignPlace != null) &&
				(certificateSignPlace.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.certificateSignPlace = null;
		}

		Date certificateRecordDate = getCertificateRecordDate();

		if (certificateRecordDate != null) {
			vrVehicleTypeCertificateCacheModel.certificateRecordDate = certificateRecordDate.getTime();
		}
		else {
			vrVehicleTypeCertificateCacheModel.certificateRecordDate = Long.MIN_VALUE;
		}

		Date certificateRecordExpireDate = getCertificateRecordExpireDate();

		if (certificateRecordExpireDate != null) {
			vrVehicleTypeCertificateCacheModel.certificateRecordExpireDate = certificateRecordExpireDate.getTime();
		}
		else {
			vrVehicleTypeCertificateCacheModel.certificateRecordExpireDate = Long.MIN_VALUE;
		}

		vrVehicleTypeCertificateCacheModel.expiredStatus = getExpiredStatus();

		String expiredStatus = vrVehicleTypeCertificateCacheModel.expiredStatus;

		if ((expiredStatus != null) && (expiredStatus.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.expiredStatus = null;
		}

		vrVehicleTypeCertificateCacheModel.certificateRecordStatus = getCertificateRecordStatus();

		String certificateRecordStatus = vrVehicleTypeCertificateCacheModel.certificateRecordStatus;

		if ((certificateRecordStatus != null) &&
				(certificateRecordStatus.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.certificateRecordStatus = null;
		}

		vrVehicleTypeCertificateCacheModel.digitalIssueStatus = getDigitalIssueStatus();

		String digitalIssueStatus = vrVehicleTypeCertificateCacheModel.digitalIssueStatus;

		if ((digitalIssueStatus != null) && (digitalIssueStatus.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.digitalIssueStatus = null;
		}

		vrVehicleTypeCertificateCacheModel.vehicleClass = getVehicleClass();

		String vehicleClass = vrVehicleTypeCertificateCacheModel.vehicleClass;

		if ((vehicleClass != null) && (vehicleClass.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.vehicleClass = null;
		}

		vrVehicleTypeCertificateCacheModel.certifiedVehicleType = getCertifiedVehicleType();

		String certifiedVehicleType = vrVehicleTypeCertificateCacheModel.certifiedVehicleType;

		if ((certifiedVehicleType != null) &&
				(certifiedVehicleType.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.certifiedVehicleType = null;
		}

		vrVehicleTypeCertificateCacheModel.certifiedVehicleTypeDescription = getCertifiedVehicleTypeDescription();

		String certifiedVehicleTypeDescription = vrVehicleTypeCertificateCacheModel.certifiedVehicleTypeDescription;

		if ((certifiedVehicleTypeDescription != null) &&
				(certifiedVehicleTypeDescription.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.certifiedVehicleTypeDescription = null;
		}

		vrVehicleTypeCertificateCacheModel.certifiedTrademark = getCertifiedTrademark();

		String certifiedTrademark = vrVehicleTypeCertificateCacheModel.certifiedTrademark;

		if ((certifiedTrademark != null) && (certifiedTrademark.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.certifiedTrademark = null;
		}

		vrVehicleTypeCertificateCacheModel.certifiedTrademarkName = getCertifiedTrademarkName();

		String certifiedTrademarkName = vrVehicleTypeCertificateCacheModel.certifiedTrademarkName;

		if ((certifiedTrademarkName != null) &&
				(certifiedTrademarkName.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.certifiedTrademarkName = null;
		}

		vrVehicleTypeCertificateCacheModel.certifiedCommercialName = getCertifiedCommercialName();

		String certifiedCommercialName = vrVehicleTypeCertificateCacheModel.certifiedCommercialName;

		if ((certifiedCommercialName != null) &&
				(certifiedCommercialName.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.certifiedCommercialName = null;
		}

		vrVehicleTypeCertificateCacheModel.certifiedModelCode = getCertifiedModelCode();

		String certifiedModelCode = vrVehicleTypeCertificateCacheModel.certifiedModelCode;

		if ((certifiedModelCode != null) && (certifiedModelCode.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.certifiedModelCode = null;
		}

		vrVehicleTypeCertificateCacheModel.certifiedAssemblyType = getCertifiedAssemblyType();

		String certifiedAssemblyType = vrVehicleTypeCertificateCacheModel.certifiedAssemblyType;

		if ((certifiedAssemblyType != null) &&
				(certifiedAssemblyType.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.certifiedAssemblyType = null;
		}

		vrVehicleTypeCertificateCacheModel.certifiedAssemblyTypeDescription = getCertifiedAssemblyTypeDescription();

		String certifiedAssemblyTypeDescription = vrVehicleTypeCertificateCacheModel.certifiedAssemblyTypeDescription;

		if ((certifiedAssemblyTypeDescription != null) &&
				(certifiedAssemblyTypeDescription.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.certifiedAssemblyTypeDescription = null;
		}

		vrVehicleTypeCertificateCacheModel.certifiedVINNo = getCertifiedVINNo();

		String certifiedVINNo = vrVehicleTypeCertificateCacheModel.certifiedVINNo;

		if ((certifiedVINNo != null) && (certifiedVINNo.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.certifiedVINNo = null;
		}

		vrVehicleTypeCertificateCacheModel.certifiedVINPosition = getCertifiedVINPosition();

		String certifiedVINPosition = vrVehicleTypeCertificateCacheModel.certifiedVINPosition;

		if ((certifiedVINPosition != null) &&
				(certifiedVINPosition.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.certifiedVINPosition = null;
		}

		vrVehicleTypeCertificateCacheModel.certifiedFrameNo = getCertifiedFrameNo();

		String certifiedFrameNo = vrVehicleTypeCertificateCacheModel.certifiedFrameNo;

		if ((certifiedFrameNo != null) && (certifiedFrameNo.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.certifiedFrameNo = null;
		}

		vrVehicleTypeCertificateCacheModel.certifiedFrameAttachPlace = getCertifiedFrameAttachPlace();

		String certifiedFrameAttachPlace = vrVehicleTypeCertificateCacheModel.certifiedFrameAttachPlace;

		if ((certifiedFrameAttachPlace != null) &&
				(certifiedFrameAttachPlace.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.certifiedFrameAttachPlace = null;
		}

		vrVehicleTypeCertificateCacheModel.certifiedFramePosition = getCertifiedFramePosition();

		String certifiedFramePosition = vrVehicleTypeCertificateCacheModel.certifiedFramePosition;

		if ((certifiedFramePosition != null) &&
				(certifiedFramePosition.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.certifiedFramePosition = null;
		}

		vrVehicleTypeCertificateCacheModel.certifiedEngineNo = getCertifiedEngineNo();

		String certifiedEngineNo = vrVehicleTypeCertificateCacheModel.certifiedEngineNo;

		if ((certifiedEngineNo != null) && (certifiedEngineNo.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.certifiedEngineNo = null;
		}

		vrVehicleTypeCertificateCacheModel.certifiedEngineAttachPlace = getCertifiedEngineAttachPlace();

		String certifiedEngineAttachPlace = vrVehicleTypeCertificateCacheModel.certifiedEngineAttachPlace;

		if ((certifiedEngineAttachPlace != null) &&
				(certifiedEngineAttachPlace.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.certifiedEngineAttachPlace = null;
		}

		vrVehicleTypeCertificateCacheModel.certifiedEnginePosition = getCertifiedEnginePosition();

		String certifiedEnginePosition = vrVehicleTypeCertificateCacheModel.certifiedEnginePosition;

		if ((certifiedEnginePosition != null) &&
				(certifiedEnginePosition.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.certifiedEnginePosition = null;
		}

		vrVehicleTypeCertificateCacheModel.safetyTestReportNo = getSafetyTestReportNo();

		String safetyTestReportNo = vrVehicleTypeCertificateCacheModel.safetyTestReportNo;

		if ((safetyTestReportNo != null) && (safetyTestReportNo.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.safetyTestReportNo = null;
		}

		Date safetyTestReportDate = getSafetyTestReportDate();

		if (safetyTestReportDate != null) {
			vrVehicleTypeCertificateCacheModel.safetyTestReportDate = safetyTestReportDate.getTime();
		}
		else {
			vrVehicleTypeCertificateCacheModel.safetyTestReportDate = Long.MIN_VALUE;
		}

		vrVehicleTypeCertificateCacheModel.emissionTestReportNo = getEmissionTestReportNo();

		String emissionTestReportNo = vrVehicleTypeCertificateCacheModel.emissionTestReportNo;

		if ((emissionTestReportNo != null) &&
				(emissionTestReportNo.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.emissionTestReportNo = null;
		}

		Date emissionTestReportDate = getEmissionTestReportDate();

		if (emissionTestReportDate != null) {
			vrVehicleTypeCertificateCacheModel.emissionTestReportDate = emissionTestReportDate.getTime();
		}
		else {
			vrVehicleTypeCertificateCacheModel.emissionTestReportDate = Long.MIN_VALUE;
		}

		vrVehicleTypeCertificateCacheModel.commonSafetyStandard = getCommonSafetyStandard();

		String commonSafetyStandard = vrVehicleTypeCertificateCacheModel.commonSafetyStandard;

		if ((commonSafetyStandard != null) &&
				(commonSafetyStandard.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.commonSafetyStandard = null;
		}

		vrVehicleTypeCertificateCacheModel.commonSafetyDescription = getCommonSafetyDescription();

		String commonSafetyDescription = vrVehicleTypeCertificateCacheModel.commonSafetyDescription;

		if ((commonSafetyDescription != null) &&
				(commonSafetyDescription.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.commonSafetyDescription = null;
		}

		vrVehicleTypeCertificateCacheModel.emissionStandard = getEmissionStandard();

		String emissionStandard = vrVehicleTypeCertificateCacheModel.emissionStandard;

		if ((emissionStandard != null) && (emissionStandard.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.emissionStandard = null;
		}

		vrVehicleTypeCertificateCacheModel.emissionDescription = getEmissionDescription();

		String emissionDescription = vrVehicleTypeCertificateCacheModel.emissionDescription;

		if ((emissionDescription != null) &&
				(emissionDescription.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.emissionDescription = null;
		}

		vrVehicleTypeCertificateCacheModel.otherTestReportNo = getOtherTestReportNo();

		String otherTestReportNo = vrVehicleTypeCertificateCacheModel.otherTestReportNo;

		if ((otherTestReportNo != null) && (otherTestReportNo.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.otherTestReportNo = null;
		}

		Date otherTestReportDate = getOtherTestReportDate();

		if (otherTestReportDate != null) {
			vrVehicleTypeCertificateCacheModel.otherTestReportDate = otherTestReportDate.getTime();
		}
		else {
			vrVehicleTypeCertificateCacheModel.otherTestReportDate = Long.MIN_VALUE;
		}

		vrVehicleTypeCertificateCacheModel.sampleFrameNo = getSampleFrameNo();

		String sampleFrameNo = vrVehicleTypeCertificateCacheModel.sampleFrameNo;

		if ((sampleFrameNo != null) && (sampleFrameNo.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.sampleFrameNo = null;
		}

		vrVehicleTypeCertificateCacheModel.sampleVINNo = getSampleVINNo();

		String sampleVINNo = vrVehicleTypeCertificateCacheModel.sampleVINNo;

		if ((sampleVINNo != null) && (sampleVINNo.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.sampleVINNo = null;
		}

		vrVehicleTypeCertificateCacheModel.sampleEngineNo = getSampleEngineNo();

		String sampleEngineNo = vrVehicleTypeCertificateCacheModel.sampleEngineNo;

		if ((sampleEngineNo != null) && (sampleEngineNo.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.sampleEngineNo = null;
		}

		vrVehicleTypeCertificateCacheModel.sampleVehicleType = getSampleVehicleType();

		String sampleVehicleType = vrVehicleTypeCertificateCacheModel.sampleVehicleType;

		if ((sampleVehicleType != null) && (sampleVehicleType.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.sampleVehicleType = null;
		}

		vrVehicleTypeCertificateCacheModel.sampleVehicleTypeDescription = getSampleVehicleTypeDescription();

		String sampleVehicleTypeDescription = vrVehicleTypeCertificateCacheModel.sampleVehicleTypeDescription;

		if ((sampleVehicleTypeDescription != null) &&
				(sampleVehicleTypeDescription.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.sampleVehicleTypeDescription = null;
		}

		vrVehicleTypeCertificateCacheModel.sampleTrademark = getSampleTrademark();

		String sampleTrademark = vrVehicleTypeCertificateCacheModel.sampleTrademark;

		if ((sampleTrademark != null) && (sampleTrademark.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.sampleTrademark = null;
		}

		vrVehicleTypeCertificateCacheModel.sampleTrademarkName = getSampleTrademarkName();

		String sampleTrademarkName = vrVehicleTypeCertificateCacheModel.sampleTrademarkName;

		if ((sampleTrademarkName != null) &&
				(sampleTrademarkName.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.sampleTrademarkName = null;
		}

		vrVehicleTypeCertificateCacheModel.sampleCommercialName = getSampleCommercialName();

		String sampleCommercialName = vrVehicleTypeCertificateCacheModel.sampleCommercialName;

		if ((sampleCommercialName != null) &&
				(sampleCommercialName.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.sampleCommercialName = null;
		}

		vrVehicleTypeCertificateCacheModel.sampleModelCode = getSampleModelCode();

		String sampleModelCode = vrVehicleTypeCertificateCacheModel.sampleModelCode;

		if ((sampleModelCode != null) && (sampleModelCode.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.sampleModelCode = null;
		}

		vrVehicleTypeCertificateCacheModel.customsDeclarationNo = getCustomsDeclarationNo();

		String customsDeclarationNo = vrVehicleTypeCertificateCacheModel.customsDeclarationNo;

		if ((customsDeclarationNo != null) &&
				(customsDeclarationNo.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.customsDeclarationNo = null;
		}

		Date customsDeclarationDate = getCustomsDeclarationDate();

		if (customsDeclarationDate != null) {
			vrVehicleTypeCertificateCacheModel.customsDeclarationDate = customsDeclarationDate.getTime();
		}
		else {
			vrVehicleTypeCertificateCacheModel.customsDeclarationDate = Long.MIN_VALUE;
		}

		vrVehicleTypeCertificateCacheModel.productionCountry = getProductionCountry();

		String productionCountry = vrVehicleTypeCertificateCacheModel.productionCountry;

		if ((productionCountry != null) && (productionCountry.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.productionCountry = null;
		}

		vrVehicleTypeCertificateCacheModel.importerQuantity = getImporterQuantity();

		vrVehicleTypeCertificateCacheModel.inspectionRecordNo = getInspectionRecordNo();

		String inspectionRecordNo = vrVehicleTypeCertificateCacheModel.inspectionRecordNo;

		if ((inspectionRecordNo != null) && (inspectionRecordNo.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.inspectionRecordNo = null;
		}

		Date inspectionDate = getInspectionDate();

		if (inspectionDate != null) {
			vrVehicleTypeCertificateCacheModel.inspectionDate = inspectionDate.getTime();
		}
		else {
			vrVehicleTypeCertificateCacheModel.inspectionDate = Long.MIN_VALUE;
		}

		vrVehicleTypeCertificateCacheModel.inspectionSite = getInspectionSite();

		String inspectionSite = vrVehicleTypeCertificateCacheModel.inspectionSite;

		if ((inspectionSite != null) && (inspectionSite.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.inspectionSite = null;
		}

		vrVehicleTypeCertificateCacheModel.inspectionDistrictCode = getInspectionDistrictCode();

		String inspectionDistrictCode = vrVehicleTypeCertificateCacheModel.inspectionDistrictCode;

		if ((inspectionDistrictCode != null) &&
				(inspectionDistrictCode.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.inspectionDistrictCode = null;
		}

		vrVehicleTypeCertificateCacheModel.inspectionDistrictName = getInspectionDistrictName();

		String inspectionDistrictName = vrVehicleTypeCertificateCacheModel.inspectionDistrictName;

		if ((inspectionDistrictName != null) &&
				(inspectionDistrictName.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.inspectionDistrictName = null;
		}

		vrVehicleTypeCertificateCacheModel.inspectionProvinceCode = getInspectionProvinceCode();

		String inspectionProvinceCode = vrVehicleTypeCertificateCacheModel.inspectionProvinceCode;

		if ((inspectionProvinceCode != null) &&
				(inspectionProvinceCode.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.inspectionProvinceCode = null;
		}

		vrVehicleTypeCertificateCacheModel.inspectionProvinceName = getInspectionProvinceName();

		String inspectionProvinceName = vrVehicleTypeCertificateCacheModel.inspectionProvinceName;

		if ((inspectionProvinceName != null) &&
				(inspectionProvinceName.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.inspectionProvinceName = null;
		}

		vrVehicleTypeCertificateCacheModel.corporationId = getCorporationId();

		String corporationId = vrVehicleTypeCertificateCacheModel.corporationId;

		if ((corporationId != null) && (corporationId.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.corporationId = null;
		}

		vrVehicleTypeCertificateCacheModel.inspectorId = getInspectorId();

		vrVehicleTypeCertificateCacheModel.remarks = getRemarks();

		String remarks = vrVehicleTypeCertificateCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.remarks = null;
		}

		vrVehicleTypeCertificateCacheModel.inspectionNote = getInspectionNote();

		String inspectionNote = vrVehicleTypeCertificateCacheModel.inspectionNote;

		if ((inspectionNote != null) && (inspectionNote.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.inspectionNote = null;
		}

		vrVehicleTypeCertificateCacheModel.certificateNote = getCertificateNote();

		String certificateNote = vrVehicleTypeCertificateCacheModel.certificateNote;

		if ((certificateNote != null) && (certificateNote.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.certificateNote = null;
		}

		vrVehicleTypeCertificateCacheModel.deliverableCode = getDeliverableCode();

		String deliverableCode = vrVehicleTypeCertificateCacheModel.deliverableCode;

		if ((deliverableCode != null) && (deliverableCode.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.deliverableCode = null;
		}

		vrVehicleTypeCertificateCacheModel.deliverableFileEntryid = getDeliverableFileEntryid();

		vrVehicleTypeCertificateCacheModel.module = getModule();

		String module = vrVehicleTypeCertificateCacheModel.module;

		if ((module != null) && (module.length() == 0)) {
			vrVehicleTypeCertificateCacheModel.module = null;
		}

		Date modifyDate = getModifyDate();

		if (modifyDate != null) {
			vrVehicleTypeCertificateCacheModel.modifyDate = modifyDate.getTime();
		}
		else {
			vrVehicleTypeCertificateCacheModel.modifyDate = Long.MIN_VALUE;
		}

		Date syncDate = getSyncDate();

		if (syncDate != null) {
			vrVehicleTypeCertificateCacheModel.syncDate = syncDate.getTime();
		}
		else {
			vrVehicleTypeCertificateCacheModel.syncDate = Long.MIN_VALUE;
		}

		return vrVehicleTypeCertificateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(289);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", mtCore=");
		sb.append(getMtCore());
		sb.append(", dossierId=");
		sb.append(getDossierId());
		sb.append(", dossierIdCTN=");
		sb.append(getDossierIdCTN());
		sb.append(", dossierType=");
		sb.append(getDossierType());
		sb.append(", dossierNo=");
		sb.append(getDossierNo());
		sb.append(", referenceUid=");
		sb.append(getReferenceUid());
		sb.append(", serviceCode=");
		sb.append(getServiceCode());
		sb.append(", serviceName=");
		sb.append(getServiceName());
		sb.append(", convertassembleId=");
		sb.append(getConvertassembleId());
		sb.append(", applicantIdNo=");
		sb.append(getApplicantIdNo());
		sb.append(", applicantTelNo=");
		sb.append(getApplicantTelNo());
		sb.append(", applicantName=");
		sb.append(getApplicantName());
		sb.append(", applicantIdDate=");
		sb.append(getApplicantIdDate());
		sb.append(", applicantAddress=");
		sb.append(getApplicantAddress());
		sb.append(", applicantRepresentative=");
		sb.append(getApplicantRepresentative());
		sb.append(", applicantRepresentativeTitle=");
		sb.append(getApplicantRepresentativeTitle());
		sb.append(", applicantEmail=");
		sb.append(getApplicantEmail());
		sb.append(", applicantPhone=");
		sb.append(getApplicantPhone());
		sb.append(", applicantFax=");
		sb.append(getApplicantFax());
		sb.append(", applicantContactName=");
		sb.append(getApplicantContactName());
		sb.append(", applicantContactEmail=");
		sb.append(getApplicantContactEmail());
		sb.append(", applicantcontactPhone=");
		sb.append(getApplicantcontactPhone());
		sb.append(", applicantcontactTelNo=");
		sb.append(getApplicantcontactTelNo());
		sb.append(", cityCode=");
		sb.append(getCityCode());
		sb.append(", cityName=");
		sb.append(getCityName());
		sb.append(", districtCode=");
		sb.append(getDistrictCode());
		sb.append(", districtName=");
		sb.append(getDistrictName());
		sb.append(", wardCode=");
		sb.append(getWardCode());
		sb.append(", wardName=");
		sb.append(getWardName());
		sb.append(", manufacturerForeignCode=");
		sb.append(getManufacturerForeignCode());
		sb.append(", manufacturerName=");
		sb.append(getManufacturerName());
		sb.append(", manufacturerAddress=");
		sb.append(getManufacturerAddress());
		sb.append(", manufacturerRepresentative=");
		sb.append(getManufacturerRepresentative());
		sb.append(", manufacturerRepresentativeTitle=");
		sb.append(getManufacturerRepresentativeTitle());
		sb.append(", manufacturerEmail=");
		sb.append(getManufacturerEmail());
		sb.append(", manufacturerPhone=");
		sb.append(getManufacturerPhone());
		sb.append(", manufacturerFax=");
		sb.append(getManufacturerFax());
		sb.append(", productionPlantCode=");
		sb.append(getProductionPlantCode());
		sb.append(", productionPlantName=");
		sb.append(getProductionPlantName());
		sb.append(", productionPlantAddress=");
		sb.append(getProductionPlantAddress());
		sb.append(", productionPlantRepresentative=");
		sb.append(getProductionPlantRepresentative());
		sb.append(", productionPlantRepresentativeTitle=");
		sb.append(getProductionPlantRepresentativeTitle());
		sb.append(", copReportNo=");
		sb.append(getCopReportNo());
		sb.append(", copReportDate=");
		sb.append(getCopReportDate());
		sb.append(", copReportExpireDate=");
		sb.append(getCopReportExpireDate());
		sb.append(", designerCode=");
		sb.append(getDesignerCode());
		sb.append(", designerName=");
		sb.append(getDesignerName());
		sb.append(", designerAddress=");
		sb.append(getDesignerAddress());
		sb.append(", designerRepresentative=");
		sb.append(getDesignerRepresentative());
		sb.append(", designerRepresentativeTitle=");
		sb.append(getDesignerRepresentativeTitle());
		sb.append(", designerEmail=");
		sb.append(getDesignerEmail());
		sb.append(", designerPhone=");
		sb.append(getDesignerPhone());
		sb.append(", designerFax=");
		sb.append(getDesignerFax());
		sb.append(", verificationCertificateNo=");
		sb.append(getVerificationCertificateNo());
		sb.append(", verificationCertificateDate=");
		sb.append(getVerificationCertificateDate());
		sb.append(", verificationRefNo=");
		sb.append(getVerificationRefNo());
		sb.append(", verificationRefDate=");
		sb.append(getVerificationRefDate());
		sb.append(", typeApprovalCertificateNo=");
		sb.append(getTypeApprovalCertificateNo());
		sb.append(", typeApprovalCertificateDate=");
		sb.append(getTypeApprovalCertificateDate());
		sb.append(", designModelCode=");
		sb.append(getDesignModelCode());
		sb.append(", designModelDescription=");
		sb.append(getDesignModelDescription());
		sb.append(", designSymbol=");
		sb.append(getDesignSymbol());
		sb.append(", registeredNumber=");
		sb.append(getRegisteredNumber());
		sb.append(", inspectorReceiveDate=");
		sb.append(getInspectorReceiveDate());
		sb.append(", inspectorSubmitDate=");
		sb.append(getInspectorSubmitDate());
		sb.append(", inspectorendorSementDate=");
		sb.append(getInspectorendorSementDate());
		sb.append(", inspectorDeadline=");
		sb.append(getInspectorDeadline());
		sb.append(", inspectorFinishDate=");
		sb.append(getInspectorFinishDate());
		sb.append(", inspectorCancelDate=");
		sb.append(getInspectorCancelDate());
		sb.append(", inspectorOrganization=");
		sb.append(getInspectorOrganization());
		sb.append(", inspectorDivision=");
		sb.append(getInspectorDivision());
		sb.append(", inspectorSignName=");
		sb.append(getInspectorSignName());
		sb.append(", inspectorSignTitle=");
		sb.append(getInspectorSignTitle());
		sb.append(", inspectorSignPlace=");
		sb.append(getInspectorSignPlace());
		sb.append(", certificateType=");
		sb.append(getCertificateType());
		sb.append(", referenceCertificateNo=");
		sb.append(getReferenceCertificateNo());
		sb.append(", referenceCertificateDate=");
		sb.append(getReferenceCertificateDate());
		sb.append(", certificateRecordNo=");
		sb.append(getCertificateRecordNo());
		sb.append(", certificateSignName=");
		sb.append(getCertificateSignName());
		sb.append(", certificateSignTitle=");
		sb.append(getCertificateSignTitle());
		sb.append(", certificateSignPlace=");
		sb.append(getCertificateSignPlace());
		sb.append(", certificateRecordDate=");
		sb.append(getCertificateRecordDate());
		sb.append(", certificateRecordExpireDate=");
		sb.append(getCertificateRecordExpireDate());
		sb.append(", expiredStatus=");
		sb.append(getExpiredStatus());
		sb.append(", certificateRecordStatus=");
		sb.append(getCertificateRecordStatus());
		sb.append(", digitalIssueStatus=");
		sb.append(getDigitalIssueStatus());
		sb.append(", vehicleClass=");
		sb.append(getVehicleClass());
		sb.append(", certifiedVehicleType=");
		sb.append(getCertifiedVehicleType());
		sb.append(", certifiedVehicleTypeDescription=");
		sb.append(getCertifiedVehicleTypeDescription());
		sb.append(", certifiedTrademark=");
		sb.append(getCertifiedTrademark());
		sb.append(", certifiedTrademarkName=");
		sb.append(getCertifiedTrademarkName());
		sb.append(", certifiedCommercialName=");
		sb.append(getCertifiedCommercialName());
		sb.append(", certifiedModelCode=");
		sb.append(getCertifiedModelCode());
		sb.append(", certifiedAssemblyType=");
		sb.append(getCertifiedAssemblyType());
		sb.append(", certifiedAssemblyTypeDescription=");
		sb.append(getCertifiedAssemblyTypeDescription());
		sb.append(", certifiedVINNo=");
		sb.append(getCertifiedVINNo());
		sb.append(", certifiedVINPosition=");
		sb.append(getCertifiedVINPosition());
		sb.append(", certifiedFrameNo=");
		sb.append(getCertifiedFrameNo());
		sb.append(", certifiedFrameAttachPlace=");
		sb.append(getCertifiedFrameAttachPlace());
		sb.append(", certifiedFramePosition=");
		sb.append(getCertifiedFramePosition());
		sb.append(", certifiedEngineNo=");
		sb.append(getCertifiedEngineNo());
		sb.append(", certifiedEngineAttachPlace=");
		sb.append(getCertifiedEngineAttachPlace());
		sb.append(", certifiedEnginePosition=");
		sb.append(getCertifiedEnginePosition());
		sb.append(", safetyTestReportNo=");
		sb.append(getSafetyTestReportNo());
		sb.append(", safetyTestReportDate=");
		sb.append(getSafetyTestReportDate());
		sb.append(", emissionTestReportNo=");
		sb.append(getEmissionTestReportNo());
		sb.append(", emissionTestReportDate=");
		sb.append(getEmissionTestReportDate());
		sb.append(", commonSafetyStandard=");
		sb.append(getCommonSafetyStandard());
		sb.append(", commonSafetyDescription=");
		sb.append(getCommonSafetyDescription());
		sb.append(", emissionStandard=");
		sb.append(getEmissionStandard());
		sb.append(", emissionDescription=");
		sb.append(getEmissionDescription());
		sb.append(", otherTestReportNo=");
		sb.append(getOtherTestReportNo());
		sb.append(", otherTestReportDate=");
		sb.append(getOtherTestReportDate());
		sb.append(", sampleFrameNo=");
		sb.append(getSampleFrameNo());
		sb.append(", sampleVINNo=");
		sb.append(getSampleVINNo());
		sb.append(", sampleEngineNo=");
		sb.append(getSampleEngineNo());
		sb.append(", sampleVehicleType=");
		sb.append(getSampleVehicleType());
		sb.append(", sampleVehicleTypeDescription=");
		sb.append(getSampleVehicleTypeDescription());
		sb.append(", sampleTrademark=");
		sb.append(getSampleTrademark());
		sb.append(", sampleTrademarkName=");
		sb.append(getSampleTrademarkName());
		sb.append(", sampleCommercialName=");
		sb.append(getSampleCommercialName());
		sb.append(", sampleModelCode=");
		sb.append(getSampleModelCode());
		sb.append(", customsDeclarationNo=");
		sb.append(getCustomsDeclarationNo());
		sb.append(", customsDeclarationDate=");
		sb.append(getCustomsDeclarationDate());
		sb.append(", productionCountry=");
		sb.append(getProductionCountry());
		sb.append(", importerQuantity=");
		sb.append(getImporterQuantity());
		sb.append(", inspectionRecordNo=");
		sb.append(getInspectionRecordNo());
		sb.append(", inspectionDate=");
		sb.append(getInspectionDate());
		sb.append(", inspectionSite=");
		sb.append(getInspectionSite());
		sb.append(", inspectionDistrictCode=");
		sb.append(getInspectionDistrictCode());
		sb.append(", inspectionDistrictName=");
		sb.append(getInspectionDistrictName());
		sb.append(", inspectionProvinceCode=");
		sb.append(getInspectionProvinceCode());
		sb.append(", inspectionProvinceName=");
		sb.append(getInspectionProvinceName());
		sb.append(", corporationId=");
		sb.append(getCorporationId());
		sb.append(", inspectorId=");
		sb.append(getInspectorId());
		sb.append(", remarks=");
		sb.append(getRemarks());
		sb.append(", inspectionNote=");
		sb.append(getInspectionNote());
		sb.append(", certificateNote=");
		sb.append(getCertificateNote());
		sb.append(", deliverableCode=");
		sb.append(getDeliverableCode());
		sb.append(", deliverableFileEntryid=");
		sb.append(getDeliverableFileEntryid());
		sb.append(", module=");
		sb.append(getModule());
		sb.append(", modifyDate=");
		sb.append(getModifyDate());
		sb.append(", syncDate=");
		sb.append(getSyncDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(436);

		sb.append("<model><model-name>");
		sb.append("com.fds.vr.business.model.VRVehicleTypeCertificate");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mtCore</column-name><column-value><![CDATA[");
		sb.append(getMtCore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierId</column-name><column-value><![CDATA[");
		sb.append(getDossierId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierIdCTN</column-name><column-value><![CDATA[");
		sb.append(getDossierIdCTN());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierType</column-name><column-value><![CDATA[");
		sb.append(getDossierType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierNo</column-name><column-value><![CDATA[");
		sb.append(getDossierNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>referenceUid</column-name><column-value><![CDATA[");
		sb.append(getReferenceUid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serviceCode</column-name><column-value><![CDATA[");
		sb.append(getServiceCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serviceName</column-name><column-value><![CDATA[");
		sb.append(getServiceName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>convertassembleId</column-name><column-value><![CDATA[");
		sb.append(getConvertassembleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantIdNo</column-name><column-value><![CDATA[");
		sb.append(getApplicantIdNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantTelNo</column-name><column-value><![CDATA[");
		sb.append(getApplicantTelNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantName</column-name><column-value><![CDATA[");
		sb.append(getApplicantName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantIdDate</column-name><column-value><![CDATA[");
		sb.append(getApplicantIdDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantAddress</column-name><column-value><![CDATA[");
		sb.append(getApplicantAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantRepresentative</column-name><column-value><![CDATA[");
		sb.append(getApplicantRepresentative());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantRepresentativeTitle</column-name><column-value><![CDATA[");
		sb.append(getApplicantRepresentativeTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantEmail</column-name><column-value><![CDATA[");
		sb.append(getApplicantEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantPhone</column-name><column-value><![CDATA[");
		sb.append(getApplicantPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantFax</column-name><column-value><![CDATA[");
		sb.append(getApplicantFax());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantContactName</column-name><column-value><![CDATA[");
		sb.append(getApplicantContactName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantContactEmail</column-name><column-value><![CDATA[");
		sb.append(getApplicantContactEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantcontactPhone</column-name><column-value><![CDATA[");
		sb.append(getApplicantcontactPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantcontactTelNo</column-name><column-value><![CDATA[");
		sb.append(getApplicantcontactTelNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cityCode</column-name><column-value><![CDATA[");
		sb.append(getCityCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cityName</column-name><column-value><![CDATA[");
		sb.append(getCityName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>districtCode</column-name><column-value><![CDATA[");
		sb.append(getDistrictCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>districtName</column-name><column-value><![CDATA[");
		sb.append(getDistrictName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>wardCode</column-name><column-value><![CDATA[");
		sb.append(getWardCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>wardName</column-name><column-value><![CDATA[");
		sb.append(getWardName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manufacturerForeignCode</column-name><column-value><![CDATA[");
		sb.append(getManufacturerForeignCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manufacturerName</column-name><column-value><![CDATA[");
		sb.append(getManufacturerName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manufacturerAddress</column-name><column-value><![CDATA[");
		sb.append(getManufacturerAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manufacturerRepresentative</column-name><column-value><![CDATA[");
		sb.append(getManufacturerRepresentative());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manufacturerRepresentativeTitle</column-name><column-value><![CDATA[");
		sb.append(getManufacturerRepresentativeTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manufacturerEmail</column-name><column-value><![CDATA[");
		sb.append(getManufacturerEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manufacturerPhone</column-name><column-value><![CDATA[");
		sb.append(getManufacturerPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manufacturerFax</column-name><column-value><![CDATA[");
		sb.append(getManufacturerFax());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantCode</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantName</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantAddress</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantRepresentative</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantRepresentative());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantRepresentativeTitle</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantRepresentativeTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportNo</column-name><column-value><![CDATA[");
		sb.append(getCopReportNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportDate</column-name><column-value><![CDATA[");
		sb.append(getCopReportDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportExpireDate</column-name><column-value><![CDATA[");
		sb.append(getCopReportExpireDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>designerCode</column-name><column-value><![CDATA[");
		sb.append(getDesignerCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>designerName</column-name><column-value><![CDATA[");
		sb.append(getDesignerName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>designerAddress</column-name><column-value><![CDATA[");
		sb.append(getDesignerAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>designerRepresentative</column-name><column-value><![CDATA[");
		sb.append(getDesignerRepresentative());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>designerRepresentativeTitle</column-name><column-value><![CDATA[");
		sb.append(getDesignerRepresentativeTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>designerEmail</column-name><column-value><![CDATA[");
		sb.append(getDesignerEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>designerPhone</column-name><column-value><![CDATA[");
		sb.append(getDesignerPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>designerFax</column-name><column-value><![CDATA[");
		sb.append(getDesignerFax());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>verificationCertificateNo</column-name><column-value><![CDATA[");
		sb.append(getVerificationCertificateNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>verificationCertificateDate</column-name><column-value><![CDATA[");
		sb.append(getVerificationCertificateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>verificationRefNo</column-name><column-value><![CDATA[");
		sb.append(getVerificationRefNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>verificationRefDate</column-name><column-value><![CDATA[");
		sb.append(getVerificationRefDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeApprovalCertificateNo</column-name><column-value><![CDATA[");
		sb.append(getTypeApprovalCertificateNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeApprovalCertificateDate</column-name><column-value><![CDATA[");
		sb.append(getTypeApprovalCertificateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>designModelCode</column-name><column-value><![CDATA[");
		sb.append(getDesignModelCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>designModelDescription</column-name><column-value><![CDATA[");
		sb.append(getDesignModelDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>designSymbol</column-name><column-value><![CDATA[");
		sb.append(getDesignSymbol());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registeredNumber</column-name><column-value><![CDATA[");
		sb.append(getRegisteredNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorReceiveDate</column-name><column-value><![CDATA[");
		sb.append(getInspectorReceiveDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorSubmitDate</column-name><column-value><![CDATA[");
		sb.append(getInspectorSubmitDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorendorSementDate</column-name><column-value><![CDATA[");
		sb.append(getInspectorendorSementDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorDeadline</column-name><column-value><![CDATA[");
		sb.append(getInspectorDeadline());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorFinishDate</column-name><column-value><![CDATA[");
		sb.append(getInspectorFinishDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorCancelDate</column-name><column-value><![CDATA[");
		sb.append(getInspectorCancelDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorOrganization</column-name><column-value><![CDATA[");
		sb.append(getInspectorOrganization());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorDivision</column-name><column-value><![CDATA[");
		sb.append(getInspectorDivision());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorSignName</column-name><column-value><![CDATA[");
		sb.append(getInspectorSignName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorSignTitle</column-name><column-value><![CDATA[");
		sb.append(getInspectorSignTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorSignPlace</column-name><column-value><![CDATA[");
		sb.append(getInspectorSignPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateType</column-name><column-value><![CDATA[");
		sb.append(getCertificateType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>referenceCertificateNo</column-name><column-value><![CDATA[");
		sb.append(getReferenceCertificateNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>referenceCertificateDate</column-name><column-value><![CDATA[");
		sb.append(getReferenceCertificateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateRecordNo</column-name><column-value><![CDATA[");
		sb.append(getCertificateRecordNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateSignName</column-name><column-value><![CDATA[");
		sb.append(getCertificateSignName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateSignTitle</column-name><column-value><![CDATA[");
		sb.append(getCertificateSignTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateSignPlace</column-name><column-value><![CDATA[");
		sb.append(getCertificateSignPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateRecordDate</column-name><column-value><![CDATA[");
		sb.append(getCertificateRecordDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateRecordExpireDate</column-name><column-value><![CDATA[");
		sb.append(getCertificateRecordExpireDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expiredStatus</column-name><column-value><![CDATA[");
		sb.append(getExpiredStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateRecordStatus</column-name><column-value><![CDATA[");
		sb.append(getCertificateRecordStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>digitalIssueStatus</column-name><column-value><![CDATA[");
		sb.append(getDigitalIssueStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleClass</column-name><column-value><![CDATA[");
		sb.append(getVehicleClass());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certifiedVehicleType</column-name><column-value><![CDATA[");
		sb.append(getCertifiedVehicleType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certifiedVehicleTypeDescription</column-name><column-value><![CDATA[");
		sb.append(getCertifiedVehicleTypeDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certifiedTrademark</column-name><column-value><![CDATA[");
		sb.append(getCertifiedTrademark());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certifiedTrademarkName</column-name><column-value><![CDATA[");
		sb.append(getCertifiedTrademarkName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certifiedCommercialName</column-name><column-value><![CDATA[");
		sb.append(getCertifiedCommercialName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certifiedModelCode</column-name><column-value><![CDATA[");
		sb.append(getCertifiedModelCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certifiedAssemblyType</column-name><column-value><![CDATA[");
		sb.append(getCertifiedAssemblyType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certifiedAssemblyTypeDescription</column-name><column-value><![CDATA[");
		sb.append(getCertifiedAssemblyTypeDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certifiedVINNo</column-name><column-value><![CDATA[");
		sb.append(getCertifiedVINNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certifiedVINPosition</column-name><column-value><![CDATA[");
		sb.append(getCertifiedVINPosition());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certifiedFrameNo</column-name><column-value><![CDATA[");
		sb.append(getCertifiedFrameNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certifiedFrameAttachPlace</column-name><column-value><![CDATA[");
		sb.append(getCertifiedFrameAttachPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certifiedFramePosition</column-name><column-value><![CDATA[");
		sb.append(getCertifiedFramePosition());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certifiedEngineNo</column-name><column-value><![CDATA[");
		sb.append(getCertifiedEngineNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certifiedEngineAttachPlace</column-name><column-value><![CDATA[");
		sb.append(getCertifiedEngineAttachPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certifiedEnginePosition</column-name><column-value><![CDATA[");
		sb.append(getCertifiedEnginePosition());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>safetyTestReportNo</column-name><column-value><![CDATA[");
		sb.append(getSafetyTestReportNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>safetyTestReportDate</column-name><column-value><![CDATA[");
		sb.append(getSafetyTestReportDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emissionTestReportNo</column-name><column-value><![CDATA[");
		sb.append(getEmissionTestReportNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emissionTestReportDate</column-name><column-value><![CDATA[");
		sb.append(getEmissionTestReportDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commonSafetyStandard</column-name><column-value><![CDATA[");
		sb.append(getCommonSafetyStandard());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commonSafetyDescription</column-name><column-value><![CDATA[");
		sb.append(getCommonSafetyDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emissionStandard</column-name><column-value><![CDATA[");
		sb.append(getEmissionStandard());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emissionDescription</column-name><column-value><![CDATA[");
		sb.append(getEmissionDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>otherTestReportNo</column-name><column-value><![CDATA[");
		sb.append(getOtherTestReportNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>otherTestReportDate</column-name><column-value><![CDATA[");
		sb.append(getOtherTestReportDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sampleFrameNo</column-name><column-value><![CDATA[");
		sb.append(getSampleFrameNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sampleVINNo</column-name><column-value><![CDATA[");
		sb.append(getSampleVINNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sampleEngineNo</column-name><column-value><![CDATA[");
		sb.append(getSampleEngineNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sampleVehicleType</column-name><column-value><![CDATA[");
		sb.append(getSampleVehicleType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sampleVehicleTypeDescription</column-name><column-value><![CDATA[");
		sb.append(getSampleVehicleTypeDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sampleTrademark</column-name><column-value><![CDATA[");
		sb.append(getSampleTrademark());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sampleTrademarkName</column-name><column-value><![CDATA[");
		sb.append(getSampleTrademarkName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sampleCommercialName</column-name><column-value><![CDATA[");
		sb.append(getSampleCommercialName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sampleModelCode</column-name><column-value><![CDATA[");
		sb.append(getSampleModelCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customsDeclarationNo</column-name><column-value><![CDATA[");
		sb.append(getCustomsDeclarationNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customsDeclarationDate</column-name><column-value><![CDATA[");
		sb.append(getCustomsDeclarationDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionCountry</column-name><column-value><![CDATA[");
		sb.append(getProductionCountry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importerQuantity</column-name><column-value><![CDATA[");
		sb.append(getImporterQuantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionRecordNo</column-name><column-value><![CDATA[");
		sb.append(getInspectionRecordNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionDate</column-name><column-value><![CDATA[");
		sb.append(getInspectionDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionSite</column-name><column-value><![CDATA[");
		sb.append(getInspectionSite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionDistrictCode</column-name><column-value><![CDATA[");
		sb.append(getInspectionDistrictCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionDistrictName</column-name><column-value><![CDATA[");
		sb.append(getInspectionDistrictName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionProvinceCode</column-name><column-value><![CDATA[");
		sb.append(getInspectionProvinceCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionProvinceName</column-name><column-value><![CDATA[");
		sb.append(getInspectionProvinceName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>corporationId</column-name><column-value><![CDATA[");
		sb.append(getCorporationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorId</column-name><column-value><![CDATA[");
		sb.append(getInspectorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remarks</column-name><column-value><![CDATA[");
		sb.append(getRemarks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionNote</column-name><column-value><![CDATA[");
		sb.append(getInspectionNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateNote</column-name><column-value><![CDATA[");
		sb.append(getCertificateNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deliverableCode</column-name><column-value><![CDATA[");
		sb.append(getDeliverableCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deliverableFileEntryid</column-name><column-value><![CDATA[");
		sb.append(getDeliverableFileEntryid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>module</column-name><column-value><![CDATA[");
		sb.append(getModule());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifyDate</column-name><column-value><![CDATA[");
		sb.append(getModifyDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncDate</column-name><column-value><![CDATA[");
		sb.append(getSyncDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VRVehicleTypeCertificate.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VRVehicleTypeCertificate.class
		};
	private long _id;
	private long _mtCore;
	private long _originalMtCore;
	private boolean _setOriginalMtCore;
	private long _dossierId;
	private long _originalDossierId;
	private boolean _setOriginalDossierId;
	private String _dossierIdCTN;
	private String _dossierType;
	private String _dossierNo;
	private String _originalDossierNo;
	private String _referenceUid;
	private String _serviceCode;
	private String _originalServiceCode;
	private String _serviceName;
	private long _convertassembleId;
	private String _applicantIdNo;
	private String _originalApplicantIdNo;
	private String _applicantTelNo;
	private String _applicantName;
	private Date _applicantIdDate;
	private String _applicantAddress;
	private String _applicantRepresentative;
	private String _applicantRepresentativeTitle;
	private String _applicantEmail;
	private String _applicantPhone;
	private String _applicantFax;
	private String _applicantContactName;
	private String _applicantContactEmail;
	private String _applicantcontactPhone;
	private String _applicantcontactTelNo;
	private String _cityCode;
	private String _cityName;
	private String _districtCode;
	private String _districtName;
	private String _wardCode;
	private String _wardName;
	private String _manufacturerForeignCode;
	private String _originalManufacturerForeignCode;
	private String _manufacturerName;
	private String _manufacturerAddress;
	private String _manufacturerRepresentative;
	private String _manufacturerRepresentativeTitle;
	private String _manufacturerEmail;
	private String _manufacturerPhone;
	private String _manufacturerFax;
	private String _productionPlantCode;
	private String _originalProductionPlantCode;
	private String _productionPlantName;
	private String _originalProductionPlantName;
	private String _productionPlantAddress;
	private String _originalProductionPlantAddress;
	private String _productionPlantRepresentative;
	private String _productionPlantRepresentativeTitle;
	private String _copReportNo;
	private String _originalCopReportNo;
	private Date _copReportDate;
	private Date _copReportExpireDate;
	private String _designerCode;
	private String _originalDesignerCode;
	private String _designerName;
	private String _designerAddress;
	private String _designerRepresentative;
	private String _designerRepresentativeTitle;
	private String _designerEmail;
	private String _designerPhone;
	private String _designerFax;
	private String _verificationCertificateNo;
	private String _originalVerificationCertificateNo;
	private Date _verificationCertificateDate;
	private String _verificationRefNo;
	private Date _verificationRefDate;
	private String _typeApprovalCertificateNo;
	private Date _typeApprovalCertificateDate;
	private String _designModelCode;
	private String _designModelDescription;
	private String _designSymbol;
	private String _originalDesignSymbol;
	private String _registeredNumber;
	private Date _inspectorReceiveDate;
	private Date _inspectorSubmitDate;
	private Date _inspectorendorSementDate;
	private Date _inspectorDeadline;
	private Date _inspectorFinishDate;
	private Date _inspectorCancelDate;
	private String _inspectorOrganization;
	private String _inspectorDivision;
	private String _inspectorSignName;
	private String _inspectorSignTitle;
	private String _inspectorSignPlace;
	private String _certificateType;
	private String _referenceCertificateNo;
	private Date _referenceCertificateDate;
	private String _certificateRecordNo;
	private String _originalCertificateRecordNo;
	private String _certificateSignName;
	private String _certificateSignTitle;
	private String _certificateSignPlace;
	private Date _certificateRecordDate;
	private Date _certificateRecordExpireDate;
	private String _expiredStatus;
	private String _originalExpiredStatus;
	private String _certificateRecordStatus;
	private String _digitalIssueStatus;
	private String _vehicleClass;
	private String _originalVehicleClass;
	private String _certifiedVehicleType;
	private String _originalCertifiedVehicleType;
	private String _certifiedVehicleTypeDescription;
	private String _certifiedTrademark;
	private String _certifiedTrademarkName;
	private String _originalCertifiedTrademarkName;
	private String _certifiedCommercialName;
	private String _originalCertifiedCommercialName;
	private String _certifiedModelCode;
	private String _originalCertifiedModelCode;
	private String _certifiedAssemblyType;
	private String _certifiedAssemblyTypeDescription;
	private String _certifiedVINNo;
	private String _certifiedVINPosition;
	private String _certifiedFrameNo;
	private String _certifiedFrameAttachPlace;
	private String _certifiedFramePosition;
	private String _certifiedEngineNo;
	private String _certifiedEngineAttachPlace;
	private String _certifiedEnginePosition;
	private String _safetyTestReportNo;
	private Date _safetyTestReportDate;
	private String _emissionTestReportNo;
	private Date _emissionTestReportDate;
	private String _commonSafetyStandard;
	private String _originalCommonSafetyStandard;
	private String _commonSafetyDescription;
	private String _emissionStandard;
	private String _originalEmissionStandard;
	private String _emissionDescription;
	private String _otherTestReportNo;
	private Date _otherTestReportDate;
	private String _sampleFrameNo;
	private String _sampleVINNo;
	private String _sampleEngineNo;
	private String _sampleVehicleType;
	private String _sampleVehicleTypeDescription;
	private String _sampleTrademark;
	private String _sampleTrademarkName;
	private String _sampleCommercialName;
	private String _sampleModelCode;
	private String _customsDeclarationNo;
	private Date _customsDeclarationDate;
	private String _productionCountry;
	private long _importerQuantity;
	private String _inspectionRecordNo;
	private String _originalInspectionRecordNo;
	private Date _inspectionDate;
	private String _inspectionSite;
	private String _inspectionDistrictCode;
	private String _inspectionDistrictName;
	private String _inspectionProvinceCode;
	private String _inspectionProvinceName;
	private String _corporationId;
	private String _originalCorporationId;
	private long _inspectorId;
	private long _originalInspectorId;
	private boolean _setOriginalInspectorId;
	private String _remarks;
	private String _inspectionNote;
	private String _certificateNote;
	private String _deliverableCode;
	private String _originalDeliverableCode;
	private long _deliverableFileEntryid;
	private String _module;
	private Date _modifyDate;
	private Date _syncDate;
	private long _columnBitmask;
	private VRVehicleTypeCertificate _escapedModel;
}