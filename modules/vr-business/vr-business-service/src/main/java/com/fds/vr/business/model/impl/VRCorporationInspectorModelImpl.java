/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.business.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.business.model.VRCorporationInspector;
import com.fds.vr.business.model.VRCorporationInspectorModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VRCorporationInspector service. Represents a row in the &quot;vr_corporation_inspector&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VRCorporationInspectorModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VRCorporationInspectorImpl}.
 * </p>
 *
 * @author LamTV
 * @see VRCorporationInspectorImpl
 * @see VRCorporationInspector
 * @see VRCorporationInspectorModel
 * @generated
 */
@ProviderType
public class VRCorporationInspectorModelImpl extends BaseModelImpl<VRCorporationInspector>
	implements VRCorporationInspectorModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vr corporation inspector model instance should use the {@link VRCorporationInspector} interface instead.
	 */
	public static final String TABLE_NAME = "vr_corporation_inspector";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "mtCore", Types.BIGINT },
			{ "corporationid", Types.VARCHAR },
			{ "inspectorid", Types.BIGINT },
			{ "inspectorname", Types.VARCHAR },
			{ "inspectorphone", Types.VARCHAR },
			{ "inspectoremail", Types.VARCHAR },
			{ "contactcode", Types.VARCHAR },
			{ "regulartthc", Types.BIGINT },
			{ "searchvehicle", Types.INTEGER },
			{ "teamid", Types.BIGINT },
			{ "markupteamleader", Types.INTEGER },
			{ "markupboss", Types.INTEGER },
			{ "executedictionary", Types.VARCHAR },
			{ "place", Types.VARCHAR },
			{ "title", Types.VARCHAR },
			{ "filechukyid", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mtCore", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("corporationid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectorid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("inspectorname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectorphone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectoremail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactcode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("regulartthc", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("searchvehicle", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("teamid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("markupteamleader", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("markupboss", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("executedictionary", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("place", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("filechukyid", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table vr_corporation_inspector (id LONG not null primary key,mtCore LONG,corporationid VARCHAR(75) null,inspectorid LONG,inspectorname VARCHAR(75) null,inspectorphone VARCHAR(75) null,inspectoremail VARCHAR(75) null,contactcode VARCHAR(75) null,regulartthc LONG,searchvehicle INTEGER,teamid LONG,markupteamleader INTEGER,markupboss INTEGER,executedictionary VARCHAR(75) null,place VARCHAR(75) null,title VARCHAR(75) null,filechukyid LONG)";
	public static final String TABLE_SQL_DROP = "drop table vr_corporation_inspector";
	public static final String ORDER_BY_JPQL = " ORDER BY vrCorporationInspector.inspectorName DESC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_corporation_inspector.inspectorname DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fds.vr.business.model.VRCorporationInspector"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fds.vr.business.model.VRCorporationInspector"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fds.vr.business.model.VRCorporationInspector"),
			true);
	public static final long CONTACTCODE_COLUMN_BITMASK = 1L;
	public static final long CORPORATIONID_COLUMN_BITMASK = 2L;
	public static final long INSPECTORID_COLUMN_BITMASK = 4L;
	public static final long TEAMID_COLUMN_BITMASK = 8L;
	public static final long INSPECTORNAME_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.fds.vr.service.util.ServiceProps.get(
				"lock.expiration.time.com.fds.vr.business.model.VRCorporationInspector"));

	public VRCorporationInspectorModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VRCorporationInspector.class;
	}

	@Override
	public String getModelClassName() {
		return VRCorporationInspector.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("mtCore", getMtCore());
		attributes.put("corporationId", getCorporationId());
		attributes.put("inspectorid", getInspectorid());
		attributes.put("inspectorName", getInspectorName());
		attributes.put("inspectorPhone", getInspectorPhone());
		attributes.put("inspectorEmail", getInspectorEmail());
		attributes.put("contactcode", getContactcode());
		attributes.put("regularTthc", getRegularTthc());
		attributes.put("searchVehicle", getSearchVehicle());
		attributes.put("teamId", getTeamId());
		attributes.put("markupTeamLeader", getMarkupTeamLeader());
		attributes.put("markUpBoss", getMarkUpBoss());
		attributes.put("executedictionary", getExecutedictionary());
		attributes.put("place", getPlace());
		attributes.put("title", getTitle());
		attributes.put("filechukyId", getFilechukyId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long mtCore = (Long)attributes.get("mtCore");

		if (mtCore != null) {
			setMtCore(mtCore);
		}

		String corporationId = (String)attributes.get("corporationId");

		if (corporationId != null) {
			setCorporationId(corporationId);
		}

		Long inspectorid = (Long)attributes.get("inspectorid");

		if (inspectorid != null) {
			setInspectorid(inspectorid);
		}

		String inspectorName = (String)attributes.get("inspectorName");

		if (inspectorName != null) {
			setInspectorName(inspectorName);
		}

		String inspectorPhone = (String)attributes.get("inspectorPhone");

		if (inspectorPhone != null) {
			setInspectorPhone(inspectorPhone);
		}

		String inspectorEmail = (String)attributes.get("inspectorEmail");

		if (inspectorEmail != null) {
			setInspectorEmail(inspectorEmail);
		}

		String contactcode = (String)attributes.get("contactcode");

		if (contactcode != null) {
			setContactcode(contactcode);
		}

		Long regularTthc = (Long)attributes.get("regularTthc");

		if (regularTthc != null) {
			setRegularTthc(regularTthc);
		}

		Integer searchVehicle = (Integer)attributes.get("searchVehicle");

		if (searchVehicle != null) {
			setSearchVehicle(searchVehicle);
		}

		Long teamId = (Long)attributes.get("teamId");

		if (teamId != null) {
			setTeamId(teamId);
		}

		Integer markupTeamLeader = (Integer)attributes.get("markupTeamLeader");

		if (markupTeamLeader != null) {
			setMarkupTeamLeader(markupTeamLeader);
		}

		Integer markUpBoss = (Integer)attributes.get("markUpBoss");

		if (markUpBoss != null) {
			setMarkUpBoss(markUpBoss);
		}

		String executedictionary = (String)attributes.get("executedictionary");

		if (executedictionary != null) {
			setExecutedictionary(executedictionary);
		}

		String place = (String)attributes.get("place");

		if (place != null) {
			setPlace(place);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		Long filechukyId = (Long)attributes.get("filechukyId");

		if (filechukyId != null) {
			setFilechukyId(filechukyId);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getMtCore() {
		return _mtCore;
	}

	@Override
	public void setMtCore(long mtCore) {
		_mtCore = mtCore;
	}

	@Override
	public String getCorporationId() {
		if (_corporationId == null) {
			return StringPool.BLANK;
		}
		else {
			return _corporationId;
		}
	}

	@Override
	public void setCorporationId(String corporationId) {
		_columnBitmask |= CORPORATIONID_COLUMN_BITMASK;

		if (_originalCorporationId == null) {
			_originalCorporationId = _corporationId;
		}

		_corporationId = corporationId;
	}

	public String getOriginalCorporationId() {
		return GetterUtil.getString(_originalCorporationId);
	}

	@Override
	public long getInspectorid() {
		return _inspectorid;
	}

	@Override
	public void setInspectorid(long inspectorid) {
		_columnBitmask |= INSPECTORID_COLUMN_BITMASK;

		if (!_setOriginalInspectorid) {
			_setOriginalInspectorid = true;

			_originalInspectorid = _inspectorid;
		}

		_inspectorid = inspectorid;
	}

	public long getOriginalInspectorid() {
		return _originalInspectorid;
	}

	@Override
	public String getInspectorName() {
		if (_inspectorName == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectorName;
		}
	}

	@Override
	public void setInspectorName(String inspectorName) {
		_columnBitmask = -1L;

		_inspectorName = inspectorName;
	}

	@Override
	public String getInspectorPhone() {
		if (_inspectorPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectorPhone;
		}
	}

	@Override
	public void setInspectorPhone(String inspectorPhone) {
		_inspectorPhone = inspectorPhone;
	}

	@Override
	public String getInspectorEmail() {
		if (_inspectorEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectorEmail;
		}
	}

	@Override
	public void setInspectorEmail(String inspectorEmail) {
		_inspectorEmail = inspectorEmail;
	}

	@Override
	public String getContactcode() {
		if (_contactcode == null) {
			return StringPool.BLANK;
		}
		else {
			return _contactcode;
		}
	}

	@Override
	public void setContactcode(String contactcode) {
		_columnBitmask |= CONTACTCODE_COLUMN_BITMASK;

		if (_originalContactcode == null) {
			_originalContactcode = _contactcode;
		}

		_contactcode = contactcode;
	}

	public String getOriginalContactcode() {
		return GetterUtil.getString(_originalContactcode);
	}

	@Override
	public long getRegularTthc() {
		return _regularTthc;
	}

	@Override
	public void setRegularTthc(long regularTthc) {
		_regularTthc = regularTthc;
	}

	@Override
	public int getSearchVehicle() {
		return _searchVehicle;
	}

	@Override
	public void setSearchVehicle(int searchVehicle) {
		_searchVehicle = searchVehicle;
	}

	@Override
	public long getTeamId() {
		return _teamId;
	}

	@Override
	public void setTeamId(long teamId) {
		_columnBitmask |= TEAMID_COLUMN_BITMASK;

		if (!_setOriginalTeamId) {
			_setOriginalTeamId = true;

			_originalTeamId = _teamId;
		}

		_teamId = teamId;
	}

	public long getOriginalTeamId() {
		return _originalTeamId;
	}

	@Override
	public int getMarkupTeamLeader() {
		return _markupTeamLeader;
	}

	@Override
	public void setMarkupTeamLeader(int markupTeamLeader) {
		_markupTeamLeader = markupTeamLeader;
	}

	@Override
	public int getMarkUpBoss() {
		return _markUpBoss;
	}

	@Override
	public void setMarkUpBoss(int markUpBoss) {
		_markUpBoss = markUpBoss;
	}

	@Override
	public String getExecutedictionary() {
		if (_executedictionary == null) {
			return StringPool.BLANK;
		}
		else {
			return _executedictionary;
		}
	}

	@Override
	public void setExecutedictionary(String executedictionary) {
		_executedictionary = executedictionary;
	}

	@Override
	public String getPlace() {
		if (_place == null) {
			return StringPool.BLANK;
		}
		else {
			return _place;
		}
	}

	@Override
	public void setPlace(String place) {
		_place = place;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public long getFilechukyId() {
		return _filechukyId;
	}

	@Override
	public void setFilechukyId(long filechukyId) {
		_filechukyId = filechukyId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VRCorporationInspector.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VRCorporationInspector toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VRCorporationInspector)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VRCorporationInspectorImpl vrCorporationInspectorImpl = new VRCorporationInspectorImpl();

		vrCorporationInspectorImpl.setId(getId());
		vrCorporationInspectorImpl.setMtCore(getMtCore());
		vrCorporationInspectorImpl.setCorporationId(getCorporationId());
		vrCorporationInspectorImpl.setInspectorid(getInspectorid());
		vrCorporationInspectorImpl.setInspectorName(getInspectorName());
		vrCorporationInspectorImpl.setInspectorPhone(getInspectorPhone());
		vrCorporationInspectorImpl.setInspectorEmail(getInspectorEmail());
		vrCorporationInspectorImpl.setContactcode(getContactcode());
		vrCorporationInspectorImpl.setRegularTthc(getRegularTthc());
		vrCorporationInspectorImpl.setSearchVehicle(getSearchVehicle());
		vrCorporationInspectorImpl.setTeamId(getTeamId());
		vrCorporationInspectorImpl.setMarkupTeamLeader(getMarkupTeamLeader());
		vrCorporationInspectorImpl.setMarkUpBoss(getMarkUpBoss());
		vrCorporationInspectorImpl.setExecutedictionary(getExecutedictionary());
		vrCorporationInspectorImpl.setPlace(getPlace());
		vrCorporationInspectorImpl.setTitle(getTitle());
		vrCorporationInspectorImpl.setFilechukyId(getFilechukyId());

		vrCorporationInspectorImpl.resetOriginalValues();

		return vrCorporationInspectorImpl;
	}

	@Override
	public int compareTo(VRCorporationInspector vrCorporationInspector) {
		int value = 0;

		value = getInspectorName()
					.compareTo(vrCorporationInspector.getInspectorName());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VRCorporationInspector)) {
			return false;
		}

		VRCorporationInspector vrCorporationInspector = (VRCorporationInspector)obj;

		long primaryKey = vrCorporationInspector.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VRCorporationInspectorModelImpl vrCorporationInspectorModelImpl = this;

		vrCorporationInspectorModelImpl._originalCorporationId = vrCorporationInspectorModelImpl._corporationId;

		vrCorporationInspectorModelImpl._originalInspectorid = vrCorporationInspectorModelImpl._inspectorid;

		vrCorporationInspectorModelImpl._setOriginalInspectorid = false;

		vrCorporationInspectorModelImpl._originalContactcode = vrCorporationInspectorModelImpl._contactcode;

		vrCorporationInspectorModelImpl._originalTeamId = vrCorporationInspectorModelImpl._teamId;

		vrCorporationInspectorModelImpl._setOriginalTeamId = false;

		vrCorporationInspectorModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VRCorporationInspector> toCacheModel() {
		VRCorporationInspectorCacheModel vrCorporationInspectorCacheModel = new VRCorporationInspectorCacheModel();

		vrCorporationInspectorCacheModel.id = getId();

		vrCorporationInspectorCacheModel.mtCore = getMtCore();

		vrCorporationInspectorCacheModel.corporationId = getCorporationId();

		String corporationId = vrCorporationInspectorCacheModel.corporationId;

		if ((corporationId != null) && (corporationId.length() == 0)) {
			vrCorporationInspectorCacheModel.corporationId = null;
		}

		vrCorporationInspectorCacheModel.inspectorid = getInspectorid();

		vrCorporationInspectorCacheModel.inspectorName = getInspectorName();

		String inspectorName = vrCorporationInspectorCacheModel.inspectorName;

		if ((inspectorName != null) && (inspectorName.length() == 0)) {
			vrCorporationInspectorCacheModel.inspectorName = null;
		}

		vrCorporationInspectorCacheModel.inspectorPhone = getInspectorPhone();

		String inspectorPhone = vrCorporationInspectorCacheModel.inspectorPhone;

		if ((inspectorPhone != null) && (inspectorPhone.length() == 0)) {
			vrCorporationInspectorCacheModel.inspectorPhone = null;
		}

		vrCorporationInspectorCacheModel.inspectorEmail = getInspectorEmail();

		String inspectorEmail = vrCorporationInspectorCacheModel.inspectorEmail;

		if ((inspectorEmail != null) && (inspectorEmail.length() == 0)) {
			vrCorporationInspectorCacheModel.inspectorEmail = null;
		}

		vrCorporationInspectorCacheModel.contactcode = getContactcode();

		String contactcode = vrCorporationInspectorCacheModel.contactcode;

		if ((contactcode != null) && (contactcode.length() == 0)) {
			vrCorporationInspectorCacheModel.contactcode = null;
		}

		vrCorporationInspectorCacheModel.regularTthc = getRegularTthc();

		vrCorporationInspectorCacheModel.searchVehicle = getSearchVehicle();

		vrCorporationInspectorCacheModel.teamId = getTeamId();

		vrCorporationInspectorCacheModel.markupTeamLeader = getMarkupTeamLeader();

		vrCorporationInspectorCacheModel.markUpBoss = getMarkUpBoss();

		vrCorporationInspectorCacheModel.executedictionary = getExecutedictionary();

		String executedictionary = vrCorporationInspectorCacheModel.executedictionary;

		if ((executedictionary != null) && (executedictionary.length() == 0)) {
			vrCorporationInspectorCacheModel.executedictionary = null;
		}

		vrCorporationInspectorCacheModel.place = getPlace();

		String place = vrCorporationInspectorCacheModel.place;

		if ((place != null) && (place.length() == 0)) {
			vrCorporationInspectorCacheModel.place = null;
		}

		vrCorporationInspectorCacheModel.title = getTitle();

		String title = vrCorporationInspectorCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			vrCorporationInspectorCacheModel.title = null;
		}

		vrCorporationInspectorCacheModel.filechukyId = getFilechukyId();

		return vrCorporationInspectorCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", mtCore=");
		sb.append(getMtCore());
		sb.append(", corporationId=");
		sb.append(getCorporationId());
		sb.append(", inspectorid=");
		sb.append(getInspectorid());
		sb.append(", inspectorName=");
		sb.append(getInspectorName());
		sb.append(", inspectorPhone=");
		sb.append(getInspectorPhone());
		sb.append(", inspectorEmail=");
		sb.append(getInspectorEmail());
		sb.append(", contactcode=");
		sb.append(getContactcode());
		sb.append(", regularTthc=");
		sb.append(getRegularTthc());
		sb.append(", searchVehicle=");
		sb.append(getSearchVehicle());
		sb.append(", teamId=");
		sb.append(getTeamId());
		sb.append(", markupTeamLeader=");
		sb.append(getMarkupTeamLeader());
		sb.append(", markUpBoss=");
		sb.append(getMarkUpBoss());
		sb.append(", executedictionary=");
		sb.append(getExecutedictionary());
		sb.append(", place=");
		sb.append(getPlace());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", filechukyId=");
		sb.append(getFilechukyId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append("com.fds.vr.business.model.VRCorporationInspector");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mtCore</column-name><column-value><![CDATA[");
		sb.append(getMtCore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>corporationId</column-name><column-value><![CDATA[");
		sb.append(getCorporationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorid</column-name><column-value><![CDATA[");
		sb.append(getInspectorid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorName</column-name><column-value><![CDATA[");
		sb.append(getInspectorName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorPhone</column-name><column-value><![CDATA[");
		sb.append(getInspectorPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorEmail</column-name><column-value><![CDATA[");
		sb.append(getInspectorEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactcode</column-name><column-value><![CDATA[");
		sb.append(getContactcode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>regularTthc</column-name><column-value><![CDATA[");
		sb.append(getRegularTthc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>searchVehicle</column-name><column-value><![CDATA[");
		sb.append(getSearchVehicle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>teamId</column-name><column-value><![CDATA[");
		sb.append(getTeamId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupTeamLeader</column-name><column-value><![CDATA[");
		sb.append(getMarkupTeamLeader());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markUpBoss</column-name><column-value><![CDATA[");
		sb.append(getMarkUpBoss());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>executedictionary</column-name><column-value><![CDATA[");
		sb.append(getExecutedictionary());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>place</column-name><column-value><![CDATA[");
		sb.append(getPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>filechukyId</column-name><column-value><![CDATA[");
		sb.append(getFilechukyId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VRCorporationInspector.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VRCorporationInspector.class
		};
	private long _id;
	private long _mtCore;
	private String _corporationId;
	private String _originalCorporationId;
	private long _inspectorid;
	private long _originalInspectorid;
	private boolean _setOriginalInspectorid;
	private String _inspectorName;
	private String _inspectorPhone;
	private String _inspectorEmail;
	private String _contactcode;
	private String _originalContactcode;
	private long _regularTthc;
	private int _searchVehicle;
	private long _teamId;
	private long _originalTeamId;
	private boolean _setOriginalTeamId;
	private int _markupTeamLeader;
	private int _markUpBoss;
	private String _executedictionary;
	private String _place;
	private String _title;
	private long _filechukyId;
	private long _columnBitmask;
	private VRCorporationInspector _escapedModel;
}