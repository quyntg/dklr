/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.business.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.business.model.VRCertificateProgressFile;
import com.fds.vr.business.model.VRCertificateProgressFileModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VRCertificateProgressFile service. Represents a row in the &quot;vr_certificate_progress_file&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VRCertificateProgressFileModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VRCertificateProgressFileImpl}.
 * </p>
 *
 * @author LamTV
 * @see VRCertificateProgressFileImpl
 * @see VRCertificateProgressFile
 * @see VRCertificateProgressFileModel
 * @generated
 */
@ProviderType
public class VRCertificateProgressFileModelImpl extends BaseModelImpl<VRCertificateProgressFile>
	implements VRCertificateProgressFileModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vr certificate progress file model instance should use the {@link VRCertificateProgressFile} interface instead.
	 */
	public static final String TABLE_NAME = "vr_certificate_progress_file";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "certificateProgressID", Types.BIGINT },
			{ "attachedFileID", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("certificateProgressID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("attachedFileID", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table vr_certificate_progress_file (id LONG not null primary key,certificateProgressID LONG,attachedFileID LONG)";
	public static final String TABLE_SQL_DROP = "drop table vr_certificate_progress_file";
	public static final String ORDER_BY_JPQL = " ORDER BY vrCertificateProgressFile.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_certificate_progress_file.id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fds.vr.business.model.VRCertificateProgressFile"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fds.vr.business.model.VRCertificateProgressFile"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.fds.vr.service.util.ServiceProps.get(
				"lock.expiration.time.com.fds.vr.business.model.VRCertificateProgressFile"));

	public VRCertificateProgressFileModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VRCertificateProgressFile.class;
	}

	@Override
	public String getModelClassName() {
		return VRCertificateProgressFile.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("certificateProgressID", getCertificateProgressID());
		attributes.put("attachedFileID", getAttachedFileID());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long certificateProgressID = (Long)attributes.get(
				"certificateProgressID");

		if (certificateProgressID != null) {
			setCertificateProgressID(certificateProgressID);
		}

		Long attachedFileID = (Long)attributes.get("attachedFileID");

		if (attachedFileID != null) {
			setAttachedFileID(attachedFileID);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getCertificateProgressID() {
		return _certificateProgressID;
	}

	@Override
	public void setCertificateProgressID(long certificateProgressID) {
		_certificateProgressID = certificateProgressID;
	}

	@Override
	public long getAttachedFileID() {
		return _attachedFileID;
	}

	@Override
	public void setAttachedFileID(long attachedFileID) {
		_attachedFileID = attachedFileID;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VRCertificateProgressFile.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VRCertificateProgressFile toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VRCertificateProgressFile)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VRCertificateProgressFileImpl vrCertificateProgressFileImpl = new VRCertificateProgressFileImpl();

		vrCertificateProgressFileImpl.setId(getId());
		vrCertificateProgressFileImpl.setCertificateProgressID(getCertificateProgressID());
		vrCertificateProgressFileImpl.setAttachedFileID(getAttachedFileID());

		vrCertificateProgressFileImpl.resetOriginalValues();

		return vrCertificateProgressFileImpl;
	}

	@Override
	public int compareTo(VRCertificateProgressFile vrCertificateProgressFile) {
		long primaryKey = vrCertificateProgressFile.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VRCertificateProgressFile)) {
			return false;
		}

		VRCertificateProgressFile vrCertificateProgressFile = (VRCertificateProgressFile)obj;

		long primaryKey = vrCertificateProgressFile.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<VRCertificateProgressFile> toCacheModel() {
		VRCertificateProgressFileCacheModel vrCertificateProgressFileCacheModel = new VRCertificateProgressFileCacheModel();

		vrCertificateProgressFileCacheModel.id = getId();

		vrCertificateProgressFileCacheModel.certificateProgressID = getCertificateProgressID();

		vrCertificateProgressFileCacheModel.attachedFileID = getAttachedFileID();

		return vrCertificateProgressFileCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", certificateProgressID=");
		sb.append(getCertificateProgressID());
		sb.append(", attachedFileID=");
		sb.append(getAttachedFileID());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.fds.vr.business.model.VRCertificateProgressFile");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateProgressID</column-name><column-value><![CDATA[");
		sb.append(getCertificateProgressID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachedFileID</column-name><column-value><![CDATA[");
		sb.append(getAttachedFileID());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VRCertificateProgressFile.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VRCertificateProgressFile.class
		};
	private long _id;
	private long _certificateProgressID;
	private long _attachedFileID;
	private VRCertificateProgressFile _escapedModel;
}