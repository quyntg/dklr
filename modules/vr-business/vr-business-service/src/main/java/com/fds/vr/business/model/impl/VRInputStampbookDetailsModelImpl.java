/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.business.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.business.model.VRInputStampbookDetails;
import com.fds.vr.business.model.VRInputStampbookDetailsModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VRInputStampbookDetails service. Represents a row in the &quot;vr_inputstampbookdetails&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VRInputStampbookDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VRInputStampbookDetailsImpl}.
 * </p>
 *
 * @author LamTV
 * @see VRInputStampbookDetailsImpl
 * @see VRInputStampbookDetails
 * @see VRInputStampbookDetailsModel
 * @generated
 */
@ProviderType
public class VRInputStampbookDetailsModelImpl extends BaseModelImpl<VRInputStampbookDetails>
	implements VRInputStampbookDetailsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vr input stampbook details model instance should use the {@link VRInputStampbookDetails} interface instead.
	 */
	public static final String TABLE_NAME = "vr_inputstampbookdetails";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "mtCore", Types.BIGINT },
			{ "stampSerialNo", Types.VARCHAR },
			{ "sequenceNo", Types.BIGINT },
			{ "dossierId", Types.BIGINT },
			{ "certificateId", Types.BIGINT },
			{ "certificateNumber", Types.VARCHAR },
			{ "certificateDate", Types.TIMESTAMP },
			{ "vehicleRecordId", Types.BIGINT },
			{ "frameNo", Types.VARCHAR },
			{ "BoxNo", Types.VARCHAR },
			{ "vinNo", Types.VARCHAR },
			{ "engineNo", Types.VARCHAR },
			{ "qrCode", Types.VARCHAR },
			{ "copies", Types.BIGINT },
			{ "markupFulfill", Types.BIGINT },
			{ "replacedSerialNo", Types.VARCHAR },
			{ "remark", Types.VARCHAR },
			{ "inputSheetId", Types.BIGINT },
			{ "bookId", Types.BIGINT },
			{ "purchaserId", Types.BIGINT },
			{ "corporationId", Types.BIGINT },
			{ "issuingStatus", Types.BIGINT },
			{ "clearingStatus", Types.BIGINT },
			{ "stampStatus", Types.BIGINT },
			{ "issuingDate", Types.TIMESTAMP },
			{ "printingDate", Types.TIMESTAMP },
			{ "noticeofLostDate", Types.TIMESTAMP },
			{ "noticeofCancelDate", Types.TIMESTAMP },
			{ "noticeofReturnDate", Types.TIMESTAMP },
			{ "clearingDate", Types.TIMESTAMP },
			{ "clearingAdvancePaymentID", Types.BIGINT },
			{ "modifyDate", Types.TIMESTAMP },
			{ "syncDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mtCore", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("stampSerialNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sequenceNo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dossierId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("certificateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("certificateNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certificateDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("vehicleRecordId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("frameNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BoxNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("vinNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("engineNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qrCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copies", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("markupFulfill", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("replacedSerialNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("remark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inputSheetId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("bookId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("purchaserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("corporationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("issuingStatus", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("clearingStatus", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("stampStatus", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("issuingDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("printingDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("noticeofLostDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("noticeofCancelDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("noticeofReturnDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("clearingDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("clearingAdvancePaymentID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifyDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("syncDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table vr_inputstampbookdetails (id LONG not null primary key,mtCore LONG,stampSerialNo VARCHAR(75) null,sequenceNo LONG,dossierId LONG,certificateId LONG,certificateNumber VARCHAR(75) null,certificateDate DATE null,vehicleRecordId LONG,frameNo VARCHAR(75) null,BoxNo VARCHAR(75) null,vinNo VARCHAR(75) null,engineNo VARCHAR(75) null,qrCode VARCHAR(75) null,copies LONG,markupFulfill LONG,replacedSerialNo VARCHAR(75) null,remark VARCHAR(75) null,inputSheetId LONG,bookId LONG,purchaserId LONG,corporationId LONG,issuingStatus LONG,clearingStatus LONG,stampStatus LONG,issuingDate DATE null,printingDate DATE null,noticeofLostDate DATE null,noticeofCancelDate DATE null,noticeofReturnDate DATE null,clearingDate DATE null,clearingAdvancePaymentID LONG,modifyDate DATE null,syncDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table vr_inputstampbookdetails";
	public static final String ORDER_BY_JPQL = " ORDER BY vrInputStampbookDetails.modifyDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_inputstampbookdetails.modifyDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fds.vr.business.model.VRInputStampbookDetails"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fds.vr.business.model.VRInputStampbookDetails"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fds.vr.business.model.VRInputStampbookDetails"),
			true);
	public static final long BOOKID_COLUMN_BITMASK = 1L;
	public static final long CERTIFICATEID_COLUMN_BITMASK = 2L;
	public static final long CERTIFICATENUMBER_COLUMN_BITMASK = 4L;
	public static final long CORPORATIONID_COLUMN_BITMASK = 8L;
	public static final long DOSSIERID_COLUMN_BITMASK = 16L;
	public static final long INPUTSHEETID_COLUMN_BITMASK = 32L;
	public static final long MTCORE_COLUMN_BITMASK = 64L;
	public static final long PURCHASERID_COLUMN_BITMASK = 128L;
	public static final long SEQUENCENO_COLUMN_BITMASK = 256L;
	public static final long STAMPSERIALNO_COLUMN_BITMASK = 512L;
	public static final long VEHICLERECORDID_COLUMN_BITMASK = 1024L;
	public static final long MODIFYDATE_COLUMN_BITMASK = 2048L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.fds.vr.service.util.ServiceProps.get(
				"lock.expiration.time.com.fds.vr.business.model.VRInputStampbookDetails"));

	public VRInputStampbookDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VRInputStampbookDetails.class;
	}

	@Override
	public String getModelClassName() {
		return VRInputStampbookDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("mtCore", getMtCore());
		attributes.put("stampSerialNo", getStampSerialNo());
		attributes.put("sequenceNo", getSequenceNo());
		attributes.put("dossierId", getDossierId());
		attributes.put("certificateId", getCertificateId());
		attributes.put("certificateNumber", getCertificateNumber());
		attributes.put("certificateDate", getCertificateDate());
		attributes.put("vehicleRecordId", getVehicleRecordId());
		attributes.put("frameNo", getFrameNo());
		attributes.put("boxNo", getBoxNo());
		attributes.put("vinNo", getVinNo());
		attributes.put("engineNo", getEngineNo());
		attributes.put("qrCode", getQrCode());
		attributes.put("copies", getCopies());
		attributes.put("markupFulfill", getMarkupFulfill());
		attributes.put("replacedSerialNo", getReplacedSerialNo());
		attributes.put("remark", getRemark());
		attributes.put("inputSheetId", getInputSheetId());
		attributes.put("bookId", getBookId());
		attributes.put("purchaserId", getPurchaserId());
		attributes.put("corporationId", getCorporationId());
		attributes.put("issuingStatus", getIssuingStatus());
		attributes.put("clearingStatus", getClearingStatus());
		attributes.put("stampStatus", getStampStatus());
		attributes.put("issuingDate", getIssuingDate());
		attributes.put("printingDate", getPrintingDate());
		attributes.put("noticeofLostDate", getNoticeofLostDate());
		attributes.put("noticeofCancelDate", getNoticeofCancelDate());
		attributes.put("noticeofReturnDate", getNoticeofReturnDate());
		attributes.put("clearingDate", getClearingDate());
		attributes.put("clearingAdvancePaymentID", getClearingAdvancePaymentID());
		attributes.put("modifyDate", getModifyDate());
		attributes.put("syncDate", getSyncDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long mtCore = (Long)attributes.get("mtCore");

		if (mtCore != null) {
			setMtCore(mtCore);
		}

		String stampSerialNo = (String)attributes.get("stampSerialNo");

		if (stampSerialNo != null) {
			setStampSerialNo(stampSerialNo);
		}

		Long sequenceNo = (Long)attributes.get("sequenceNo");

		if (sequenceNo != null) {
			setSequenceNo(sequenceNo);
		}

		Long dossierId = (Long)attributes.get("dossierId");

		if (dossierId != null) {
			setDossierId(dossierId);
		}

		Long certificateId = (Long)attributes.get("certificateId");

		if (certificateId != null) {
			setCertificateId(certificateId);
		}

		String certificateNumber = (String)attributes.get("certificateNumber");

		if (certificateNumber != null) {
			setCertificateNumber(certificateNumber);
		}

		Date certificateDate = (Date)attributes.get("certificateDate");

		if (certificateDate != null) {
			setCertificateDate(certificateDate);
		}

		Long vehicleRecordId = (Long)attributes.get("vehicleRecordId");

		if (vehicleRecordId != null) {
			setVehicleRecordId(vehicleRecordId);
		}

		String frameNo = (String)attributes.get("frameNo");

		if (frameNo != null) {
			setFrameNo(frameNo);
		}

		String boxNo = (String)attributes.get("boxNo");

		if (boxNo != null) {
			setBoxNo(boxNo);
		}

		String vinNo = (String)attributes.get("vinNo");

		if (vinNo != null) {
			setVinNo(vinNo);
		}

		String engineNo = (String)attributes.get("engineNo");

		if (engineNo != null) {
			setEngineNo(engineNo);
		}

		String qrCode = (String)attributes.get("qrCode");

		if (qrCode != null) {
			setQrCode(qrCode);
		}

		Long copies = (Long)attributes.get("copies");

		if (copies != null) {
			setCopies(copies);
		}

		Long markupFulfill = (Long)attributes.get("markupFulfill");

		if (markupFulfill != null) {
			setMarkupFulfill(markupFulfill);
		}

		String replacedSerialNo = (String)attributes.get("replacedSerialNo");

		if (replacedSerialNo != null) {
			setReplacedSerialNo(replacedSerialNo);
		}

		String remark = (String)attributes.get("remark");

		if (remark != null) {
			setRemark(remark);
		}

		Long inputSheetId = (Long)attributes.get("inputSheetId");

		if (inputSheetId != null) {
			setInputSheetId(inputSheetId);
		}

		Long bookId = (Long)attributes.get("bookId");

		if (bookId != null) {
			setBookId(bookId);
		}

		Long purchaserId = (Long)attributes.get("purchaserId");

		if (purchaserId != null) {
			setPurchaserId(purchaserId);
		}

		Long corporationId = (Long)attributes.get("corporationId");

		if (corporationId != null) {
			setCorporationId(corporationId);
		}

		Long issuingStatus = (Long)attributes.get("issuingStatus");

		if (issuingStatus != null) {
			setIssuingStatus(issuingStatus);
		}

		Long clearingStatus = (Long)attributes.get("clearingStatus");

		if (clearingStatus != null) {
			setClearingStatus(clearingStatus);
		}

		Long stampStatus = (Long)attributes.get("stampStatus");

		if (stampStatus != null) {
			setStampStatus(stampStatus);
		}

		Date issuingDate = (Date)attributes.get("issuingDate");

		if (issuingDate != null) {
			setIssuingDate(issuingDate);
		}

		Date printingDate = (Date)attributes.get("printingDate");

		if (printingDate != null) {
			setPrintingDate(printingDate);
		}

		Date noticeofLostDate = (Date)attributes.get("noticeofLostDate");

		if (noticeofLostDate != null) {
			setNoticeofLostDate(noticeofLostDate);
		}

		Date noticeofCancelDate = (Date)attributes.get("noticeofCancelDate");

		if (noticeofCancelDate != null) {
			setNoticeofCancelDate(noticeofCancelDate);
		}

		Date noticeofReturnDate = (Date)attributes.get("noticeofReturnDate");

		if (noticeofReturnDate != null) {
			setNoticeofReturnDate(noticeofReturnDate);
		}

		Date clearingDate = (Date)attributes.get("clearingDate");

		if (clearingDate != null) {
			setClearingDate(clearingDate);
		}

		Long clearingAdvancePaymentID = (Long)attributes.get(
				"clearingAdvancePaymentID");

		if (clearingAdvancePaymentID != null) {
			setClearingAdvancePaymentID(clearingAdvancePaymentID);
		}

		Date modifyDate = (Date)attributes.get("modifyDate");

		if (modifyDate != null) {
			setModifyDate(modifyDate);
		}

		Date syncDate = (Date)attributes.get("syncDate");

		if (syncDate != null) {
			setSyncDate(syncDate);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getMtCore() {
		return _mtCore;
	}

	@Override
	public void setMtCore(long mtCore) {
		_columnBitmask |= MTCORE_COLUMN_BITMASK;

		if (!_setOriginalMtCore) {
			_setOriginalMtCore = true;

			_originalMtCore = _mtCore;
		}

		_mtCore = mtCore;
	}

	public long getOriginalMtCore() {
		return _originalMtCore;
	}

	@Override
	public String getStampSerialNo() {
		if (_stampSerialNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _stampSerialNo;
		}
	}

	@Override
	public void setStampSerialNo(String stampSerialNo) {
		_columnBitmask |= STAMPSERIALNO_COLUMN_BITMASK;

		if (_originalStampSerialNo == null) {
			_originalStampSerialNo = _stampSerialNo;
		}

		_stampSerialNo = stampSerialNo;
	}

	public String getOriginalStampSerialNo() {
		return GetterUtil.getString(_originalStampSerialNo);
	}

	@Override
	public long getSequenceNo() {
		return _sequenceNo;
	}

	@Override
	public void setSequenceNo(long sequenceNo) {
		_columnBitmask |= SEQUENCENO_COLUMN_BITMASK;

		if (!_setOriginalSequenceNo) {
			_setOriginalSequenceNo = true;

			_originalSequenceNo = _sequenceNo;
		}

		_sequenceNo = sequenceNo;
	}

	public long getOriginalSequenceNo() {
		return _originalSequenceNo;
	}

	@Override
	public long getDossierId() {
		return _dossierId;
	}

	@Override
	public void setDossierId(long dossierId) {
		_columnBitmask |= DOSSIERID_COLUMN_BITMASK;

		if (!_setOriginalDossierId) {
			_setOriginalDossierId = true;

			_originalDossierId = _dossierId;
		}

		_dossierId = dossierId;
	}

	public long getOriginalDossierId() {
		return _originalDossierId;
	}

	@Override
	public long getCertificateId() {
		return _certificateId;
	}

	@Override
	public void setCertificateId(long certificateId) {
		_columnBitmask |= CERTIFICATEID_COLUMN_BITMASK;

		if (!_setOriginalCertificateId) {
			_setOriginalCertificateId = true;

			_originalCertificateId = _certificateId;
		}

		_certificateId = certificateId;
	}

	public long getOriginalCertificateId() {
		return _originalCertificateId;
	}

	@Override
	public String getCertificateNumber() {
		if (_certificateNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _certificateNumber;
		}
	}

	@Override
	public void setCertificateNumber(String certificateNumber) {
		_columnBitmask |= CERTIFICATENUMBER_COLUMN_BITMASK;

		if (_originalCertificateNumber == null) {
			_originalCertificateNumber = _certificateNumber;
		}

		_certificateNumber = certificateNumber;
	}

	public String getOriginalCertificateNumber() {
		return GetterUtil.getString(_originalCertificateNumber);
	}

	@Override
	public Date getCertificateDate() {
		return _certificateDate;
	}

	@Override
	public void setCertificateDate(Date certificateDate) {
		_certificateDate = certificateDate;
	}

	@Override
	public long getVehicleRecordId() {
		return _vehicleRecordId;
	}

	@Override
	public void setVehicleRecordId(long vehicleRecordId) {
		_columnBitmask |= VEHICLERECORDID_COLUMN_BITMASK;

		if (!_setOriginalVehicleRecordId) {
			_setOriginalVehicleRecordId = true;

			_originalVehicleRecordId = _vehicleRecordId;
		}

		_vehicleRecordId = vehicleRecordId;
	}

	public long getOriginalVehicleRecordId() {
		return _originalVehicleRecordId;
	}

	@Override
	public String getFrameNo() {
		if (_frameNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _frameNo;
		}
	}

	@Override
	public void setFrameNo(String frameNo) {
		_frameNo = frameNo;
	}

	@Override
	public String getBoxNo() {
		if (_boxNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _boxNo;
		}
	}

	@Override
	public void setBoxNo(String boxNo) {
		_boxNo = boxNo;
	}

	@Override
	public String getVinNo() {
		if (_vinNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _vinNo;
		}
	}

	@Override
	public void setVinNo(String vinNo) {
		_vinNo = vinNo;
	}

	@Override
	public String getEngineNo() {
		if (_engineNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _engineNo;
		}
	}

	@Override
	public void setEngineNo(String engineNo) {
		_engineNo = engineNo;
	}

	@Override
	public String getQrCode() {
		if (_qrCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _qrCode;
		}
	}

	@Override
	public void setQrCode(String qrCode) {
		_qrCode = qrCode;
	}

	@Override
	public long getCopies() {
		return _copies;
	}

	@Override
	public void setCopies(long copies) {
		_copies = copies;
	}

	@Override
	public long getMarkupFulfill() {
		return _markupFulfill;
	}

	@Override
	public void setMarkupFulfill(long markupFulfill) {
		_markupFulfill = markupFulfill;
	}

	@Override
	public String getReplacedSerialNo() {
		if (_replacedSerialNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _replacedSerialNo;
		}
	}

	@Override
	public void setReplacedSerialNo(String replacedSerialNo) {
		_replacedSerialNo = replacedSerialNo;
	}

	@Override
	public String getRemark() {
		if (_remark == null) {
			return StringPool.BLANK;
		}
		else {
			return _remark;
		}
	}

	@Override
	public void setRemark(String remark) {
		_remark = remark;
	}

	@Override
	public long getInputSheetId() {
		return _inputSheetId;
	}

	@Override
	public void setInputSheetId(long inputSheetId) {
		_columnBitmask |= INPUTSHEETID_COLUMN_BITMASK;

		if (!_setOriginalInputSheetId) {
			_setOriginalInputSheetId = true;

			_originalInputSheetId = _inputSheetId;
		}

		_inputSheetId = inputSheetId;
	}

	public long getOriginalInputSheetId() {
		return _originalInputSheetId;
	}

	@Override
	public long getBookId() {
		return _bookId;
	}

	@Override
	public void setBookId(long bookId) {
		_columnBitmask |= BOOKID_COLUMN_BITMASK;

		if (!_setOriginalBookId) {
			_setOriginalBookId = true;

			_originalBookId = _bookId;
		}

		_bookId = bookId;
	}

	public long getOriginalBookId() {
		return _originalBookId;
	}

	@Override
	public long getPurchaserId() {
		return _purchaserId;
	}

	@Override
	public void setPurchaserId(long purchaserId) {
		_columnBitmask |= PURCHASERID_COLUMN_BITMASK;

		if (!_setOriginalPurchaserId) {
			_setOriginalPurchaserId = true;

			_originalPurchaserId = _purchaserId;
		}

		_purchaserId = purchaserId;
	}

	public long getOriginalPurchaserId() {
		return _originalPurchaserId;
	}

	@Override
	public long getCorporationId() {
		return _corporationId;
	}

	@Override
	public void setCorporationId(long corporationId) {
		_columnBitmask |= CORPORATIONID_COLUMN_BITMASK;

		if (!_setOriginalCorporationId) {
			_setOriginalCorporationId = true;

			_originalCorporationId = _corporationId;
		}

		_corporationId = corporationId;
	}

	public long getOriginalCorporationId() {
		return _originalCorporationId;
	}

	@Override
	public long getIssuingStatus() {
		return _issuingStatus;
	}

	@Override
	public void setIssuingStatus(long issuingStatus) {
		_issuingStatus = issuingStatus;
	}

	@Override
	public long getClearingStatus() {
		return _clearingStatus;
	}

	@Override
	public void setClearingStatus(long clearingStatus) {
		_clearingStatus = clearingStatus;
	}

	@Override
	public long getStampStatus() {
		return _stampStatus;
	}

	@Override
	public void setStampStatus(long stampStatus) {
		_stampStatus = stampStatus;
	}

	@Override
	public Date getIssuingDate() {
		return _issuingDate;
	}

	@Override
	public void setIssuingDate(Date issuingDate) {
		_issuingDate = issuingDate;
	}

	@Override
	public Date getPrintingDate() {
		return _printingDate;
	}

	@Override
	public void setPrintingDate(Date printingDate) {
		_printingDate = printingDate;
	}

	@Override
	public Date getNoticeofLostDate() {
		return _noticeofLostDate;
	}

	@Override
	public void setNoticeofLostDate(Date noticeofLostDate) {
		_noticeofLostDate = noticeofLostDate;
	}

	@Override
	public Date getNoticeofCancelDate() {
		return _noticeofCancelDate;
	}

	@Override
	public void setNoticeofCancelDate(Date noticeofCancelDate) {
		_noticeofCancelDate = noticeofCancelDate;
	}

	@Override
	public Date getNoticeofReturnDate() {
		return _noticeofReturnDate;
	}

	@Override
	public void setNoticeofReturnDate(Date noticeofReturnDate) {
		_noticeofReturnDate = noticeofReturnDate;
	}

	@Override
	public Date getClearingDate() {
		return _clearingDate;
	}

	@Override
	public void setClearingDate(Date clearingDate) {
		_clearingDate = clearingDate;
	}

	@Override
	public long getClearingAdvancePaymentID() {
		return _clearingAdvancePaymentID;
	}

	@Override
	public void setClearingAdvancePaymentID(long clearingAdvancePaymentID) {
		_clearingAdvancePaymentID = clearingAdvancePaymentID;
	}

	@Override
	public Date getModifyDate() {
		return _modifyDate;
	}

	@Override
	public void setModifyDate(Date modifyDate) {
		_columnBitmask = -1L;

		_modifyDate = modifyDate;
	}

	@Override
	public Date getSyncDate() {
		return _syncDate;
	}

	@Override
	public void setSyncDate(Date syncDate) {
		_syncDate = syncDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VRInputStampbookDetails.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VRInputStampbookDetails toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VRInputStampbookDetails)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VRInputStampbookDetailsImpl vrInputStampbookDetailsImpl = new VRInputStampbookDetailsImpl();

		vrInputStampbookDetailsImpl.setId(getId());
		vrInputStampbookDetailsImpl.setMtCore(getMtCore());
		vrInputStampbookDetailsImpl.setStampSerialNo(getStampSerialNo());
		vrInputStampbookDetailsImpl.setSequenceNo(getSequenceNo());
		vrInputStampbookDetailsImpl.setDossierId(getDossierId());
		vrInputStampbookDetailsImpl.setCertificateId(getCertificateId());
		vrInputStampbookDetailsImpl.setCertificateNumber(getCertificateNumber());
		vrInputStampbookDetailsImpl.setCertificateDate(getCertificateDate());
		vrInputStampbookDetailsImpl.setVehicleRecordId(getVehicleRecordId());
		vrInputStampbookDetailsImpl.setFrameNo(getFrameNo());
		vrInputStampbookDetailsImpl.setBoxNo(getBoxNo());
		vrInputStampbookDetailsImpl.setVinNo(getVinNo());
		vrInputStampbookDetailsImpl.setEngineNo(getEngineNo());
		vrInputStampbookDetailsImpl.setQrCode(getQrCode());
		vrInputStampbookDetailsImpl.setCopies(getCopies());
		vrInputStampbookDetailsImpl.setMarkupFulfill(getMarkupFulfill());
		vrInputStampbookDetailsImpl.setReplacedSerialNo(getReplacedSerialNo());
		vrInputStampbookDetailsImpl.setRemark(getRemark());
		vrInputStampbookDetailsImpl.setInputSheetId(getInputSheetId());
		vrInputStampbookDetailsImpl.setBookId(getBookId());
		vrInputStampbookDetailsImpl.setPurchaserId(getPurchaserId());
		vrInputStampbookDetailsImpl.setCorporationId(getCorporationId());
		vrInputStampbookDetailsImpl.setIssuingStatus(getIssuingStatus());
		vrInputStampbookDetailsImpl.setClearingStatus(getClearingStatus());
		vrInputStampbookDetailsImpl.setStampStatus(getStampStatus());
		vrInputStampbookDetailsImpl.setIssuingDate(getIssuingDate());
		vrInputStampbookDetailsImpl.setPrintingDate(getPrintingDate());
		vrInputStampbookDetailsImpl.setNoticeofLostDate(getNoticeofLostDate());
		vrInputStampbookDetailsImpl.setNoticeofCancelDate(getNoticeofCancelDate());
		vrInputStampbookDetailsImpl.setNoticeofReturnDate(getNoticeofReturnDate());
		vrInputStampbookDetailsImpl.setClearingDate(getClearingDate());
		vrInputStampbookDetailsImpl.setClearingAdvancePaymentID(getClearingAdvancePaymentID());
		vrInputStampbookDetailsImpl.setModifyDate(getModifyDate());
		vrInputStampbookDetailsImpl.setSyncDate(getSyncDate());

		vrInputStampbookDetailsImpl.resetOriginalValues();

		return vrInputStampbookDetailsImpl;
	}

	@Override
	public int compareTo(VRInputStampbookDetails vrInputStampbookDetails) {
		int value = 0;

		value = DateUtil.compareTo(getModifyDate(),
				vrInputStampbookDetails.getModifyDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VRInputStampbookDetails)) {
			return false;
		}

		VRInputStampbookDetails vrInputStampbookDetails = (VRInputStampbookDetails)obj;

		long primaryKey = vrInputStampbookDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VRInputStampbookDetailsModelImpl vrInputStampbookDetailsModelImpl = this;

		vrInputStampbookDetailsModelImpl._originalMtCore = vrInputStampbookDetailsModelImpl._mtCore;

		vrInputStampbookDetailsModelImpl._setOriginalMtCore = false;

		vrInputStampbookDetailsModelImpl._originalStampSerialNo = vrInputStampbookDetailsModelImpl._stampSerialNo;

		vrInputStampbookDetailsModelImpl._originalSequenceNo = vrInputStampbookDetailsModelImpl._sequenceNo;

		vrInputStampbookDetailsModelImpl._setOriginalSequenceNo = false;

		vrInputStampbookDetailsModelImpl._originalDossierId = vrInputStampbookDetailsModelImpl._dossierId;

		vrInputStampbookDetailsModelImpl._setOriginalDossierId = false;

		vrInputStampbookDetailsModelImpl._originalCertificateId = vrInputStampbookDetailsModelImpl._certificateId;

		vrInputStampbookDetailsModelImpl._setOriginalCertificateId = false;

		vrInputStampbookDetailsModelImpl._originalCertificateNumber = vrInputStampbookDetailsModelImpl._certificateNumber;

		vrInputStampbookDetailsModelImpl._originalVehicleRecordId = vrInputStampbookDetailsModelImpl._vehicleRecordId;

		vrInputStampbookDetailsModelImpl._setOriginalVehicleRecordId = false;

		vrInputStampbookDetailsModelImpl._originalInputSheetId = vrInputStampbookDetailsModelImpl._inputSheetId;

		vrInputStampbookDetailsModelImpl._setOriginalInputSheetId = false;

		vrInputStampbookDetailsModelImpl._originalBookId = vrInputStampbookDetailsModelImpl._bookId;

		vrInputStampbookDetailsModelImpl._setOriginalBookId = false;

		vrInputStampbookDetailsModelImpl._originalPurchaserId = vrInputStampbookDetailsModelImpl._purchaserId;

		vrInputStampbookDetailsModelImpl._setOriginalPurchaserId = false;

		vrInputStampbookDetailsModelImpl._originalCorporationId = vrInputStampbookDetailsModelImpl._corporationId;

		vrInputStampbookDetailsModelImpl._setOriginalCorporationId = false;

		vrInputStampbookDetailsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VRInputStampbookDetails> toCacheModel() {
		VRInputStampbookDetailsCacheModel vrInputStampbookDetailsCacheModel = new VRInputStampbookDetailsCacheModel();

		vrInputStampbookDetailsCacheModel.id = getId();

		vrInputStampbookDetailsCacheModel.mtCore = getMtCore();

		vrInputStampbookDetailsCacheModel.stampSerialNo = getStampSerialNo();

		String stampSerialNo = vrInputStampbookDetailsCacheModel.stampSerialNo;

		if ((stampSerialNo != null) && (stampSerialNo.length() == 0)) {
			vrInputStampbookDetailsCacheModel.stampSerialNo = null;
		}

		vrInputStampbookDetailsCacheModel.sequenceNo = getSequenceNo();

		vrInputStampbookDetailsCacheModel.dossierId = getDossierId();

		vrInputStampbookDetailsCacheModel.certificateId = getCertificateId();

		vrInputStampbookDetailsCacheModel.certificateNumber = getCertificateNumber();

		String certificateNumber = vrInputStampbookDetailsCacheModel.certificateNumber;

		if ((certificateNumber != null) && (certificateNumber.length() == 0)) {
			vrInputStampbookDetailsCacheModel.certificateNumber = null;
		}

		Date certificateDate = getCertificateDate();

		if (certificateDate != null) {
			vrInputStampbookDetailsCacheModel.certificateDate = certificateDate.getTime();
		}
		else {
			vrInputStampbookDetailsCacheModel.certificateDate = Long.MIN_VALUE;
		}

		vrInputStampbookDetailsCacheModel.vehicleRecordId = getVehicleRecordId();

		vrInputStampbookDetailsCacheModel.frameNo = getFrameNo();

		String frameNo = vrInputStampbookDetailsCacheModel.frameNo;

		if ((frameNo != null) && (frameNo.length() == 0)) {
			vrInputStampbookDetailsCacheModel.frameNo = null;
		}

		vrInputStampbookDetailsCacheModel.boxNo = getBoxNo();

		String boxNo = vrInputStampbookDetailsCacheModel.boxNo;

		if ((boxNo != null) && (boxNo.length() == 0)) {
			vrInputStampbookDetailsCacheModel.boxNo = null;
		}

		vrInputStampbookDetailsCacheModel.vinNo = getVinNo();

		String vinNo = vrInputStampbookDetailsCacheModel.vinNo;

		if ((vinNo != null) && (vinNo.length() == 0)) {
			vrInputStampbookDetailsCacheModel.vinNo = null;
		}

		vrInputStampbookDetailsCacheModel.engineNo = getEngineNo();

		String engineNo = vrInputStampbookDetailsCacheModel.engineNo;

		if ((engineNo != null) && (engineNo.length() == 0)) {
			vrInputStampbookDetailsCacheModel.engineNo = null;
		}

		vrInputStampbookDetailsCacheModel.qrCode = getQrCode();

		String qrCode = vrInputStampbookDetailsCacheModel.qrCode;

		if ((qrCode != null) && (qrCode.length() == 0)) {
			vrInputStampbookDetailsCacheModel.qrCode = null;
		}

		vrInputStampbookDetailsCacheModel.copies = getCopies();

		vrInputStampbookDetailsCacheModel.markupFulfill = getMarkupFulfill();

		vrInputStampbookDetailsCacheModel.replacedSerialNo = getReplacedSerialNo();

		String replacedSerialNo = vrInputStampbookDetailsCacheModel.replacedSerialNo;

		if ((replacedSerialNo != null) && (replacedSerialNo.length() == 0)) {
			vrInputStampbookDetailsCacheModel.replacedSerialNo = null;
		}

		vrInputStampbookDetailsCacheModel.remark = getRemark();

		String remark = vrInputStampbookDetailsCacheModel.remark;

		if ((remark != null) && (remark.length() == 0)) {
			vrInputStampbookDetailsCacheModel.remark = null;
		}

		vrInputStampbookDetailsCacheModel.inputSheetId = getInputSheetId();

		vrInputStampbookDetailsCacheModel.bookId = getBookId();

		vrInputStampbookDetailsCacheModel.purchaserId = getPurchaserId();

		vrInputStampbookDetailsCacheModel.corporationId = getCorporationId();

		vrInputStampbookDetailsCacheModel.issuingStatus = getIssuingStatus();

		vrInputStampbookDetailsCacheModel.clearingStatus = getClearingStatus();

		vrInputStampbookDetailsCacheModel.stampStatus = getStampStatus();

		Date issuingDate = getIssuingDate();

		if (issuingDate != null) {
			vrInputStampbookDetailsCacheModel.issuingDate = issuingDate.getTime();
		}
		else {
			vrInputStampbookDetailsCacheModel.issuingDate = Long.MIN_VALUE;
		}

		Date printingDate = getPrintingDate();

		if (printingDate != null) {
			vrInputStampbookDetailsCacheModel.printingDate = printingDate.getTime();
		}
		else {
			vrInputStampbookDetailsCacheModel.printingDate = Long.MIN_VALUE;
		}

		Date noticeofLostDate = getNoticeofLostDate();

		if (noticeofLostDate != null) {
			vrInputStampbookDetailsCacheModel.noticeofLostDate = noticeofLostDate.getTime();
		}
		else {
			vrInputStampbookDetailsCacheModel.noticeofLostDate = Long.MIN_VALUE;
		}

		Date noticeofCancelDate = getNoticeofCancelDate();

		if (noticeofCancelDate != null) {
			vrInputStampbookDetailsCacheModel.noticeofCancelDate = noticeofCancelDate.getTime();
		}
		else {
			vrInputStampbookDetailsCacheModel.noticeofCancelDate = Long.MIN_VALUE;
		}

		Date noticeofReturnDate = getNoticeofReturnDate();

		if (noticeofReturnDate != null) {
			vrInputStampbookDetailsCacheModel.noticeofReturnDate = noticeofReturnDate.getTime();
		}
		else {
			vrInputStampbookDetailsCacheModel.noticeofReturnDate = Long.MIN_VALUE;
		}

		Date clearingDate = getClearingDate();

		if (clearingDate != null) {
			vrInputStampbookDetailsCacheModel.clearingDate = clearingDate.getTime();
		}
		else {
			vrInputStampbookDetailsCacheModel.clearingDate = Long.MIN_VALUE;
		}

		vrInputStampbookDetailsCacheModel.clearingAdvancePaymentID = getClearingAdvancePaymentID();

		Date modifyDate = getModifyDate();

		if (modifyDate != null) {
			vrInputStampbookDetailsCacheModel.modifyDate = modifyDate.getTime();
		}
		else {
			vrInputStampbookDetailsCacheModel.modifyDate = Long.MIN_VALUE;
		}

		Date syncDate = getSyncDate();

		if (syncDate != null) {
			vrInputStampbookDetailsCacheModel.syncDate = syncDate.getTime();
		}
		else {
			vrInputStampbookDetailsCacheModel.syncDate = Long.MIN_VALUE;
		}

		return vrInputStampbookDetailsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(69);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", mtCore=");
		sb.append(getMtCore());
		sb.append(", stampSerialNo=");
		sb.append(getStampSerialNo());
		sb.append(", sequenceNo=");
		sb.append(getSequenceNo());
		sb.append(", dossierId=");
		sb.append(getDossierId());
		sb.append(", certificateId=");
		sb.append(getCertificateId());
		sb.append(", certificateNumber=");
		sb.append(getCertificateNumber());
		sb.append(", certificateDate=");
		sb.append(getCertificateDate());
		sb.append(", vehicleRecordId=");
		sb.append(getVehicleRecordId());
		sb.append(", frameNo=");
		sb.append(getFrameNo());
		sb.append(", boxNo=");
		sb.append(getBoxNo());
		sb.append(", vinNo=");
		sb.append(getVinNo());
		sb.append(", engineNo=");
		sb.append(getEngineNo());
		sb.append(", qrCode=");
		sb.append(getQrCode());
		sb.append(", copies=");
		sb.append(getCopies());
		sb.append(", markupFulfill=");
		sb.append(getMarkupFulfill());
		sb.append(", replacedSerialNo=");
		sb.append(getReplacedSerialNo());
		sb.append(", remark=");
		sb.append(getRemark());
		sb.append(", inputSheetId=");
		sb.append(getInputSheetId());
		sb.append(", bookId=");
		sb.append(getBookId());
		sb.append(", purchaserId=");
		sb.append(getPurchaserId());
		sb.append(", corporationId=");
		sb.append(getCorporationId());
		sb.append(", issuingStatus=");
		sb.append(getIssuingStatus());
		sb.append(", clearingStatus=");
		sb.append(getClearingStatus());
		sb.append(", stampStatus=");
		sb.append(getStampStatus());
		sb.append(", issuingDate=");
		sb.append(getIssuingDate());
		sb.append(", printingDate=");
		sb.append(getPrintingDate());
		sb.append(", noticeofLostDate=");
		sb.append(getNoticeofLostDate());
		sb.append(", noticeofCancelDate=");
		sb.append(getNoticeofCancelDate());
		sb.append(", noticeofReturnDate=");
		sb.append(getNoticeofReturnDate());
		sb.append(", clearingDate=");
		sb.append(getClearingDate());
		sb.append(", clearingAdvancePaymentID=");
		sb.append(getClearingAdvancePaymentID());
		sb.append(", modifyDate=");
		sb.append(getModifyDate());
		sb.append(", syncDate=");
		sb.append(getSyncDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(106);

		sb.append("<model><model-name>");
		sb.append("com.fds.vr.business.model.VRInputStampbookDetails");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mtCore</column-name><column-value><![CDATA[");
		sb.append(getMtCore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stampSerialNo</column-name><column-value><![CDATA[");
		sb.append(getStampSerialNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sequenceNo</column-name><column-value><![CDATA[");
		sb.append(getSequenceNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierId</column-name><column-value><![CDATA[");
		sb.append(getDossierId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateId</column-name><column-value><![CDATA[");
		sb.append(getCertificateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateNumber</column-name><column-value><![CDATA[");
		sb.append(getCertificateNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateDate</column-name><column-value><![CDATA[");
		sb.append(getCertificateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleRecordId</column-name><column-value><![CDATA[");
		sb.append(getVehicleRecordId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>frameNo</column-name><column-value><![CDATA[");
		sb.append(getFrameNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>boxNo</column-name><column-value><![CDATA[");
		sb.append(getBoxNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vinNo</column-name><column-value><![CDATA[");
		sb.append(getVinNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>engineNo</column-name><column-value><![CDATA[");
		sb.append(getEngineNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>qrCode</column-name><column-value><![CDATA[");
		sb.append(getQrCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copies</column-name><column-value><![CDATA[");
		sb.append(getCopies());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupFulfill</column-name><column-value><![CDATA[");
		sb.append(getMarkupFulfill());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>replacedSerialNo</column-name><column-value><![CDATA[");
		sb.append(getReplacedSerialNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remark</column-name><column-value><![CDATA[");
		sb.append(getRemark());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inputSheetId</column-name><column-value><![CDATA[");
		sb.append(getInputSheetId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bookId</column-name><column-value><![CDATA[");
		sb.append(getBookId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>purchaserId</column-name><column-value><![CDATA[");
		sb.append(getPurchaserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>corporationId</column-name><column-value><![CDATA[");
		sb.append(getCorporationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issuingStatus</column-name><column-value><![CDATA[");
		sb.append(getIssuingStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>clearingStatus</column-name><column-value><![CDATA[");
		sb.append(getClearingStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stampStatus</column-name><column-value><![CDATA[");
		sb.append(getStampStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issuingDate</column-name><column-value><![CDATA[");
		sb.append(getIssuingDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>printingDate</column-name><column-value><![CDATA[");
		sb.append(getPrintingDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>noticeofLostDate</column-name><column-value><![CDATA[");
		sb.append(getNoticeofLostDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>noticeofCancelDate</column-name><column-value><![CDATA[");
		sb.append(getNoticeofCancelDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>noticeofReturnDate</column-name><column-value><![CDATA[");
		sb.append(getNoticeofReturnDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>clearingDate</column-name><column-value><![CDATA[");
		sb.append(getClearingDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>clearingAdvancePaymentID</column-name><column-value><![CDATA[");
		sb.append(getClearingAdvancePaymentID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifyDate</column-name><column-value><![CDATA[");
		sb.append(getModifyDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncDate</column-name><column-value><![CDATA[");
		sb.append(getSyncDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VRInputStampbookDetails.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VRInputStampbookDetails.class
		};
	private long _id;
	private long _mtCore;
	private long _originalMtCore;
	private boolean _setOriginalMtCore;
	private String _stampSerialNo;
	private String _originalStampSerialNo;
	private long _sequenceNo;
	private long _originalSequenceNo;
	private boolean _setOriginalSequenceNo;
	private long _dossierId;
	private long _originalDossierId;
	private boolean _setOriginalDossierId;
	private long _certificateId;
	private long _originalCertificateId;
	private boolean _setOriginalCertificateId;
	private String _certificateNumber;
	private String _originalCertificateNumber;
	private Date _certificateDate;
	private long _vehicleRecordId;
	private long _originalVehicleRecordId;
	private boolean _setOriginalVehicleRecordId;
	private String _frameNo;
	private String _boxNo;
	private String _vinNo;
	private String _engineNo;
	private String _qrCode;
	private long _copies;
	private long _markupFulfill;
	private String _replacedSerialNo;
	private String _remark;
	private long _inputSheetId;
	private long _originalInputSheetId;
	private boolean _setOriginalInputSheetId;
	private long _bookId;
	private long _originalBookId;
	private boolean _setOriginalBookId;
	private long _purchaserId;
	private long _originalPurchaserId;
	private boolean _setOriginalPurchaserId;
	private long _corporationId;
	private long _originalCorporationId;
	private boolean _setOriginalCorporationId;
	private long _issuingStatus;
	private long _clearingStatus;
	private long _stampStatus;
	private Date _issuingDate;
	private Date _printingDate;
	private Date _noticeofLostDate;
	private Date _noticeofCancelDate;
	private Date _noticeofReturnDate;
	private Date _clearingDate;
	private long _clearingAdvancePaymentID;
	private Date _modifyDate;
	private Date _syncDate;
	private long _columnBitmask;
	private VRInputStampbookDetails _escapedModel;
}