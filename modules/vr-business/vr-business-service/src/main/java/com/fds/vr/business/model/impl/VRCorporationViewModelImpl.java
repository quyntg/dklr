/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.business.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.business.model.VRCorporationView;
import com.fds.vr.business.model.VRCorporationViewModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VRCorporationView service. Represents a row in the &quot;vr_corporation_view&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VRCorporationViewModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VRCorporationViewImpl}.
 * </p>
 *
 * @author LamTV
 * @see VRCorporationViewImpl
 * @see VRCorporationView
 * @see VRCorporationViewModel
 * @generated
 */
@ProviderType
public class VRCorporationViewModelImpl extends BaseModelImpl<VRCorporationView>
	implements VRCorporationViewModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vr corporation view model instance should use the {@link VRCorporationView} interface instead.
	 */
	public static final String TABLE_NAME = "vr_corporation_view";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "mtCore", Types.BIGINT },
			{ "corporationid", Types.VARCHAR },
			{ "corporationname", Types.VARCHAR },
			{ "inspectorid", Types.BIGINT },
			{ "isleader", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mtCore", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("corporationid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("corporationname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectorid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("isleader", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table vr_corporation_view (id LONG not null primary key,mtCore LONG,corporationid VARCHAR(75) null,corporationname VARCHAR(75) null,inspectorid LONG,isleader INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table vr_corporation_view";
	public static final String ORDER_BY_JPQL = " ORDER BY vrCorporationView.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_corporation_view.id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fds.vr.business.model.VRCorporationView"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fds.vr.business.model.VRCorporationView"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fds.vr.business.model.VRCorporationView"),
			true);
	public static final long CORPORATIONID_COLUMN_BITMASK = 1L;
	public static final long INSPECTORID_COLUMN_BITMASK = 2L;
	public static final long ISLEADER_COLUMN_BITMASK = 4L;
	public static final long ID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.fds.vr.service.util.ServiceProps.get(
				"lock.expiration.time.com.fds.vr.business.model.VRCorporationView"));

	public VRCorporationViewModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VRCorporationView.class;
	}

	@Override
	public String getModelClassName() {
		return VRCorporationView.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("mtCore", getMtCore());
		attributes.put("corporationId", getCorporationId());
		attributes.put("corporationName", getCorporationName());
		attributes.put("inspectorId", getInspectorId());
		attributes.put("isLeader", getIsLeader());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long mtCore = (Long)attributes.get("mtCore");

		if (mtCore != null) {
			setMtCore(mtCore);
		}

		String corporationId = (String)attributes.get("corporationId");

		if (corporationId != null) {
			setCorporationId(corporationId);
		}

		String corporationName = (String)attributes.get("corporationName");

		if (corporationName != null) {
			setCorporationName(corporationName);
		}

		Long inspectorId = (Long)attributes.get("inspectorId");

		if (inspectorId != null) {
			setInspectorId(inspectorId);
		}

		Integer isLeader = (Integer)attributes.get("isLeader");

		if (isLeader != null) {
			setIsLeader(isLeader);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@Override
	public long getMtCore() {
		return _mtCore;
	}

	@Override
	public void setMtCore(long mtCore) {
		_mtCore = mtCore;
	}

	@Override
	public String getCorporationId() {
		if (_corporationId == null) {
			return StringPool.BLANK;
		}
		else {
			return _corporationId;
		}
	}

	@Override
	public void setCorporationId(String corporationId) {
		_columnBitmask |= CORPORATIONID_COLUMN_BITMASK;

		if (_originalCorporationId == null) {
			_originalCorporationId = _corporationId;
		}

		_corporationId = corporationId;
	}

	public String getOriginalCorporationId() {
		return GetterUtil.getString(_originalCorporationId);
	}

	@Override
	public String getCorporationName() {
		if (_corporationName == null) {
			return StringPool.BLANK;
		}
		else {
			return _corporationName;
		}
	}

	@Override
	public void setCorporationName(String corporationName) {
		_corporationName = corporationName;
	}

	@Override
	public long getInspectorId() {
		return _inspectorId;
	}

	@Override
	public void setInspectorId(long inspectorId) {
		_columnBitmask |= INSPECTORID_COLUMN_BITMASK;

		if (!_setOriginalInspectorId) {
			_setOriginalInspectorId = true;

			_originalInspectorId = _inspectorId;
		}

		_inspectorId = inspectorId;
	}

	public long getOriginalInspectorId() {
		return _originalInspectorId;
	}

	@Override
	public int getIsLeader() {
		return _isLeader;
	}

	@Override
	public void setIsLeader(int isLeader) {
		_columnBitmask |= ISLEADER_COLUMN_BITMASK;

		if (!_setOriginalIsLeader) {
			_setOriginalIsLeader = true;

			_originalIsLeader = _isLeader;
		}

		_isLeader = isLeader;
	}

	public int getOriginalIsLeader() {
		return _originalIsLeader;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VRCorporationView.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VRCorporationView toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VRCorporationView)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VRCorporationViewImpl vrCorporationViewImpl = new VRCorporationViewImpl();

		vrCorporationViewImpl.setId(getId());
		vrCorporationViewImpl.setMtCore(getMtCore());
		vrCorporationViewImpl.setCorporationId(getCorporationId());
		vrCorporationViewImpl.setCorporationName(getCorporationName());
		vrCorporationViewImpl.setInspectorId(getInspectorId());
		vrCorporationViewImpl.setIsLeader(getIsLeader());

		vrCorporationViewImpl.resetOriginalValues();

		return vrCorporationViewImpl;
	}

	@Override
	public int compareTo(VRCorporationView vrCorporationView) {
		int value = 0;

		if (getId() < vrCorporationView.getId()) {
			value = -1;
		}
		else if (getId() > vrCorporationView.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VRCorporationView)) {
			return false;
		}

		VRCorporationView vrCorporationView = (VRCorporationView)obj;

		long primaryKey = vrCorporationView.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VRCorporationViewModelImpl vrCorporationViewModelImpl = this;

		vrCorporationViewModelImpl._originalCorporationId = vrCorporationViewModelImpl._corporationId;

		vrCorporationViewModelImpl._originalInspectorId = vrCorporationViewModelImpl._inspectorId;

		vrCorporationViewModelImpl._setOriginalInspectorId = false;

		vrCorporationViewModelImpl._originalIsLeader = vrCorporationViewModelImpl._isLeader;

		vrCorporationViewModelImpl._setOriginalIsLeader = false;

		vrCorporationViewModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VRCorporationView> toCacheModel() {
		VRCorporationViewCacheModel vrCorporationViewCacheModel = new VRCorporationViewCacheModel();

		vrCorporationViewCacheModel.id = getId();

		vrCorporationViewCacheModel.mtCore = getMtCore();

		vrCorporationViewCacheModel.corporationId = getCorporationId();

		String corporationId = vrCorporationViewCacheModel.corporationId;

		if ((corporationId != null) && (corporationId.length() == 0)) {
			vrCorporationViewCacheModel.corporationId = null;
		}

		vrCorporationViewCacheModel.corporationName = getCorporationName();

		String corporationName = vrCorporationViewCacheModel.corporationName;

		if ((corporationName != null) && (corporationName.length() == 0)) {
			vrCorporationViewCacheModel.corporationName = null;
		}

		vrCorporationViewCacheModel.inspectorId = getInspectorId();

		vrCorporationViewCacheModel.isLeader = getIsLeader();

		return vrCorporationViewCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", mtCore=");
		sb.append(getMtCore());
		sb.append(", corporationId=");
		sb.append(getCorporationId());
		sb.append(", corporationName=");
		sb.append(getCorporationName());
		sb.append(", inspectorId=");
		sb.append(getInspectorId());
		sb.append(", isLeader=");
		sb.append(getIsLeader());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.fds.vr.business.model.VRCorporationView");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mtCore</column-name><column-value><![CDATA[");
		sb.append(getMtCore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>corporationId</column-name><column-value><![CDATA[");
		sb.append(getCorporationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>corporationName</column-name><column-value><![CDATA[");
		sb.append(getCorporationName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorId</column-name><column-value><![CDATA[");
		sb.append(getInspectorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isLeader</column-name><column-value><![CDATA[");
		sb.append(getIsLeader());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VRCorporationView.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VRCorporationView.class
		};
	private long _id;
	private long _mtCore;
	private String _corporationId;
	private String _originalCorporationId;
	private String _corporationName;
	private long _inspectorId;
	private long _originalInspectorId;
	private boolean _setOriginalInspectorId;
	private int _isLeader;
	private int _originalIsLeader;
	private boolean _setOriginalIsLeader;
	private long _columnBitmask;
	private VRCorporationView _escapedModel;
}