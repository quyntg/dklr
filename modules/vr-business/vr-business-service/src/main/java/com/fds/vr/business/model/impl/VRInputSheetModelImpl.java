/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.business.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.business.model.VRInputSheet;
import com.fds.vr.business.model.VRInputSheetModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VRInputSheet service. Represents a row in the &quot;vr_inputsheet&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VRInputSheetModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VRInputSheetImpl}.
 * </p>
 *
 * @author LamTV
 * @see VRInputSheetImpl
 * @see VRInputSheet
 * @see VRInputSheetModel
 * @generated
 */
@ProviderType
public class VRInputSheetModelImpl extends BaseModelImpl<VRInputSheet>
	implements VRInputSheetModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vr input sheet model instance should use the {@link VRInputSheet} interface instead.
	 */
	public static final String TABLE_NAME = "vr_inputsheet";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "mtCore", Types.BIGINT },
			{ "inputSheetNo", Types.VARCHAR },
			{ "inputSheetDate", Types.TIMESTAMP },
			{ "originalDocumentNo", Types.VARCHAR },
			{ "corporationId", Types.BIGINT },
			{ "inputSheetType", Types.BIGINT },
			{ "maker", Types.VARCHAR },
			{ "checker", Types.VARCHAR },
			{ "approver", Types.VARCHAR },
			{ "deliveryName", Types.VARCHAR },
			{ "inventoryName", Types.VARCHAR },
			{ "inventoryPlace", Types.VARCHAR },
			{ "inventoryDate", Types.TIMESTAMP },
			{ "bookIDList", Types.VARCHAR },
			{ "isApproval", Types.BIGINT },
			{ "totalQuantities", Types.BIGINT },
			{ "totalAmount", Types.BIGINT },
			{ "amountInWords", Types.VARCHAR },
			{ "remark", Types.VARCHAR },
			{ "modifyDate", Types.TIMESTAMP },
			{ "syncDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mtCore", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("inputSheetNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inputSheetDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("originalDocumentNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("corporationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("inputSheetType", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("maker", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("checker", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("approver", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deliveryName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inventoryName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inventoryPlace", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inventoryDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("bookIDList", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isApproval", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("totalQuantities", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("totalAmount", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("amountInWords", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("remark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modifyDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("syncDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table vr_inputsheet (id LONG not null primary key,mtCore LONG,inputSheetNo VARCHAR(75) null,inputSheetDate DATE null,originalDocumentNo VARCHAR(75) null,corporationId LONG,inputSheetType LONG,maker VARCHAR(75) null,checker VARCHAR(75) null,approver VARCHAR(75) null,deliveryName VARCHAR(75) null,inventoryName VARCHAR(75) null,inventoryPlace VARCHAR(75) null,inventoryDate DATE null,bookIDList VARCHAR(75) null,isApproval LONG,totalQuantities LONG,totalAmount LONG,amountInWords VARCHAR(75) null,remark VARCHAR(75) null,modifyDate DATE null,syncDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table vr_inputsheet";
	public static final String ORDER_BY_JPQL = " ORDER BY vrInputSheet.modifyDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_inputsheet.modifyDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fds.vr.business.model.VRInputSheet"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fds.vr.business.model.VRInputSheet"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fds.vr.business.model.VRInputSheet"),
			true);
	public static final long CORPORATIONID_COLUMN_BITMASK = 1L;
	public static final long INPUTSHEETNO_COLUMN_BITMASK = 2L;
	public static final long INPUTSHEETTYPE_COLUMN_BITMASK = 4L;
	public static final long MTCORE_COLUMN_BITMASK = 8L;
	public static final long MODIFYDATE_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.fds.vr.service.util.ServiceProps.get(
				"lock.expiration.time.com.fds.vr.business.model.VRInputSheet"));

	public VRInputSheetModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VRInputSheet.class;
	}

	@Override
	public String getModelClassName() {
		return VRInputSheet.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("mtCore", getMtCore());
		attributes.put("inputSheetNo", getInputSheetNo());
		attributes.put("inputSheetDate", getInputSheetDate());
		attributes.put("originalDocumentNo", getOriginalDocumentNo());
		attributes.put("corporationId", getCorporationId());
		attributes.put("inputSheetType", getInputSheetType());
		attributes.put("maker", getMaker());
		attributes.put("checker", getChecker());
		attributes.put("approver", getApprover());
		attributes.put("deliveryName", getDeliveryName());
		attributes.put("inventoryName", getInventoryName());
		attributes.put("inventoryPlace", getInventoryPlace());
		attributes.put("inventoryDate", getInventoryDate());
		attributes.put("bookIDList", getBookIDList());
		attributes.put("isApproval", getIsApproval());
		attributes.put("totalQuantities", getTotalQuantities());
		attributes.put("totalAmount", getTotalAmount());
		attributes.put("amountInWords", getAmountInWords());
		attributes.put("remark", getRemark());
		attributes.put("modifyDate", getModifyDate());
		attributes.put("syncDate", getSyncDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long mtCore = (Long)attributes.get("mtCore");

		if (mtCore != null) {
			setMtCore(mtCore);
		}

		String inputSheetNo = (String)attributes.get("inputSheetNo");

		if (inputSheetNo != null) {
			setInputSheetNo(inputSheetNo);
		}

		Date inputSheetDate = (Date)attributes.get("inputSheetDate");

		if (inputSheetDate != null) {
			setInputSheetDate(inputSheetDate);
		}

		String originalDocumentNo = (String)attributes.get("originalDocumentNo");

		if (originalDocumentNo != null) {
			setOriginalDocumentNo(originalDocumentNo);
		}

		Long corporationId = (Long)attributes.get("corporationId");

		if (corporationId != null) {
			setCorporationId(corporationId);
		}

		Long inputSheetType = (Long)attributes.get("inputSheetType");

		if (inputSheetType != null) {
			setInputSheetType(inputSheetType);
		}

		String maker = (String)attributes.get("maker");

		if (maker != null) {
			setMaker(maker);
		}

		String checker = (String)attributes.get("checker");

		if (checker != null) {
			setChecker(checker);
		}

		String approver = (String)attributes.get("approver");

		if (approver != null) {
			setApprover(approver);
		}

		String deliveryName = (String)attributes.get("deliveryName");

		if (deliveryName != null) {
			setDeliveryName(deliveryName);
		}

		String inventoryName = (String)attributes.get("inventoryName");

		if (inventoryName != null) {
			setInventoryName(inventoryName);
		}

		String inventoryPlace = (String)attributes.get("inventoryPlace");

		if (inventoryPlace != null) {
			setInventoryPlace(inventoryPlace);
		}

		Date inventoryDate = (Date)attributes.get("inventoryDate");

		if (inventoryDate != null) {
			setInventoryDate(inventoryDate);
		}

		String bookIDList = (String)attributes.get("bookIDList");

		if (bookIDList != null) {
			setBookIDList(bookIDList);
		}

		Long isApproval = (Long)attributes.get("isApproval");

		if (isApproval != null) {
			setIsApproval(isApproval);
		}

		Long totalQuantities = (Long)attributes.get("totalQuantities");

		if (totalQuantities != null) {
			setTotalQuantities(totalQuantities);
		}

		Long totalAmount = (Long)attributes.get("totalAmount");

		if (totalAmount != null) {
			setTotalAmount(totalAmount);
		}

		String amountInWords = (String)attributes.get("amountInWords");

		if (amountInWords != null) {
			setAmountInWords(amountInWords);
		}

		String remark = (String)attributes.get("remark");

		if (remark != null) {
			setRemark(remark);
		}

		Date modifyDate = (Date)attributes.get("modifyDate");

		if (modifyDate != null) {
			setModifyDate(modifyDate);
		}

		Date syncDate = (Date)attributes.get("syncDate");

		if (syncDate != null) {
			setSyncDate(syncDate);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getMtCore() {
		return _mtCore;
	}

	@Override
	public void setMtCore(long mtCore) {
		_columnBitmask |= MTCORE_COLUMN_BITMASK;

		if (!_setOriginalMtCore) {
			_setOriginalMtCore = true;

			_originalMtCore = _mtCore;
		}

		_mtCore = mtCore;
	}

	public long getOriginalMtCore() {
		return _originalMtCore;
	}

	@Override
	public String getInputSheetNo() {
		if (_inputSheetNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _inputSheetNo;
		}
	}

	@Override
	public void setInputSheetNo(String inputSheetNo) {
		_columnBitmask |= INPUTSHEETNO_COLUMN_BITMASK;

		if (_originalInputSheetNo == null) {
			_originalInputSheetNo = _inputSheetNo;
		}

		_inputSheetNo = inputSheetNo;
	}

	public String getOriginalInputSheetNo() {
		return GetterUtil.getString(_originalInputSheetNo);
	}

	@Override
	public Date getInputSheetDate() {
		return _inputSheetDate;
	}

	@Override
	public void setInputSheetDate(Date inputSheetDate) {
		_inputSheetDate = inputSheetDate;
	}

	@Override
	public String getOriginalDocumentNo() {
		if (_originalDocumentNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _originalDocumentNo;
		}
	}

	@Override
	public void setOriginalDocumentNo(String originalDocumentNo) {
		_originalDocumentNo = originalDocumentNo;
	}

	@Override
	public long getCorporationId() {
		return _corporationId;
	}

	@Override
	public void setCorporationId(long corporationId) {
		_columnBitmask |= CORPORATIONID_COLUMN_BITMASK;

		if (!_setOriginalCorporationId) {
			_setOriginalCorporationId = true;

			_originalCorporationId = _corporationId;
		}

		_corporationId = corporationId;
	}

	public long getOriginalCorporationId() {
		return _originalCorporationId;
	}

	@Override
	public long getInputSheetType() {
		return _inputSheetType;
	}

	@Override
	public void setInputSheetType(long inputSheetType) {
		_columnBitmask |= INPUTSHEETTYPE_COLUMN_BITMASK;

		if (!_setOriginalInputSheetType) {
			_setOriginalInputSheetType = true;

			_originalInputSheetType = _inputSheetType;
		}

		_inputSheetType = inputSheetType;
	}

	public long getOriginalInputSheetType() {
		return _originalInputSheetType;
	}

	@Override
	public String getMaker() {
		if (_maker == null) {
			return StringPool.BLANK;
		}
		else {
			return _maker;
		}
	}

	@Override
	public void setMaker(String maker) {
		_maker = maker;
	}

	@Override
	public String getChecker() {
		if (_checker == null) {
			return StringPool.BLANK;
		}
		else {
			return _checker;
		}
	}

	@Override
	public void setChecker(String checker) {
		_checker = checker;
	}

	@Override
	public String getApprover() {
		if (_approver == null) {
			return StringPool.BLANK;
		}
		else {
			return _approver;
		}
	}

	@Override
	public void setApprover(String approver) {
		_approver = approver;
	}

	@Override
	public String getDeliveryName() {
		if (_deliveryName == null) {
			return StringPool.BLANK;
		}
		else {
			return _deliveryName;
		}
	}

	@Override
	public void setDeliveryName(String deliveryName) {
		_deliveryName = deliveryName;
	}

	@Override
	public String getInventoryName() {
		if (_inventoryName == null) {
			return StringPool.BLANK;
		}
		else {
			return _inventoryName;
		}
	}

	@Override
	public void setInventoryName(String inventoryName) {
		_inventoryName = inventoryName;
	}

	@Override
	public String getInventoryPlace() {
		if (_inventoryPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _inventoryPlace;
		}
	}

	@Override
	public void setInventoryPlace(String inventoryPlace) {
		_inventoryPlace = inventoryPlace;
	}

	@Override
	public Date getInventoryDate() {
		return _inventoryDate;
	}

	@Override
	public void setInventoryDate(Date inventoryDate) {
		_inventoryDate = inventoryDate;
	}

	@Override
	public String getBookIDList() {
		if (_bookIDList == null) {
			return StringPool.BLANK;
		}
		else {
			return _bookIDList;
		}
	}

	@Override
	public void setBookIDList(String bookIDList) {
		_bookIDList = bookIDList;
	}

	@Override
	public long getIsApproval() {
		return _isApproval;
	}

	@Override
	public void setIsApproval(long isApproval) {
		_isApproval = isApproval;
	}

	@Override
	public long getTotalQuantities() {
		return _totalQuantities;
	}

	@Override
	public void setTotalQuantities(long totalQuantities) {
		_totalQuantities = totalQuantities;
	}

	@Override
	public long getTotalAmount() {
		return _totalAmount;
	}

	@Override
	public void setTotalAmount(long totalAmount) {
		_totalAmount = totalAmount;
	}

	@Override
	public String getAmountInWords() {
		if (_amountInWords == null) {
			return StringPool.BLANK;
		}
		else {
			return _amountInWords;
		}
	}

	@Override
	public void setAmountInWords(String amountInWords) {
		_amountInWords = amountInWords;
	}

	@Override
	public String getRemark() {
		if (_remark == null) {
			return StringPool.BLANK;
		}
		else {
			return _remark;
		}
	}

	@Override
	public void setRemark(String remark) {
		_remark = remark;
	}

	@Override
	public Date getModifyDate() {
		return _modifyDate;
	}

	@Override
	public void setModifyDate(Date modifyDate) {
		_columnBitmask = -1L;

		_modifyDate = modifyDate;
	}

	@Override
	public Date getSyncDate() {
		return _syncDate;
	}

	@Override
	public void setSyncDate(Date syncDate) {
		_syncDate = syncDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VRInputSheet.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VRInputSheet toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VRInputSheet)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VRInputSheetImpl vrInputSheetImpl = new VRInputSheetImpl();

		vrInputSheetImpl.setId(getId());
		vrInputSheetImpl.setMtCore(getMtCore());
		vrInputSheetImpl.setInputSheetNo(getInputSheetNo());
		vrInputSheetImpl.setInputSheetDate(getInputSheetDate());
		vrInputSheetImpl.setOriginalDocumentNo(getOriginalDocumentNo());
		vrInputSheetImpl.setCorporationId(getCorporationId());
		vrInputSheetImpl.setInputSheetType(getInputSheetType());
		vrInputSheetImpl.setMaker(getMaker());
		vrInputSheetImpl.setChecker(getChecker());
		vrInputSheetImpl.setApprover(getApprover());
		vrInputSheetImpl.setDeliveryName(getDeliveryName());
		vrInputSheetImpl.setInventoryName(getInventoryName());
		vrInputSheetImpl.setInventoryPlace(getInventoryPlace());
		vrInputSheetImpl.setInventoryDate(getInventoryDate());
		vrInputSheetImpl.setBookIDList(getBookIDList());
		vrInputSheetImpl.setIsApproval(getIsApproval());
		vrInputSheetImpl.setTotalQuantities(getTotalQuantities());
		vrInputSheetImpl.setTotalAmount(getTotalAmount());
		vrInputSheetImpl.setAmountInWords(getAmountInWords());
		vrInputSheetImpl.setRemark(getRemark());
		vrInputSheetImpl.setModifyDate(getModifyDate());
		vrInputSheetImpl.setSyncDate(getSyncDate());

		vrInputSheetImpl.resetOriginalValues();

		return vrInputSheetImpl;
	}

	@Override
	public int compareTo(VRInputSheet vrInputSheet) {
		int value = 0;

		value = DateUtil.compareTo(getModifyDate(), vrInputSheet.getModifyDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VRInputSheet)) {
			return false;
		}

		VRInputSheet vrInputSheet = (VRInputSheet)obj;

		long primaryKey = vrInputSheet.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VRInputSheetModelImpl vrInputSheetModelImpl = this;

		vrInputSheetModelImpl._originalMtCore = vrInputSheetModelImpl._mtCore;

		vrInputSheetModelImpl._setOriginalMtCore = false;

		vrInputSheetModelImpl._originalInputSheetNo = vrInputSheetModelImpl._inputSheetNo;

		vrInputSheetModelImpl._originalCorporationId = vrInputSheetModelImpl._corporationId;

		vrInputSheetModelImpl._setOriginalCorporationId = false;

		vrInputSheetModelImpl._originalInputSheetType = vrInputSheetModelImpl._inputSheetType;

		vrInputSheetModelImpl._setOriginalInputSheetType = false;

		vrInputSheetModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VRInputSheet> toCacheModel() {
		VRInputSheetCacheModel vrInputSheetCacheModel = new VRInputSheetCacheModel();

		vrInputSheetCacheModel.id = getId();

		vrInputSheetCacheModel.mtCore = getMtCore();

		vrInputSheetCacheModel.inputSheetNo = getInputSheetNo();

		String inputSheetNo = vrInputSheetCacheModel.inputSheetNo;

		if ((inputSheetNo != null) && (inputSheetNo.length() == 0)) {
			vrInputSheetCacheModel.inputSheetNo = null;
		}

		Date inputSheetDate = getInputSheetDate();

		if (inputSheetDate != null) {
			vrInputSheetCacheModel.inputSheetDate = inputSheetDate.getTime();
		}
		else {
			vrInputSheetCacheModel.inputSheetDate = Long.MIN_VALUE;
		}

		vrInputSheetCacheModel.originalDocumentNo = getOriginalDocumentNo();

		String originalDocumentNo = vrInputSheetCacheModel.originalDocumentNo;

		if ((originalDocumentNo != null) && (originalDocumentNo.length() == 0)) {
			vrInputSheetCacheModel.originalDocumentNo = null;
		}

		vrInputSheetCacheModel.corporationId = getCorporationId();

		vrInputSheetCacheModel.inputSheetType = getInputSheetType();

		vrInputSheetCacheModel.maker = getMaker();

		String maker = vrInputSheetCacheModel.maker;

		if ((maker != null) && (maker.length() == 0)) {
			vrInputSheetCacheModel.maker = null;
		}

		vrInputSheetCacheModel.checker = getChecker();

		String checker = vrInputSheetCacheModel.checker;

		if ((checker != null) && (checker.length() == 0)) {
			vrInputSheetCacheModel.checker = null;
		}

		vrInputSheetCacheModel.approver = getApprover();

		String approver = vrInputSheetCacheModel.approver;

		if ((approver != null) && (approver.length() == 0)) {
			vrInputSheetCacheModel.approver = null;
		}

		vrInputSheetCacheModel.deliveryName = getDeliveryName();

		String deliveryName = vrInputSheetCacheModel.deliveryName;

		if ((deliveryName != null) && (deliveryName.length() == 0)) {
			vrInputSheetCacheModel.deliveryName = null;
		}

		vrInputSheetCacheModel.inventoryName = getInventoryName();

		String inventoryName = vrInputSheetCacheModel.inventoryName;

		if ((inventoryName != null) && (inventoryName.length() == 0)) {
			vrInputSheetCacheModel.inventoryName = null;
		}

		vrInputSheetCacheModel.inventoryPlace = getInventoryPlace();

		String inventoryPlace = vrInputSheetCacheModel.inventoryPlace;

		if ((inventoryPlace != null) && (inventoryPlace.length() == 0)) {
			vrInputSheetCacheModel.inventoryPlace = null;
		}

		Date inventoryDate = getInventoryDate();

		if (inventoryDate != null) {
			vrInputSheetCacheModel.inventoryDate = inventoryDate.getTime();
		}
		else {
			vrInputSheetCacheModel.inventoryDate = Long.MIN_VALUE;
		}

		vrInputSheetCacheModel.bookIDList = getBookIDList();

		String bookIDList = vrInputSheetCacheModel.bookIDList;

		if ((bookIDList != null) && (bookIDList.length() == 0)) {
			vrInputSheetCacheModel.bookIDList = null;
		}

		vrInputSheetCacheModel.isApproval = getIsApproval();

		vrInputSheetCacheModel.totalQuantities = getTotalQuantities();

		vrInputSheetCacheModel.totalAmount = getTotalAmount();

		vrInputSheetCacheModel.amountInWords = getAmountInWords();

		String amountInWords = vrInputSheetCacheModel.amountInWords;

		if ((amountInWords != null) && (amountInWords.length() == 0)) {
			vrInputSheetCacheModel.amountInWords = null;
		}

		vrInputSheetCacheModel.remark = getRemark();

		String remark = vrInputSheetCacheModel.remark;

		if ((remark != null) && (remark.length() == 0)) {
			vrInputSheetCacheModel.remark = null;
		}

		Date modifyDate = getModifyDate();

		if (modifyDate != null) {
			vrInputSheetCacheModel.modifyDate = modifyDate.getTime();
		}
		else {
			vrInputSheetCacheModel.modifyDate = Long.MIN_VALUE;
		}

		Date syncDate = getSyncDate();

		if (syncDate != null) {
			vrInputSheetCacheModel.syncDate = syncDate.getTime();
		}
		else {
			vrInputSheetCacheModel.syncDate = Long.MIN_VALUE;
		}

		return vrInputSheetCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(45);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", mtCore=");
		sb.append(getMtCore());
		sb.append(", inputSheetNo=");
		sb.append(getInputSheetNo());
		sb.append(", inputSheetDate=");
		sb.append(getInputSheetDate());
		sb.append(", originalDocumentNo=");
		sb.append(getOriginalDocumentNo());
		sb.append(", corporationId=");
		sb.append(getCorporationId());
		sb.append(", inputSheetType=");
		sb.append(getInputSheetType());
		sb.append(", maker=");
		sb.append(getMaker());
		sb.append(", checker=");
		sb.append(getChecker());
		sb.append(", approver=");
		sb.append(getApprover());
		sb.append(", deliveryName=");
		sb.append(getDeliveryName());
		sb.append(", inventoryName=");
		sb.append(getInventoryName());
		sb.append(", inventoryPlace=");
		sb.append(getInventoryPlace());
		sb.append(", inventoryDate=");
		sb.append(getInventoryDate());
		sb.append(", bookIDList=");
		sb.append(getBookIDList());
		sb.append(", isApproval=");
		sb.append(getIsApproval());
		sb.append(", totalQuantities=");
		sb.append(getTotalQuantities());
		sb.append(", totalAmount=");
		sb.append(getTotalAmount());
		sb.append(", amountInWords=");
		sb.append(getAmountInWords());
		sb.append(", remark=");
		sb.append(getRemark());
		sb.append(", modifyDate=");
		sb.append(getModifyDate());
		sb.append(", syncDate=");
		sb.append(getSyncDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(70);

		sb.append("<model><model-name>");
		sb.append("com.fds.vr.business.model.VRInputSheet");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mtCore</column-name><column-value><![CDATA[");
		sb.append(getMtCore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inputSheetNo</column-name><column-value><![CDATA[");
		sb.append(getInputSheetNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inputSheetDate</column-name><column-value><![CDATA[");
		sb.append(getInputSheetDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>originalDocumentNo</column-name><column-value><![CDATA[");
		sb.append(getOriginalDocumentNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>corporationId</column-name><column-value><![CDATA[");
		sb.append(getCorporationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inputSheetType</column-name><column-value><![CDATA[");
		sb.append(getInputSheetType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maker</column-name><column-value><![CDATA[");
		sb.append(getMaker());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checker</column-name><column-value><![CDATA[");
		sb.append(getChecker());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approver</column-name><column-value><![CDATA[");
		sb.append(getApprover());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deliveryName</column-name><column-value><![CDATA[");
		sb.append(getDeliveryName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inventoryName</column-name><column-value><![CDATA[");
		sb.append(getInventoryName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inventoryPlace</column-name><column-value><![CDATA[");
		sb.append(getInventoryPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inventoryDate</column-name><column-value><![CDATA[");
		sb.append(getInventoryDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bookIDList</column-name><column-value><![CDATA[");
		sb.append(getBookIDList());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isApproval</column-name><column-value><![CDATA[");
		sb.append(getIsApproval());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalQuantities</column-name><column-value><![CDATA[");
		sb.append(getTotalQuantities());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalAmount</column-name><column-value><![CDATA[");
		sb.append(getTotalAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amountInWords</column-name><column-value><![CDATA[");
		sb.append(getAmountInWords());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remark</column-name><column-value><![CDATA[");
		sb.append(getRemark());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifyDate</column-name><column-value><![CDATA[");
		sb.append(getModifyDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncDate</column-name><column-value><![CDATA[");
		sb.append(getSyncDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VRInputSheet.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VRInputSheet.class
		};
	private long _id;
	private long _mtCore;
	private long _originalMtCore;
	private boolean _setOriginalMtCore;
	private String _inputSheetNo;
	private String _originalInputSheetNo;
	private Date _inputSheetDate;
	private String _originalDocumentNo;
	private long _corporationId;
	private long _originalCorporationId;
	private boolean _setOriginalCorporationId;
	private long _inputSheetType;
	private long _originalInputSheetType;
	private boolean _setOriginalInputSheetType;
	private String _maker;
	private String _checker;
	private String _approver;
	private String _deliveryName;
	private String _inventoryName;
	private String _inventoryPlace;
	private Date _inventoryDate;
	private String _bookIDList;
	private long _isApproval;
	private long _totalQuantities;
	private long _totalAmount;
	private String _amountInWords;
	private String _remark;
	private Date _modifyDate;
	private Date _syncDate;
	private long _columnBitmask;
	private VRInputSheet _escapedModel;
}