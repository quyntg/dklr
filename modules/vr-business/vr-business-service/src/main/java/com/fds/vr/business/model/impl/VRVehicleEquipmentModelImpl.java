/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.business.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.business.model.VRVehicleEquipment;
import com.fds.vr.business.model.VRVehicleEquipmentModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VRVehicleEquipment service. Represents a row in the &quot;vr_vehicleequipment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VRVehicleEquipmentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VRVehicleEquipmentImpl}.
 * </p>
 *
 * @author LamTV
 * @see VRVehicleEquipmentImpl
 * @see VRVehicleEquipment
 * @see VRVehicleEquipmentModel
 * @generated
 */
@ProviderType
public class VRVehicleEquipmentModelImpl extends BaseModelImpl<VRVehicleEquipment>
	implements VRVehicleEquipmentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vr vehicle equipment model instance should use the {@link VRVehicleEquipment} interface instead.
	 */
	public static final String TABLE_NAME = "vr_vehicleequipment";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "vehicleTypeCertificateId", Types.BIGINT },
			{ "certificateRecordId", Types.BIGINT },
			{ "dossierid", Types.BIGINT },
			{ "dossierIdCTN", Types.VARCHAR },
			{ "dossierno", Types.VARCHAR },
			{ "isMandatory", Types.INTEGER },
			{ "sequenceNo", Types.BIGINT },
			{ "certificateRecordNo", Types.VARCHAR },
			{ "certificateRecordDate", Types.TIMESTAMP },
			{ "certificateRecordExpireDate", Types.TIMESTAMP },
			{ "expiredStatus", Types.INTEGER },
			{ "vehicleClass", Types.VARCHAR },
			{ "equipmentCode", Types.VARCHAR },
			{ "equipmentName", Types.VARCHAR },
			{ "certifiedVehicleType", Types.VARCHAR },
			{ "certifiedVehicleTypeDescription", Types.VARCHAR },
			{ "certifiedTrademark", Types.VARCHAR },
			{ "certifiedTrademarkName", Types.VARCHAR },
			{ "certifiedCommercialName", Types.VARCHAR },
			{ "certifiedModelCode", Types.VARCHAR },
			{ "productionCountry", Types.VARCHAR },
			{ "originalCode", Types.VARCHAR },
			{ "originalName", Types.VARCHAR },
			{ "productionName", Types.VARCHAR },
			{ "productionAddress", Types.VARCHAR },
			{ "manufacturerName", Types.VARCHAR },
			{ "manufacturerAddress", Types.VARCHAR },
			{ "safetytestReportNo", Types.VARCHAR },
			{ "safetytestReportDate", Types.TIMESTAMP },
			{ "emissionTestReportNo", Types.VARCHAR },
			{ "emissionTestReportDate", Types.TIMESTAMP },
			{ "commonSafetyStandard", Types.VARCHAR },
			{ "commonSafetyDescription", Types.VARCHAR },
			{ "emissionStandard", Types.VARCHAR },
			{ "emissionDescription", Types.VARCHAR },
			{ "othertestReportNo", Types.VARCHAR },
			{ "othertestReportDate", Types.TIMESTAMP },
			{ "copReportNo", Types.VARCHAR },
			{ "copReportDate", Types.TIMESTAMP },
			{ "copReportExpireDate", Types.TIMESTAMP },
			{ "modifyDate", Types.TIMESTAMP },
			{ "syncDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("vehicleTypeCertificateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("certificateRecordId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dossierid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dossierIdCTN", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dossierno", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isMandatory", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("sequenceNo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("certificateRecordNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certificateRecordDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("certificateRecordExpireDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("expiredStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("vehicleClass", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("equipmentCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("equipmentName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certifiedVehicleType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certifiedVehicleTypeDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certifiedTrademark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certifiedTrademarkName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certifiedCommercialName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certifiedModelCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionCountry", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("originalCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("originalName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufacturerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufacturerAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("safetytestReportNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("safetytestReportDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("emissionTestReportNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emissionTestReportDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("commonSafetyStandard", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("commonSafetyDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emissionStandard", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emissionDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("othertestReportNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("othertestReportDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("copReportNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("copReportExpireDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifyDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("syncDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table vr_vehicleequipment (id LONG not null primary key,vehicleTypeCertificateId LONG,certificateRecordId LONG,dossierid LONG,dossierIdCTN VARCHAR(75) null,dossierno VARCHAR(75) null,isMandatory INTEGER,sequenceNo LONG,certificateRecordNo VARCHAR(75) null,certificateRecordDate DATE null,certificateRecordExpireDate DATE null,expiredStatus INTEGER,vehicleClass VARCHAR(75) null,equipmentCode VARCHAR(75) null,equipmentName VARCHAR(75) null,certifiedVehicleType VARCHAR(75) null,certifiedVehicleTypeDescription VARCHAR(75) null,certifiedTrademark VARCHAR(75) null,certifiedTrademarkName VARCHAR(75) null,certifiedCommercialName VARCHAR(75) null,certifiedModelCode VARCHAR(75) null,productionCountry VARCHAR(75) null,originalCode VARCHAR(75) null,originalName VARCHAR(75) null,productionName VARCHAR(75) null,productionAddress VARCHAR(75) null,manufacturerName VARCHAR(75) null,manufacturerAddress VARCHAR(75) null,safetytestReportNo VARCHAR(75) null,safetytestReportDate DATE null,emissionTestReportNo VARCHAR(75) null,emissionTestReportDate DATE null,commonSafetyStandard VARCHAR(75) null,commonSafetyDescription VARCHAR(75) null,emissionStandard VARCHAR(75) null,emissionDescription VARCHAR(75) null,othertestReportNo VARCHAR(75) null,othertestReportDate DATE null,copReportNo VARCHAR(75) null,copReportDate DATE null,copReportExpireDate DATE null,modifyDate DATE null,syncDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table vr_vehicleequipment";
	public static final String ORDER_BY_JPQL = " ORDER BY vrVehicleEquipment.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_vehicleequipment.id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fds.vr.business.model.VRVehicleEquipment"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fds.vr.business.model.VRVehicleEquipment"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fds.vr.business.model.VRVehicleEquipment"),
			true);
	public static final long CERTIFICATERECORDID_COLUMN_BITMASK = 1L;
	public static final long DOSSIERID_COLUMN_BITMASK = 2L;
	public static final long VEHICLETYPECERTIFICATEID_COLUMN_BITMASK = 4L;
	public static final long ID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.fds.vr.service.util.ServiceProps.get(
				"lock.expiration.time.com.fds.vr.business.model.VRVehicleEquipment"));

	public VRVehicleEquipmentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VRVehicleEquipment.class;
	}

	@Override
	public String getModelClassName() {
		return VRVehicleEquipment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("vehicleTypeCertificateId", getVehicleTypeCertificateId());
		attributes.put("certificateRecordId", getCertificateRecordId());
		attributes.put("dossierId", getDossierId());
		attributes.put("dossierIdCTN", getDossierIdCTN());
		attributes.put("dossierNo", getDossierNo());
		attributes.put("isMandatory", getIsMandatory());
		attributes.put("sequenceNo", getSequenceNo());
		attributes.put("certificateRecordNo", getCertificateRecordNo());
		attributes.put("certificateRecordDate", getCertificateRecordDate());
		attributes.put("certificateRecordExpireDate",
			getCertificateRecordExpireDate());
		attributes.put("expiredStatus", getExpiredStatus());
		attributes.put("vehicleClass", getVehicleClass());
		attributes.put("equipmentCode", getEquipmentCode());
		attributes.put("equipmentName", getEquipmentName());
		attributes.put("certifiedVehicleType", getCertifiedVehicleType());
		attributes.put("certifiedVehicleTypeDescription",
			getCertifiedVehicleTypeDescription());
		attributes.put("certifiedTrademark", getCertifiedTrademark());
		attributes.put("certifiedTrademarkName", getCertifiedTrademarkName());
		attributes.put("certifiedCommercialName", getCertifiedCommercialName());
		attributes.put("certifiedModelCode", getCertifiedModelCode());
		attributes.put("productionCountry", getProductionCountry());
		attributes.put("originalCode", getOriginalCode());
		attributes.put("originalName", getOriginalName());
		attributes.put("productionName", getProductionName());
		attributes.put("productionAddress", getProductionAddress());
		attributes.put("manufacturerName", getManufacturerName());
		attributes.put("manufacturerAddress", getManufacturerAddress());
		attributes.put("safetytestReportNo", getSafetytestReportNo());
		attributes.put("safetytestReportDate", getSafetytestReportDate());
		attributes.put("emissionTestReportNo", getEmissionTestReportNo());
		attributes.put("emissionTestReportDate", getEmissionTestReportDate());
		attributes.put("commonSafetyStandard", getCommonSafetyStandard());
		attributes.put("commonSafetyDescription", getCommonSafetyDescription());
		attributes.put("emissionStandard", getEmissionStandard());
		attributes.put("emissionDescription", getEmissionDescription());
		attributes.put("othertestReportNo", getOthertestReportNo());
		attributes.put("othertestReportDate", getOthertestReportDate());
		attributes.put("copReportNo", getCopReportNo());
		attributes.put("copReportDate", getCopReportDate());
		attributes.put("copReportExpireDate", getCopReportExpireDate());
		attributes.put("modifyDate", getModifyDate());
		attributes.put("syncDate", getSyncDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long vehicleTypeCertificateId = (Long)attributes.get(
				"vehicleTypeCertificateId");

		if (vehicleTypeCertificateId != null) {
			setVehicleTypeCertificateId(vehicleTypeCertificateId);
		}

		Long certificateRecordId = (Long)attributes.get("certificateRecordId");

		if (certificateRecordId != null) {
			setCertificateRecordId(certificateRecordId);
		}

		Long dossierId = (Long)attributes.get("dossierId");

		if (dossierId != null) {
			setDossierId(dossierId);
		}

		String dossierIdCTN = (String)attributes.get("dossierIdCTN");

		if (dossierIdCTN != null) {
			setDossierIdCTN(dossierIdCTN);
		}

		String dossierNo = (String)attributes.get("dossierNo");

		if (dossierNo != null) {
			setDossierNo(dossierNo);
		}

		Integer isMandatory = (Integer)attributes.get("isMandatory");

		if (isMandatory != null) {
			setIsMandatory(isMandatory);
		}

		Long sequenceNo = (Long)attributes.get("sequenceNo");

		if (sequenceNo != null) {
			setSequenceNo(sequenceNo);
		}

		String certificateRecordNo = (String)attributes.get(
				"certificateRecordNo");

		if (certificateRecordNo != null) {
			setCertificateRecordNo(certificateRecordNo);
		}

		Date certificateRecordDate = (Date)attributes.get(
				"certificateRecordDate");

		if (certificateRecordDate != null) {
			setCertificateRecordDate(certificateRecordDate);
		}

		Date certificateRecordExpireDate = (Date)attributes.get(
				"certificateRecordExpireDate");

		if (certificateRecordExpireDate != null) {
			setCertificateRecordExpireDate(certificateRecordExpireDate);
		}

		Integer expiredStatus = (Integer)attributes.get("expiredStatus");

		if (expiredStatus != null) {
			setExpiredStatus(expiredStatus);
		}

		String vehicleClass = (String)attributes.get("vehicleClass");

		if (vehicleClass != null) {
			setVehicleClass(vehicleClass);
		}

		String equipmentCode = (String)attributes.get("equipmentCode");

		if (equipmentCode != null) {
			setEquipmentCode(equipmentCode);
		}

		String equipmentName = (String)attributes.get("equipmentName");

		if (equipmentName != null) {
			setEquipmentName(equipmentName);
		}

		String certifiedVehicleType = (String)attributes.get(
				"certifiedVehicleType");

		if (certifiedVehicleType != null) {
			setCertifiedVehicleType(certifiedVehicleType);
		}

		String certifiedVehicleTypeDescription = (String)attributes.get(
				"certifiedVehicleTypeDescription");

		if (certifiedVehicleTypeDescription != null) {
			setCertifiedVehicleTypeDescription(certifiedVehicleTypeDescription);
		}

		String certifiedTrademark = (String)attributes.get("certifiedTrademark");

		if (certifiedTrademark != null) {
			setCertifiedTrademark(certifiedTrademark);
		}

		String certifiedTrademarkName = (String)attributes.get(
				"certifiedTrademarkName");

		if (certifiedTrademarkName != null) {
			setCertifiedTrademarkName(certifiedTrademarkName);
		}

		String certifiedCommercialName = (String)attributes.get(
				"certifiedCommercialName");

		if (certifiedCommercialName != null) {
			setCertifiedCommercialName(certifiedCommercialName);
		}

		String certifiedModelCode = (String)attributes.get("certifiedModelCode");

		if (certifiedModelCode != null) {
			setCertifiedModelCode(certifiedModelCode);
		}

		String productionCountry = (String)attributes.get("productionCountry");

		if (productionCountry != null) {
			setProductionCountry(productionCountry);
		}

		String originalCode = (String)attributes.get("originalCode");

		if (originalCode != null) {
			setOriginalCode(originalCode);
		}

		String originalName = (String)attributes.get("originalName");

		if (originalName != null) {
			setOriginalName(originalName);
		}

		String productionName = (String)attributes.get("productionName");

		if (productionName != null) {
			setProductionName(productionName);
		}

		String productionAddress = (String)attributes.get("productionAddress");

		if (productionAddress != null) {
			setProductionAddress(productionAddress);
		}

		String manufacturerName = (String)attributes.get("manufacturerName");

		if (manufacturerName != null) {
			setManufacturerName(manufacturerName);
		}

		String manufacturerAddress = (String)attributes.get(
				"manufacturerAddress");

		if (manufacturerAddress != null) {
			setManufacturerAddress(manufacturerAddress);
		}

		String safetytestReportNo = (String)attributes.get("safetytestReportNo");

		if (safetytestReportNo != null) {
			setSafetytestReportNo(safetytestReportNo);
		}

		Date safetytestReportDate = (Date)attributes.get("safetytestReportDate");

		if (safetytestReportDate != null) {
			setSafetytestReportDate(safetytestReportDate);
		}

		String emissionTestReportNo = (String)attributes.get(
				"emissionTestReportNo");

		if (emissionTestReportNo != null) {
			setEmissionTestReportNo(emissionTestReportNo);
		}

		Date emissionTestReportDate = (Date)attributes.get(
				"emissionTestReportDate");

		if (emissionTestReportDate != null) {
			setEmissionTestReportDate(emissionTestReportDate);
		}

		String commonSafetyStandard = (String)attributes.get(
				"commonSafetyStandard");

		if (commonSafetyStandard != null) {
			setCommonSafetyStandard(commonSafetyStandard);
		}

		String commonSafetyDescription = (String)attributes.get(
				"commonSafetyDescription");

		if (commonSafetyDescription != null) {
			setCommonSafetyDescription(commonSafetyDescription);
		}

		String emissionStandard = (String)attributes.get("emissionStandard");

		if (emissionStandard != null) {
			setEmissionStandard(emissionStandard);
		}

		String emissionDescription = (String)attributes.get(
				"emissionDescription");

		if (emissionDescription != null) {
			setEmissionDescription(emissionDescription);
		}

		String othertestReportNo = (String)attributes.get("othertestReportNo");

		if (othertestReportNo != null) {
			setOthertestReportNo(othertestReportNo);
		}

		Date othertestReportDate = (Date)attributes.get("othertestReportDate");

		if (othertestReportDate != null) {
			setOthertestReportDate(othertestReportDate);
		}

		String copReportNo = (String)attributes.get("copReportNo");

		if (copReportNo != null) {
			setCopReportNo(copReportNo);
		}

		Date copReportDate = (Date)attributes.get("copReportDate");

		if (copReportDate != null) {
			setCopReportDate(copReportDate);
		}

		Date copReportExpireDate = (Date)attributes.get("copReportExpireDate");

		if (copReportExpireDate != null) {
			setCopReportExpireDate(copReportExpireDate);
		}

		Date modifyDate = (Date)attributes.get("modifyDate");

		if (modifyDate != null) {
			setModifyDate(modifyDate);
		}

		Date syncDate = (Date)attributes.get("syncDate");

		if (syncDate != null) {
			setSyncDate(syncDate);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getVehicleTypeCertificateId() {
		return _vehicleTypeCertificateId;
	}

	@Override
	public void setVehicleTypeCertificateId(long vehicleTypeCertificateId) {
		_columnBitmask |= VEHICLETYPECERTIFICATEID_COLUMN_BITMASK;

		if (!_setOriginalVehicleTypeCertificateId) {
			_setOriginalVehicleTypeCertificateId = true;

			_originalVehicleTypeCertificateId = _vehicleTypeCertificateId;
		}

		_vehicleTypeCertificateId = vehicleTypeCertificateId;
	}

	public long getOriginalVehicleTypeCertificateId() {
		return _originalVehicleTypeCertificateId;
	}

	@Override
	public long getCertificateRecordId() {
		return _certificateRecordId;
	}

	@Override
	public void setCertificateRecordId(long certificateRecordId) {
		_columnBitmask |= CERTIFICATERECORDID_COLUMN_BITMASK;

		if (!_setOriginalCertificateRecordId) {
			_setOriginalCertificateRecordId = true;

			_originalCertificateRecordId = _certificateRecordId;
		}

		_certificateRecordId = certificateRecordId;
	}

	public long getOriginalCertificateRecordId() {
		return _originalCertificateRecordId;
	}

	@Override
	public long getDossierId() {
		return _dossierId;
	}

	@Override
	public void setDossierId(long dossierId) {
		_columnBitmask |= DOSSIERID_COLUMN_BITMASK;

		if (!_setOriginalDossierId) {
			_setOriginalDossierId = true;

			_originalDossierId = _dossierId;
		}

		_dossierId = dossierId;
	}

	public long getOriginalDossierId() {
		return _originalDossierId;
	}

	@Override
	public String getDossierIdCTN() {
		if (_dossierIdCTN == null) {
			return StringPool.BLANK;
		}
		else {
			return _dossierIdCTN;
		}
	}

	@Override
	public void setDossierIdCTN(String dossierIdCTN) {
		_dossierIdCTN = dossierIdCTN;
	}

	@Override
	public String getDossierNo() {
		if (_dossierNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _dossierNo;
		}
	}

	@Override
	public void setDossierNo(String dossierNo) {
		_dossierNo = dossierNo;
	}

	@Override
	public int getIsMandatory() {
		return _isMandatory;
	}

	@Override
	public void setIsMandatory(int isMandatory) {
		_isMandatory = isMandatory;
	}

	@Override
	public long getSequenceNo() {
		return _sequenceNo;
	}

	@Override
	public void setSequenceNo(long sequenceNo) {
		_sequenceNo = sequenceNo;
	}

	@Override
	public String getCertificateRecordNo() {
		if (_certificateRecordNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _certificateRecordNo;
		}
	}

	@Override
	public void setCertificateRecordNo(String certificateRecordNo) {
		_certificateRecordNo = certificateRecordNo;
	}

	@Override
	public Date getCertificateRecordDate() {
		return _certificateRecordDate;
	}

	@Override
	public void setCertificateRecordDate(Date certificateRecordDate) {
		_certificateRecordDate = certificateRecordDate;
	}

	@Override
	public Date getCertificateRecordExpireDate() {
		return _certificateRecordExpireDate;
	}

	@Override
	public void setCertificateRecordExpireDate(Date certificateRecordExpireDate) {
		_certificateRecordExpireDate = certificateRecordExpireDate;
	}

	@Override
	public int getExpiredStatus() {
		return _expiredStatus;
	}

	@Override
	public void setExpiredStatus(int expiredStatus) {
		_expiredStatus = expiredStatus;
	}

	@Override
	public String getVehicleClass() {
		if (_vehicleClass == null) {
			return StringPool.BLANK;
		}
		else {
			return _vehicleClass;
		}
	}

	@Override
	public void setVehicleClass(String vehicleClass) {
		_vehicleClass = vehicleClass;
	}

	@Override
	public String getEquipmentCode() {
		if (_equipmentCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _equipmentCode;
		}
	}

	@Override
	public void setEquipmentCode(String equipmentCode) {
		_equipmentCode = equipmentCode;
	}

	@Override
	public String getEquipmentName() {
		if (_equipmentName == null) {
			return StringPool.BLANK;
		}
		else {
			return _equipmentName;
		}
	}

	@Override
	public void setEquipmentName(String equipmentName) {
		_equipmentName = equipmentName;
	}

	@Override
	public String getCertifiedVehicleType() {
		if (_certifiedVehicleType == null) {
			return StringPool.BLANK;
		}
		else {
			return _certifiedVehicleType;
		}
	}

	@Override
	public void setCertifiedVehicleType(String certifiedVehicleType) {
		_certifiedVehicleType = certifiedVehicleType;
	}

	@Override
	public String getCertifiedVehicleTypeDescription() {
		if (_certifiedVehicleTypeDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _certifiedVehicleTypeDescription;
		}
	}

	@Override
	public void setCertifiedVehicleTypeDescription(
		String certifiedVehicleTypeDescription) {
		_certifiedVehicleTypeDescription = certifiedVehicleTypeDescription;
	}

	@Override
	public String getCertifiedTrademark() {
		if (_certifiedTrademark == null) {
			return StringPool.BLANK;
		}
		else {
			return _certifiedTrademark;
		}
	}

	@Override
	public void setCertifiedTrademark(String certifiedTrademark) {
		_certifiedTrademark = certifiedTrademark;
	}

	@Override
	public String getCertifiedTrademarkName() {
		if (_certifiedTrademarkName == null) {
			return StringPool.BLANK;
		}
		else {
			return _certifiedTrademarkName;
		}
	}

	@Override
	public void setCertifiedTrademarkName(String certifiedTrademarkName) {
		_certifiedTrademarkName = certifiedTrademarkName;
	}

	@Override
	public String getCertifiedCommercialName() {
		if (_certifiedCommercialName == null) {
			return StringPool.BLANK;
		}
		else {
			return _certifiedCommercialName;
		}
	}

	@Override
	public void setCertifiedCommercialName(String certifiedCommercialName) {
		_certifiedCommercialName = certifiedCommercialName;
	}

	@Override
	public String getCertifiedModelCode() {
		if (_certifiedModelCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _certifiedModelCode;
		}
	}

	@Override
	public void setCertifiedModelCode(String certifiedModelCode) {
		_certifiedModelCode = certifiedModelCode;
	}

	@Override
	public String getProductionCountry() {
		if (_productionCountry == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionCountry;
		}
	}

	@Override
	public void setProductionCountry(String productionCountry) {
		_productionCountry = productionCountry;
	}

	@Override
	public String getOriginalCode() {
		if (_originalCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _originalCode;
		}
	}

	@Override
	public void setOriginalCode(String originalCode) {
		_originalCode = originalCode;
	}

	@Override
	public String getOriginalName() {
		if (_originalName == null) {
			return StringPool.BLANK;
		}
		else {
			return _originalName;
		}
	}

	@Override
	public void setOriginalName(String originalName) {
		_originalName = originalName;
	}

	@Override
	public String getProductionName() {
		if (_productionName == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionName;
		}
	}

	@Override
	public void setProductionName(String productionName) {
		_productionName = productionName;
	}

	@Override
	public String getProductionAddress() {
		if (_productionAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionAddress;
		}
	}

	@Override
	public void setProductionAddress(String productionAddress) {
		_productionAddress = productionAddress;
	}

	@Override
	public String getManufacturerName() {
		if (_manufacturerName == null) {
			return StringPool.BLANK;
		}
		else {
			return _manufacturerName;
		}
	}

	@Override
	public void setManufacturerName(String manufacturerName) {
		_manufacturerName = manufacturerName;
	}

	@Override
	public String getManufacturerAddress() {
		if (_manufacturerAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _manufacturerAddress;
		}
	}

	@Override
	public void setManufacturerAddress(String manufacturerAddress) {
		_manufacturerAddress = manufacturerAddress;
	}

	@Override
	public String getSafetytestReportNo() {
		if (_safetytestReportNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _safetytestReportNo;
		}
	}

	@Override
	public void setSafetytestReportNo(String safetytestReportNo) {
		_safetytestReportNo = safetytestReportNo;
	}

	@Override
	public Date getSafetytestReportDate() {
		return _safetytestReportDate;
	}

	@Override
	public void setSafetytestReportDate(Date safetytestReportDate) {
		_safetytestReportDate = safetytestReportDate;
	}

	@Override
	public String getEmissionTestReportNo() {
		if (_emissionTestReportNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _emissionTestReportNo;
		}
	}

	@Override
	public void setEmissionTestReportNo(String emissionTestReportNo) {
		_emissionTestReportNo = emissionTestReportNo;
	}

	@Override
	public Date getEmissionTestReportDate() {
		return _emissionTestReportDate;
	}

	@Override
	public void setEmissionTestReportDate(Date emissionTestReportDate) {
		_emissionTestReportDate = emissionTestReportDate;
	}

	@Override
	public String getCommonSafetyStandard() {
		if (_commonSafetyStandard == null) {
			return StringPool.BLANK;
		}
		else {
			return _commonSafetyStandard;
		}
	}

	@Override
	public void setCommonSafetyStandard(String commonSafetyStandard) {
		_commonSafetyStandard = commonSafetyStandard;
	}

	@Override
	public String getCommonSafetyDescription() {
		if (_commonSafetyDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _commonSafetyDescription;
		}
	}

	@Override
	public void setCommonSafetyDescription(String commonSafetyDescription) {
		_commonSafetyDescription = commonSafetyDescription;
	}

	@Override
	public String getEmissionStandard() {
		if (_emissionStandard == null) {
			return StringPool.BLANK;
		}
		else {
			return _emissionStandard;
		}
	}

	@Override
	public void setEmissionStandard(String emissionStandard) {
		_emissionStandard = emissionStandard;
	}

	@Override
	public String getEmissionDescription() {
		if (_emissionDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _emissionDescription;
		}
	}

	@Override
	public void setEmissionDescription(String emissionDescription) {
		_emissionDescription = emissionDescription;
	}

	@Override
	public String getOthertestReportNo() {
		if (_othertestReportNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _othertestReportNo;
		}
	}

	@Override
	public void setOthertestReportNo(String othertestReportNo) {
		_othertestReportNo = othertestReportNo;
	}

	@Override
	public Date getOthertestReportDate() {
		return _othertestReportDate;
	}

	@Override
	public void setOthertestReportDate(Date othertestReportDate) {
		_othertestReportDate = othertestReportDate;
	}

	@Override
	public String getCopReportNo() {
		if (_copReportNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _copReportNo;
		}
	}

	@Override
	public void setCopReportNo(String copReportNo) {
		_copReportNo = copReportNo;
	}

	@Override
	public Date getCopReportDate() {
		return _copReportDate;
	}

	@Override
	public void setCopReportDate(Date copReportDate) {
		_copReportDate = copReportDate;
	}

	@Override
	public Date getCopReportExpireDate() {
		return _copReportExpireDate;
	}

	@Override
	public void setCopReportExpireDate(Date copReportExpireDate) {
		_copReportExpireDate = copReportExpireDate;
	}

	@Override
	public Date getModifyDate() {
		return _modifyDate;
	}

	@Override
	public void setModifyDate(Date modifyDate) {
		_modifyDate = modifyDate;
	}

	@Override
	public Date getSyncDate() {
		return _syncDate;
	}

	@Override
	public void setSyncDate(Date syncDate) {
		_syncDate = syncDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VRVehicleEquipment.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VRVehicleEquipment toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VRVehicleEquipment)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VRVehicleEquipmentImpl vrVehicleEquipmentImpl = new VRVehicleEquipmentImpl();

		vrVehicleEquipmentImpl.setId(getId());
		vrVehicleEquipmentImpl.setVehicleTypeCertificateId(getVehicleTypeCertificateId());
		vrVehicleEquipmentImpl.setCertificateRecordId(getCertificateRecordId());
		vrVehicleEquipmentImpl.setDossierId(getDossierId());
		vrVehicleEquipmentImpl.setDossierIdCTN(getDossierIdCTN());
		vrVehicleEquipmentImpl.setDossierNo(getDossierNo());
		vrVehicleEquipmentImpl.setIsMandatory(getIsMandatory());
		vrVehicleEquipmentImpl.setSequenceNo(getSequenceNo());
		vrVehicleEquipmentImpl.setCertificateRecordNo(getCertificateRecordNo());
		vrVehicleEquipmentImpl.setCertificateRecordDate(getCertificateRecordDate());
		vrVehicleEquipmentImpl.setCertificateRecordExpireDate(getCertificateRecordExpireDate());
		vrVehicleEquipmentImpl.setExpiredStatus(getExpiredStatus());
		vrVehicleEquipmentImpl.setVehicleClass(getVehicleClass());
		vrVehicleEquipmentImpl.setEquipmentCode(getEquipmentCode());
		vrVehicleEquipmentImpl.setEquipmentName(getEquipmentName());
		vrVehicleEquipmentImpl.setCertifiedVehicleType(getCertifiedVehicleType());
		vrVehicleEquipmentImpl.setCertifiedVehicleTypeDescription(getCertifiedVehicleTypeDescription());
		vrVehicleEquipmentImpl.setCertifiedTrademark(getCertifiedTrademark());
		vrVehicleEquipmentImpl.setCertifiedTrademarkName(getCertifiedTrademarkName());
		vrVehicleEquipmentImpl.setCertifiedCommercialName(getCertifiedCommercialName());
		vrVehicleEquipmentImpl.setCertifiedModelCode(getCertifiedModelCode());
		vrVehicleEquipmentImpl.setProductionCountry(getProductionCountry());
		vrVehicleEquipmentImpl.setOriginalCode(getOriginalCode());
		vrVehicleEquipmentImpl.setOriginalName(getOriginalName());
		vrVehicleEquipmentImpl.setProductionName(getProductionName());
		vrVehicleEquipmentImpl.setProductionAddress(getProductionAddress());
		vrVehicleEquipmentImpl.setManufacturerName(getManufacturerName());
		vrVehicleEquipmentImpl.setManufacturerAddress(getManufacturerAddress());
		vrVehicleEquipmentImpl.setSafetytestReportNo(getSafetytestReportNo());
		vrVehicleEquipmentImpl.setSafetytestReportDate(getSafetytestReportDate());
		vrVehicleEquipmentImpl.setEmissionTestReportNo(getEmissionTestReportNo());
		vrVehicleEquipmentImpl.setEmissionTestReportDate(getEmissionTestReportDate());
		vrVehicleEquipmentImpl.setCommonSafetyStandard(getCommonSafetyStandard());
		vrVehicleEquipmentImpl.setCommonSafetyDescription(getCommonSafetyDescription());
		vrVehicleEquipmentImpl.setEmissionStandard(getEmissionStandard());
		vrVehicleEquipmentImpl.setEmissionDescription(getEmissionDescription());
		vrVehicleEquipmentImpl.setOthertestReportNo(getOthertestReportNo());
		vrVehicleEquipmentImpl.setOthertestReportDate(getOthertestReportDate());
		vrVehicleEquipmentImpl.setCopReportNo(getCopReportNo());
		vrVehicleEquipmentImpl.setCopReportDate(getCopReportDate());
		vrVehicleEquipmentImpl.setCopReportExpireDate(getCopReportExpireDate());
		vrVehicleEquipmentImpl.setModifyDate(getModifyDate());
		vrVehicleEquipmentImpl.setSyncDate(getSyncDate());

		vrVehicleEquipmentImpl.resetOriginalValues();

		return vrVehicleEquipmentImpl;
	}

	@Override
	public int compareTo(VRVehicleEquipment vrVehicleEquipment) {
		long primaryKey = vrVehicleEquipment.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VRVehicleEquipment)) {
			return false;
		}

		VRVehicleEquipment vrVehicleEquipment = (VRVehicleEquipment)obj;

		long primaryKey = vrVehicleEquipment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VRVehicleEquipmentModelImpl vrVehicleEquipmentModelImpl = this;

		vrVehicleEquipmentModelImpl._originalVehicleTypeCertificateId = vrVehicleEquipmentModelImpl._vehicleTypeCertificateId;

		vrVehicleEquipmentModelImpl._setOriginalVehicleTypeCertificateId = false;

		vrVehicleEquipmentModelImpl._originalCertificateRecordId = vrVehicleEquipmentModelImpl._certificateRecordId;

		vrVehicleEquipmentModelImpl._setOriginalCertificateRecordId = false;

		vrVehicleEquipmentModelImpl._originalDossierId = vrVehicleEquipmentModelImpl._dossierId;

		vrVehicleEquipmentModelImpl._setOriginalDossierId = false;

		vrVehicleEquipmentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VRVehicleEquipment> toCacheModel() {
		VRVehicleEquipmentCacheModel vrVehicleEquipmentCacheModel = new VRVehicleEquipmentCacheModel();

		vrVehicleEquipmentCacheModel.id = getId();

		vrVehicleEquipmentCacheModel.vehicleTypeCertificateId = getVehicleTypeCertificateId();

		vrVehicleEquipmentCacheModel.certificateRecordId = getCertificateRecordId();

		vrVehicleEquipmentCacheModel.dossierId = getDossierId();

		vrVehicleEquipmentCacheModel.dossierIdCTN = getDossierIdCTN();

		String dossierIdCTN = vrVehicleEquipmentCacheModel.dossierIdCTN;

		if ((dossierIdCTN != null) && (dossierIdCTN.length() == 0)) {
			vrVehicleEquipmentCacheModel.dossierIdCTN = null;
		}

		vrVehicleEquipmentCacheModel.dossierNo = getDossierNo();

		String dossierNo = vrVehicleEquipmentCacheModel.dossierNo;

		if ((dossierNo != null) && (dossierNo.length() == 0)) {
			vrVehicleEquipmentCacheModel.dossierNo = null;
		}

		vrVehicleEquipmentCacheModel.isMandatory = getIsMandatory();

		vrVehicleEquipmentCacheModel.sequenceNo = getSequenceNo();

		vrVehicleEquipmentCacheModel.certificateRecordNo = getCertificateRecordNo();

		String certificateRecordNo = vrVehicleEquipmentCacheModel.certificateRecordNo;

		if ((certificateRecordNo != null) &&
				(certificateRecordNo.length() == 0)) {
			vrVehicleEquipmentCacheModel.certificateRecordNo = null;
		}

		Date certificateRecordDate = getCertificateRecordDate();

		if (certificateRecordDate != null) {
			vrVehicleEquipmentCacheModel.certificateRecordDate = certificateRecordDate.getTime();
		}
		else {
			vrVehicleEquipmentCacheModel.certificateRecordDate = Long.MIN_VALUE;
		}

		Date certificateRecordExpireDate = getCertificateRecordExpireDate();

		if (certificateRecordExpireDate != null) {
			vrVehicleEquipmentCacheModel.certificateRecordExpireDate = certificateRecordExpireDate.getTime();
		}
		else {
			vrVehicleEquipmentCacheModel.certificateRecordExpireDate = Long.MIN_VALUE;
		}

		vrVehicleEquipmentCacheModel.expiredStatus = getExpiredStatus();

		vrVehicleEquipmentCacheModel.vehicleClass = getVehicleClass();

		String vehicleClass = vrVehicleEquipmentCacheModel.vehicleClass;

		if ((vehicleClass != null) && (vehicleClass.length() == 0)) {
			vrVehicleEquipmentCacheModel.vehicleClass = null;
		}

		vrVehicleEquipmentCacheModel.equipmentCode = getEquipmentCode();

		String equipmentCode = vrVehicleEquipmentCacheModel.equipmentCode;

		if ((equipmentCode != null) && (equipmentCode.length() == 0)) {
			vrVehicleEquipmentCacheModel.equipmentCode = null;
		}

		vrVehicleEquipmentCacheModel.equipmentName = getEquipmentName();

		String equipmentName = vrVehicleEquipmentCacheModel.equipmentName;

		if ((equipmentName != null) && (equipmentName.length() == 0)) {
			vrVehicleEquipmentCacheModel.equipmentName = null;
		}

		vrVehicleEquipmentCacheModel.certifiedVehicleType = getCertifiedVehicleType();

		String certifiedVehicleType = vrVehicleEquipmentCacheModel.certifiedVehicleType;

		if ((certifiedVehicleType != null) &&
				(certifiedVehicleType.length() == 0)) {
			vrVehicleEquipmentCacheModel.certifiedVehicleType = null;
		}

		vrVehicleEquipmentCacheModel.certifiedVehicleTypeDescription = getCertifiedVehicleTypeDescription();

		String certifiedVehicleTypeDescription = vrVehicleEquipmentCacheModel.certifiedVehicleTypeDescription;

		if ((certifiedVehicleTypeDescription != null) &&
				(certifiedVehicleTypeDescription.length() == 0)) {
			vrVehicleEquipmentCacheModel.certifiedVehicleTypeDescription = null;
		}

		vrVehicleEquipmentCacheModel.certifiedTrademark = getCertifiedTrademark();

		String certifiedTrademark = vrVehicleEquipmentCacheModel.certifiedTrademark;

		if ((certifiedTrademark != null) && (certifiedTrademark.length() == 0)) {
			vrVehicleEquipmentCacheModel.certifiedTrademark = null;
		}

		vrVehicleEquipmentCacheModel.certifiedTrademarkName = getCertifiedTrademarkName();

		String certifiedTrademarkName = vrVehicleEquipmentCacheModel.certifiedTrademarkName;

		if ((certifiedTrademarkName != null) &&
				(certifiedTrademarkName.length() == 0)) {
			vrVehicleEquipmentCacheModel.certifiedTrademarkName = null;
		}

		vrVehicleEquipmentCacheModel.certifiedCommercialName = getCertifiedCommercialName();

		String certifiedCommercialName = vrVehicleEquipmentCacheModel.certifiedCommercialName;

		if ((certifiedCommercialName != null) &&
				(certifiedCommercialName.length() == 0)) {
			vrVehicleEquipmentCacheModel.certifiedCommercialName = null;
		}

		vrVehicleEquipmentCacheModel.certifiedModelCode = getCertifiedModelCode();

		String certifiedModelCode = vrVehicleEquipmentCacheModel.certifiedModelCode;

		if ((certifiedModelCode != null) && (certifiedModelCode.length() == 0)) {
			vrVehicleEquipmentCacheModel.certifiedModelCode = null;
		}

		vrVehicleEquipmentCacheModel.productionCountry = getProductionCountry();

		String productionCountry = vrVehicleEquipmentCacheModel.productionCountry;

		if ((productionCountry != null) && (productionCountry.length() == 0)) {
			vrVehicleEquipmentCacheModel.productionCountry = null;
		}

		vrVehicleEquipmentCacheModel.originalCode = getOriginalCode();

		String originalCode = vrVehicleEquipmentCacheModel.originalCode;

		if ((originalCode != null) && (originalCode.length() == 0)) {
			vrVehicleEquipmentCacheModel.originalCode = null;
		}

		vrVehicleEquipmentCacheModel.originalName = getOriginalName();

		String originalName = vrVehicleEquipmentCacheModel.originalName;

		if ((originalName != null) && (originalName.length() == 0)) {
			vrVehicleEquipmentCacheModel.originalName = null;
		}

		vrVehicleEquipmentCacheModel.productionName = getProductionName();

		String productionName = vrVehicleEquipmentCacheModel.productionName;

		if ((productionName != null) && (productionName.length() == 0)) {
			vrVehicleEquipmentCacheModel.productionName = null;
		}

		vrVehicleEquipmentCacheModel.productionAddress = getProductionAddress();

		String productionAddress = vrVehicleEquipmentCacheModel.productionAddress;

		if ((productionAddress != null) && (productionAddress.length() == 0)) {
			vrVehicleEquipmentCacheModel.productionAddress = null;
		}

		vrVehicleEquipmentCacheModel.manufacturerName = getManufacturerName();

		String manufacturerName = vrVehicleEquipmentCacheModel.manufacturerName;

		if ((manufacturerName != null) && (manufacturerName.length() == 0)) {
			vrVehicleEquipmentCacheModel.manufacturerName = null;
		}

		vrVehicleEquipmentCacheModel.manufacturerAddress = getManufacturerAddress();

		String manufacturerAddress = vrVehicleEquipmentCacheModel.manufacturerAddress;

		if ((manufacturerAddress != null) &&
				(manufacturerAddress.length() == 0)) {
			vrVehicleEquipmentCacheModel.manufacturerAddress = null;
		}

		vrVehicleEquipmentCacheModel.safetytestReportNo = getSafetytestReportNo();

		String safetytestReportNo = vrVehicleEquipmentCacheModel.safetytestReportNo;

		if ((safetytestReportNo != null) && (safetytestReportNo.length() == 0)) {
			vrVehicleEquipmentCacheModel.safetytestReportNo = null;
		}

		Date safetytestReportDate = getSafetytestReportDate();

		if (safetytestReportDate != null) {
			vrVehicleEquipmentCacheModel.safetytestReportDate = safetytestReportDate.getTime();
		}
		else {
			vrVehicleEquipmentCacheModel.safetytestReportDate = Long.MIN_VALUE;
		}

		vrVehicleEquipmentCacheModel.emissionTestReportNo = getEmissionTestReportNo();

		String emissionTestReportNo = vrVehicleEquipmentCacheModel.emissionTestReportNo;

		if ((emissionTestReportNo != null) &&
				(emissionTestReportNo.length() == 0)) {
			vrVehicleEquipmentCacheModel.emissionTestReportNo = null;
		}

		Date emissionTestReportDate = getEmissionTestReportDate();

		if (emissionTestReportDate != null) {
			vrVehicleEquipmentCacheModel.emissionTestReportDate = emissionTestReportDate.getTime();
		}
		else {
			vrVehicleEquipmentCacheModel.emissionTestReportDate = Long.MIN_VALUE;
		}

		vrVehicleEquipmentCacheModel.commonSafetyStandard = getCommonSafetyStandard();

		String commonSafetyStandard = vrVehicleEquipmentCacheModel.commonSafetyStandard;

		if ((commonSafetyStandard != null) &&
				(commonSafetyStandard.length() == 0)) {
			vrVehicleEquipmentCacheModel.commonSafetyStandard = null;
		}

		vrVehicleEquipmentCacheModel.commonSafetyDescription = getCommonSafetyDescription();

		String commonSafetyDescription = vrVehicleEquipmentCacheModel.commonSafetyDescription;

		if ((commonSafetyDescription != null) &&
				(commonSafetyDescription.length() == 0)) {
			vrVehicleEquipmentCacheModel.commonSafetyDescription = null;
		}

		vrVehicleEquipmentCacheModel.emissionStandard = getEmissionStandard();

		String emissionStandard = vrVehicleEquipmentCacheModel.emissionStandard;

		if ((emissionStandard != null) && (emissionStandard.length() == 0)) {
			vrVehicleEquipmentCacheModel.emissionStandard = null;
		}

		vrVehicleEquipmentCacheModel.emissionDescription = getEmissionDescription();

		String emissionDescription = vrVehicleEquipmentCacheModel.emissionDescription;

		if ((emissionDescription != null) &&
				(emissionDescription.length() == 0)) {
			vrVehicleEquipmentCacheModel.emissionDescription = null;
		}

		vrVehicleEquipmentCacheModel.othertestReportNo = getOthertestReportNo();

		String othertestReportNo = vrVehicleEquipmentCacheModel.othertestReportNo;

		if ((othertestReportNo != null) && (othertestReportNo.length() == 0)) {
			vrVehicleEquipmentCacheModel.othertestReportNo = null;
		}

		Date othertestReportDate = getOthertestReportDate();

		if (othertestReportDate != null) {
			vrVehicleEquipmentCacheModel.othertestReportDate = othertestReportDate.getTime();
		}
		else {
			vrVehicleEquipmentCacheModel.othertestReportDate = Long.MIN_VALUE;
		}

		vrVehicleEquipmentCacheModel.copReportNo = getCopReportNo();

		String copReportNo = vrVehicleEquipmentCacheModel.copReportNo;

		if ((copReportNo != null) && (copReportNo.length() == 0)) {
			vrVehicleEquipmentCacheModel.copReportNo = null;
		}

		Date copReportDate = getCopReportDate();

		if (copReportDate != null) {
			vrVehicleEquipmentCacheModel.copReportDate = copReportDate.getTime();
		}
		else {
			vrVehicleEquipmentCacheModel.copReportDate = Long.MIN_VALUE;
		}

		Date copReportExpireDate = getCopReportExpireDate();

		if (copReportExpireDate != null) {
			vrVehicleEquipmentCacheModel.copReportExpireDate = copReportExpireDate.getTime();
		}
		else {
			vrVehicleEquipmentCacheModel.copReportExpireDate = Long.MIN_VALUE;
		}

		Date modifyDate = getModifyDate();

		if (modifyDate != null) {
			vrVehicleEquipmentCacheModel.modifyDate = modifyDate.getTime();
		}
		else {
			vrVehicleEquipmentCacheModel.modifyDate = Long.MIN_VALUE;
		}

		Date syncDate = getSyncDate();

		if (syncDate != null) {
			vrVehicleEquipmentCacheModel.syncDate = syncDate.getTime();
		}
		else {
			vrVehicleEquipmentCacheModel.syncDate = Long.MIN_VALUE;
		}

		return vrVehicleEquipmentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(87);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", vehicleTypeCertificateId=");
		sb.append(getVehicleTypeCertificateId());
		sb.append(", certificateRecordId=");
		sb.append(getCertificateRecordId());
		sb.append(", dossierId=");
		sb.append(getDossierId());
		sb.append(", dossierIdCTN=");
		sb.append(getDossierIdCTN());
		sb.append(", dossierNo=");
		sb.append(getDossierNo());
		sb.append(", isMandatory=");
		sb.append(getIsMandatory());
		sb.append(", sequenceNo=");
		sb.append(getSequenceNo());
		sb.append(", certificateRecordNo=");
		sb.append(getCertificateRecordNo());
		sb.append(", certificateRecordDate=");
		sb.append(getCertificateRecordDate());
		sb.append(", certificateRecordExpireDate=");
		sb.append(getCertificateRecordExpireDate());
		sb.append(", expiredStatus=");
		sb.append(getExpiredStatus());
		sb.append(", vehicleClass=");
		sb.append(getVehicleClass());
		sb.append(", equipmentCode=");
		sb.append(getEquipmentCode());
		sb.append(", equipmentName=");
		sb.append(getEquipmentName());
		sb.append(", certifiedVehicleType=");
		sb.append(getCertifiedVehicleType());
		sb.append(", certifiedVehicleTypeDescription=");
		sb.append(getCertifiedVehicleTypeDescription());
		sb.append(", certifiedTrademark=");
		sb.append(getCertifiedTrademark());
		sb.append(", certifiedTrademarkName=");
		sb.append(getCertifiedTrademarkName());
		sb.append(", certifiedCommercialName=");
		sb.append(getCertifiedCommercialName());
		sb.append(", certifiedModelCode=");
		sb.append(getCertifiedModelCode());
		sb.append(", productionCountry=");
		sb.append(getProductionCountry());
		sb.append(", originalCode=");
		sb.append(getOriginalCode());
		sb.append(", originalName=");
		sb.append(getOriginalName());
		sb.append(", productionName=");
		sb.append(getProductionName());
		sb.append(", productionAddress=");
		sb.append(getProductionAddress());
		sb.append(", manufacturerName=");
		sb.append(getManufacturerName());
		sb.append(", manufacturerAddress=");
		sb.append(getManufacturerAddress());
		sb.append(", safetytestReportNo=");
		sb.append(getSafetytestReportNo());
		sb.append(", safetytestReportDate=");
		sb.append(getSafetytestReportDate());
		sb.append(", emissionTestReportNo=");
		sb.append(getEmissionTestReportNo());
		sb.append(", emissionTestReportDate=");
		sb.append(getEmissionTestReportDate());
		sb.append(", commonSafetyStandard=");
		sb.append(getCommonSafetyStandard());
		sb.append(", commonSafetyDescription=");
		sb.append(getCommonSafetyDescription());
		sb.append(", emissionStandard=");
		sb.append(getEmissionStandard());
		sb.append(", emissionDescription=");
		sb.append(getEmissionDescription());
		sb.append(", othertestReportNo=");
		sb.append(getOthertestReportNo());
		sb.append(", othertestReportDate=");
		sb.append(getOthertestReportDate());
		sb.append(", copReportNo=");
		sb.append(getCopReportNo());
		sb.append(", copReportDate=");
		sb.append(getCopReportDate());
		sb.append(", copReportExpireDate=");
		sb.append(getCopReportExpireDate());
		sb.append(", modifyDate=");
		sb.append(getModifyDate());
		sb.append(", syncDate=");
		sb.append(getSyncDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(133);

		sb.append("<model><model-name>");
		sb.append("com.fds.vr.business.model.VRVehicleEquipment");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleTypeCertificateId</column-name><column-value><![CDATA[");
		sb.append(getVehicleTypeCertificateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateRecordId</column-name><column-value><![CDATA[");
		sb.append(getCertificateRecordId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierId</column-name><column-value><![CDATA[");
		sb.append(getDossierId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierIdCTN</column-name><column-value><![CDATA[");
		sb.append(getDossierIdCTN());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierNo</column-name><column-value><![CDATA[");
		sb.append(getDossierNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isMandatory</column-name><column-value><![CDATA[");
		sb.append(getIsMandatory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sequenceNo</column-name><column-value><![CDATA[");
		sb.append(getSequenceNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateRecordNo</column-name><column-value><![CDATA[");
		sb.append(getCertificateRecordNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateRecordDate</column-name><column-value><![CDATA[");
		sb.append(getCertificateRecordDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateRecordExpireDate</column-name><column-value><![CDATA[");
		sb.append(getCertificateRecordExpireDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expiredStatus</column-name><column-value><![CDATA[");
		sb.append(getExpiredStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleClass</column-name><column-value><![CDATA[");
		sb.append(getVehicleClass());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>equipmentCode</column-name><column-value><![CDATA[");
		sb.append(getEquipmentCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>equipmentName</column-name><column-value><![CDATA[");
		sb.append(getEquipmentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certifiedVehicleType</column-name><column-value><![CDATA[");
		sb.append(getCertifiedVehicleType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certifiedVehicleTypeDescription</column-name><column-value><![CDATA[");
		sb.append(getCertifiedVehicleTypeDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certifiedTrademark</column-name><column-value><![CDATA[");
		sb.append(getCertifiedTrademark());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certifiedTrademarkName</column-name><column-value><![CDATA[");
		sb.append(getCertifiedTrademarkName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certifiedCommercialName</column-name><column-value><![CDATA[");
		sb.append(getCertifiedCommercialName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certifiedModelCode</column-name><column-value><![CDATA[");
		sb.append(getCertifiedModelCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionCountry</column-name><column-value><![CDATA[");
		sb.append(getProductionCountry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>originalCode</column-name><column-value><![CDATA[");
		sb.append(getOriginalCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>originalName</column-name><column-value><![CDATA[");
		sb.append(getOriginalName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionName</column-name><column-value><![CDATA[");
		sb.append(getProductionName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionAddress</column-name><column-value><![CDATA[");
		sb.append(getProductionAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manufacturerName</column-name><column-value><![CDATA[");
		sb.append(getManufacturerName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manufacturerAddress</column-name><column-value><![CDATA[");
		sb.append(getManufacturerAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>safetytestReportNo</column-name><column-value><![CDATA[");
		sb.append(getSafetytestReportNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>safetytestReportDate</column-name><column-value><![CDATA[");
		sb.append(getSafetytestReportDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emissionTestReportNo</column-name><column-value><![CDATA[");
		sb.append(getEmissionTestReportNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emissionTestReportDate</column-name><column-value><![CDATA[");
		sb.append(getEmissionTestReportDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commonSafetyStandard</column-name><column-value><![CDATA[");
		sb.append(getCommonSafetyStandard());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commonSafetyDescription</column-name><column-value><![CDATA[");
		sb.append(getCommonSafetyDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emissionStandard</column-name><column-value><![CDATA[");
		sb.append(getEmissionStandard());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emissionDescription</column-name><column-value><![CDATA[");
		sb.append(getEmissionDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>othertestReportNo</column-name><column-value><![CDATA[");
		sb.append(getOthertestReportNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>othertestReportDate</column-name><column-value><![CDATA[");
		sb.append(getOthertestReportDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportNo</column-name><column-value><![CDATA[");
		sb.append(getCopReportNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportDate</column-name><column-value><![CDATA[");
		sb.append(getCopReportDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportExpireDate</column-name><column-value><![CDATA[");
		sb.append(getCopReportExpireDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifyDate</column-name><column-value><![CDATA[");
		sb.append(getModifyDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncDate</column-name><column-value><![CDATA[");
		sb.append(getSyncDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VRVehicleEquipment.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VRVehicleEquipment.class
		};
	private long _id;
	private long _vehicleTypeCertificateId;
	private long _originalVehicleTypeCertificateId;
	private boolean _setOriginalVehicleTypeCertificateId;
	private long _certificateRecordId;
	private long _originalCertificateRecordId;
	private boolean _setOriginalCertificateRecordId;
	private long _dossierId;
	private long _originalDossierId;
	private boolean _setOriginalDossierId;
	private String _dossierIdCTN;
	private String _dossierNo;
	private int _isMandatory;
	private long _sequenceNo;
	private String _certificateRecordNo;
	private Date _certificateRecordDate;
	private Date _certificateRecordExpireDate;
	private int _expiredStatus;
	private String _vehicleClass;
	private String _equipmentCode;
	private String _equipmentName;
	private String _certifiedVehicleType;
	private String _certifiedVehicleTypeDescription;
	private String _certifiedTrademark;
	private String _certifiedTrademarkName;
	private String _certifiedCommercialName;
	private String _certifiedModelCode;
	private String _productionCountry;
	private String _originalCode;
	private String _originalName;
	private String _productionName;
	private String _productionAddress;
	private String _manufacturerName;
	private String _manufacturerAddress;
	private String _safetytestReportNo;
	private Date _safetytestReportDate;
	private String _emissionTestReportNo;
	private Date _emissionTestReportDate;
	private String _commonSafetyStandard;
	private String _commonSafetyDescription;
	private String _emissionStandard;
	private String _emissionDescription;
	private String _othertestReportNo;
	private Date _othertestReportDate;
	private String _copReportNo;
	private Date _copReportDate;
	private Date _copReportExpireDate;
	private Date _modifyDate;
	private Date _syncDate;
	private long _columnBitmask;
	private VRVehicleEquipment _escapedModel;
}