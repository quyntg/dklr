/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.business.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.business.model.VRCOPProdEquipment;
import com.fds.vr.business.model.VRCOPProdEquipmentModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VRCOPProdEquipment service. Represents a row in the &quot;vr_copproductionplantprodequipment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VRCOPProdEquipmentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VRCOPProdEquipmentImpl}.
 * </p>
 *
 * @author LamTV
 * @see VRCOPProdEquipmentImpl
 * @see VRCOPProdEquipment
 * @see VRCOPProdEquipmentModel
 * @generated
 */
@ProviderType
public class VRCOPProdEquipmentModelImpl extends BaseModelImpl<VRCOPProdEquipment>
	implements VRCOPProdEquipmentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vrcop prod equipment model instance should use the {@link VRCOPProdEquipment} interface instead.
	 */
	public static final String TABLE_NAME = "vr_copproductionplantprodequipment";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "mtCore", Types.BIGINT },
			{ "copReportRepositoryID", Types.BIGINT },
			{ "copReportNo", Types.VARCHAR },
			{ "sequenceNo", Types.BIGINT },
			{ "equipmentCode", Types.VARCHAR },
			{ "equipmentName", Types.VARCHAR },
			{ "equipmentType", Types.VARCHAR },
			{ "trademark", Types.VARCHAR },
			{ "trademarkName", Types.VARCHAR },
			{ "commercialName", Types.VARCHAR },
			{ "modelCode", Types.VARCHAR },
			{ "designSymbolNo", Types.VARCHAR },
			{ "productionCountryCode", Types.VARCHAR },
			{ "equipmentStatus", Types.VARCHAR },
			{ "notes", Types.VARCHAR },
			{ "modifyDate", Types.TIMESTAMP },
			{ "syncDate", Types.TIMESTAMP },
			{ "quantity", Types.INTEGER },
			{ "dossierId", Types.BIGINT },
			{ "dossierIdCTN", Types.VARCHAR },
			{ "dossierNo", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mtCore", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("copReportRepositoryID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("copReportNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sequenceNo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("equipmentCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("equipmentName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("equipmentType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trademark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trademarkName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("commercialName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modelCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("designSymbolNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionCountryCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("equipmentStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("notes", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modifyDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("syncDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("quantity", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("dossierId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dossierIdCTN", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dossierNo", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table vr_copproductionplantprodequipment (id LONG not null primary key,mtCore LONG,copReportRepositoryID LONG,copReportNo VARCHAR(75) null,sequenceNo LONG,equipmentCode VARCHAR(75) null,equipmentName VARCHAR(75) null,equipmentType VARCHAR(75) null,trademark VARCHAR(75) null,trademarkName VARCHAR(75) null,commercialName VARCHAR(75) null,modelCode VARCHAR(75) null,designSymbolNo VARCHAR(75) null,productionCountryCode VARCHAR(75) null,equipmentStatus VARCHAR(75) null,notes VARCHAR(75) null,modifyDate DATE null,syncDate DATE null,quantity INTEGER,dossierId LONG,dossierIdCTN VARCHAR(75) null,dossierNo VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table vr_copproductionplantprodequipment";
	public static final String ORDER_BY_JPQL = " ORDER BY vrcopProdEquipment.modifyDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_copproductionplantprodequipment.modifyDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fds.vr.business.model.VRCOPProdEquipment"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fds.vr.business.model.VRCOPProdEquipment"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fds.vr.business.model.VRCOPProdEquipment"),
			true);
	public static final long COPREPORTNO_COLUMN_BITMASK = 1L;
	public static final long COPREPORTREPOSITORYID_COLUMN_BITMASK = 2L;
	public static final long DOSSIERID_COLUMN_BITMASK = 4L;
	public static final long MTCORE_COLUMN_BITMASK = 8L;
	public static final long MODIFYDATE_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.fds.vr.service.util.ServiceProps.get(
				"lock.expiration.time.com.fds.vr.business.model.VRCOPProdEquipment"));

	public VRCOPProdEquipmentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VRCOPProdEquipment.class;
	}

	@Override
	public String getModelClassName() {
		return VRCOPProdEquipment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("mtCore", getMtCore());
		attributes.put("copReportRepositoryID", getCopReportRepositoryID());
		attributes.put("copReportNo", getCopReportNo());
		attributes.put("sequenceNo", getSequenceNo());
		attributes.put("equipmentCode", getEquipmentCode());
		attributes.put("equipmentName", getEquipmentName());
		attributes.put("equipmentType", getEquipmentType());
		attributes.put("trademark", getTrademark());
		attributes.put("trademarkName", getTrademarkName());
		attributes.put("commercialName", getCommercialName());
		attributes.put("modelCode", getModelCode());
		attributes.put("designSymbolNo", getDesignSymbolNo());
		attributes.put("productionCountryCode", getProductionCountryCode());
		attributes.put("equipmentStatus", getEquipmentStatus());
		attributes.put("notes", getNotes());
		attributes.put("modifyDate", getModifyDate());
		attributes.put("syncDate", getSyncDate());
		attributes.put("quantity", getQuantity());
		attributes.put("dossierId", getDossierId());
		attributes.put("dossierIdCTN", getDossierIdCTN());
		attributes.put("dossierNo", getDossierNo());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long mtCore = (Long)attributes.get("mtCore");

		if (mtCore != null) {
			setMtCore(mtCore);
		}

		Long copReportRepositoryID = (Long)attributes.get(
				"copReportRepositoryID");

		if (copReportRepositoryID != null) {
			setCopReportRepositoryID(copReportRepositoryID);
		}

		String copReportNo = (String)attributes.get("copReportNo");

		if (copReportNo != null) {
			setCopReportNo(copReportNo);
		}

		Long sequenceNo = (Long)attributes.get("sequenceNo");

		if (sequenceNo != null) {
			setSequenceNo(sequenceNo);
		}

		String equipmentCode = (String)attributes.get("equipmentCode");

		if (equipmentCode != null) {
			setEquipmentCode(equipmentCode);
		}

		String equipmentName = (String)attributes.get("equipmentName");

		if (equipmentName != null) {
			setEquipmentName(equipmentName);
		}

		String equipmentType = (String)attributes.get("equipmentType");

		if (equipmentType != null) {
			setEquipmentType(equipmentType);
		}

		String trademark = (String)attributes.get("trademark");

		if (trademark != null) {
			setTrademark(trademark);
		}

		String trademarkName = (String)attributes.get("trademarkName");

		if (trademarkName != null) {
			setTrademarkName(trademarkName);
		}

		String commercialName = (String)attributes.get("commercialName");

		if (commercialName != null) {
			setCommercialName(commercialName);
		}

		String modelCode = (String)attributes.get("modelCode");

		if (modelCode != null) {
			setModelCode(modelCode);
		}

		String designSymbolNo = (String)attributes.get("designSymbolNo");

		if (designSymbolNo != null) {
			setDesignSymbolNo(designSymbolNo);
		}

		String productionCountryCode = (String)attributes.get(
				"productionCountryCode");

		if (productionCountryCode != null) {
			setProductionCountryCode(productionCountryCode);
		}

		String equipmentStatus = (String)attributes.get("equipmentStatus");

		if (equipmentStatus != null) {
			setEquipmentStatus(equipmentStatus);
		}

		String notes = (String)attributes.get("notes");

		if (notes != null) {
			setNotes(notes);
		}

		Date modifyDate = (Date)attributes.get("modifyDate");

		if (modifyDate != null) {
			setModifyDate(modifyDate);
		}

		Date syncDate = (Date)attributes.get("syncDate");

		if (syncDate != null) {
			setSyncDate(syncDate);
		}

		Integer quantity = (Integer)attributes.get("quantity");

		if (quantity != null) {
			setQuantity(quantity);
		}

		Long dossierId = (Long)attributes.get("dossierId");

		if (dossierId != null) {
			setDossierId(dossierId);
		}

		String dossierIdCTN = (String)attributes.get("dossierIdCTN");

		if (dossierIdCTN != null) {
			setDossierIdCTN(dossierIdCTN);
		}

		String dossierNo = (String)attributes.get("dossierNo");

		if (dossierNo != null) {
			setDossierNo(dossierNo);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getMtCore() {
		return _mtCore;
	}

	@Override
	public void setMtCore(long mtCore) {
		_columnBitmask |= MTCORE_COLUMN_BITMASK;

		if (!_setOriginalMtCore) {
			_setOriginalMtCore = true;

			_originalMtCore = _mtCore;
		}

		_mtCore = mtCore;
	}

	public long getOriginalMtCore() {
		return _originalMtCore;
	}

	@Override
	public long getCopReportRepositoryID() {
		return _copReportRepositoryID;
	}

	@Override
	public void setCopReportRepositoryID(long copReportRepositoryID) {
		_columnBitmask |= COPREPORTREPOSITORYID_COLUMN_BITMASK;

		if (!_setOriginalCopReportRepositoryID) {
			_setOriginalCopReportRepositoryID = true;

			_originalCopReportRepositoryID = _copReportRepositoryID;
		}

		_copReportRepositoryID = copReportRepositoryID;
	}

	public long getOriginalCopReportRepositoryID() {
		return _originalCopReportRepositoryID;
	}

	@Override
	public String getCopReportNo() {
		if (_copReportNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _copReportNo;
		}
	}

	@Override
	public void setCopReportNo(String copReportNo) {
		_columnBitmask |= COPREPORTNO_COLUMN_BITMASK;

		if (_originalCopReportNo == null) {
			_originalCopReportNo = _copReportNo;
		}

		_copReportNo = copReportNo;
	}

	public String getOriginalCopReportNo() {
		return GetterUtil.getString(_originalCopReportNo);
	}

	@Override
	public long getSequenceNo() {
		return _sequenceNo;
	}

	@Override
	public void setSequenceNo(long sequenceNo) {
		_sequenceNo = sequenceNo;
	}

	@Override
	public String getEquipmentCode() {
		if (_equipmentCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _equipmentCode;
		}
	}

	@Override
	public void setEquipmentCode(String equipmentCode) {
		_equipmentCode = equipmentCode;
	}

	@Override
	public String getEquipmentName() {
		if (_equipmentName == null) {
			return StringPool.BLANK;
		}
		else {
			return _equipmentName;
		}
	}

	@Override
	public void setEquipmentName(String equipmentName) {
		_equipmentName = equipmentName;
	}

	@Override
	public String getEquipmentType() {
		if (_equipmentType == null) {
			return StringPool.BLANK;
		}
		else {
			return _equipmentType;
		}
	}

	@Override
	public void setEquipmentType(String equipmentType) {
		_equipmentType = equipmentType;
	}

	@Override
	public String getTrademark() {
		if (_trademark == null) {
			return StringPool.BLANK;
		}
		else {
			return _trademark;
		}
	}

	@Override
	public void setTrademark(String trademark) {
		_trademark = trademark;
	}

	@Override
	public String getTrademarkName() {
		if (_trademarkName == null) {
			return StringPool.BLANK;
		}
		else {
			return _trademarkName;
		}
	}

	@Override
	public void setTrademarkName(String trademarkName) {
		_trademarkName = trademarkName;
	}

	@Override
	public String getCommercialName() {
		if (_commercialName == null) {
			return StringPool.BLANK;
		}
		else {
			return _commercialName;
		}
	}

	@Override
	public void setCommercialName(String commercialName) {
		_commercialName = commercialName;
	}

	@Override
	public String getModelCode() {
		if (_modelCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _modelCode;
		}
	}

	@Override
	public void setModelCode(String modelCode) {
		_modelCode = modelCode;
	}

	@Override
	public String getDesignSymbolNo() {
		if (_designSymbolNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _designSymbolNo;
		}
	}

	@Override
	public void setDesignSymbolNo(String designSymbolNo) {
		_designSymbolNo = designSymbolNo;
	}

	@Override
	public String getProductionCountryCode() {
		if (_productionCountryCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionCountryCode;
		}
	}

	@Override
	public void setProductionCountryCode(String productionCountryCode) {
		_productionCountryCode = productionCountryCode;
	}

	@Override
	public String getEquipmentStatus() {
		if (_equipmentStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _equipmentStatus;
		}
	}

	@Override
	public void setEquipmentStatus(String equipmentStatus) {
		_equipmentStatus = equipmentStatus;
	}

	@Override
	public String getNotes() {
		if (_notes == null) {
			return StringPool.BLANK;
		}
		else {
			return _notes;
		}
	}

	@Override
	public void setNotes(String notes) {
		_notes = notes;
	}

	@Override
	public Date getModifyDate() {
		return _modifyDate;
	}

	@Override
	public void setModifyDate(Date modifyDate) {
		_columnBitmask = -1L;

		_modifyDate = modifyDate;
	}

	@Override
	public Date getSyncDate() {
		return _syncDate;
	}

	@Override
	public void setSyncDate(Date syncDate) {
		_syncDate = syncDate;
	}

	@Override
	public int getQuantity() {
		return _quantity;
	}

	@Override
	public void setQuantity(int quantity) {
		_quantity = quantity;
	}

	@Override
	public long getDossierId() {
		return _dossierId;
	}

	@Override
	public void setDossierId(long dossierId) {
		_columnBitmask |= DOSSIERID_COLUMN_BITMASK;

		if (!_setOriginalDossierId) {
			_setOriginalDossierId = true;

			_originalDossierId = _dossierId;
		}

		_dossierId = dossierId;
	}

	public long getOriginalDossierId() {
		return _originalDossierId;
	}

	@Override
	public String getDossierIdCTN() {
		if (_dossierIdCTN == null) {
			return StringPool.BLANK;
		}
		else {
			return _dossierIdCTN;
		}
	}

	@Override
	public void setDossierIdCTN(String dossierIdCTN) {
		_dossierIdCTN = dossierIdCTN;
	}

	@Override
	public String getDossierNo() {
		if (_dossierNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _dossierNo;
		}
	}

	@Override
	public void setDossierNo(String dossierNo) {
		_dossierNo = dossierNo;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VRCOPProdEquipment.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VRCOPProdEquipment toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VRCOPProdEquipment)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VRCOPProdEquipmentImpl vrcopProdEquipmentImpl = new VRCOPProdEquipmentImpl();

		vrcopProdEquipmentImpl.setId(getId());
		vrcopProdEquipmentImpl.setMtCore(getMtCore());
		vrcopProdEquipmentImpl.setCopReportRepositoryID(getCopReportRepositoryID());
		vrcopProdEquipmentImpl.setCopReportNo(getCopReportNo());
		vrcopProdEquipmentImpl.setSequenceNo(getSequenceNo());
		vrcopProdEquipmentImpl.setEquipmentCode(getEquipmentCode());
		vrcopProdEquipmentImpl.setEquipmentName(getEquipmentName());
		vrcopProdEquipmentImpl.setEquipmentType(getEquipmentType());
		vrcopProdEquipmentImpl.setTrademark(getTrademark());
		vrcopProdEquipmentImpl.setTrademarkName(getTrademarkName());
		vrcopProdEquipmentImpl.setCommercialName(getCommercialName());
		vrcopProdEquipmentImpl.setModelCode(getModelCode());
		vrcopProdEquipmentImpl.setDesignSymbolNo(getDesignSymbolNo());
		vrcopProdEquipmentImpl.setProductionCountryCode(getProductionCountryCode());
		vrcopProdEquipmentImpl.setEquipmentStatus(getEquipmentStatus());
		vrcopProdEquipmentImpl.setNotes(getNotes());
		vrcopProdEquipmentImpl.setModifyDate(getModifyDate());
		vrcopProdEquipmentImpl.setSyncDate(getSyncDate());
		vrcopProdEquipmentImpl.setQuantity(getQuantity());
		vrcopProdEquipmentImpl.setDossierId(getDossierId());
		vrcopProdEquipmentImpl.setDossierIdCTN(getDossierIdCTN());
		vrcopProdEquipmentImpl.setDossierNo(getDossierNo());

		vrcopProdEquipmentImpl.resetOriginalValues();

		return vrcopProdEquipmentImpl;
	}

	@Override
	public int compareTo(VRCOPProdEquipment vrcopProdEquipment) {
		int value = 0;

		value = DateUtil.compareTo(getModifyDate(),
				vrcopProdEquipment.getModifyDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VRCOPProdEquipment)) {
			return false;
		}

		VRCOPProdEquipment vrcopProdEquipment = (VRCOPProdEquipment)obj;

		long primaryKey = vrcopProdEquipment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VRCOPProdEquipmentModelImpl vrcopProdEquipmentModelImpl = this;

		vrcopProdEquipmentModelImpl._originalMtCore = vrcopProdEquipmentModelImpl._mtCore;

		vrcopProdEquipmentModelImpl._setOriginalMtCore = false;

		vrcopProdEquipmentModelImpl._originalCopReportRepositoryID = vrcopProdEquipmentModelImpl._copReportRepositoryID;

		vrcopProdEquipmentModelImpl._setOriginalCopReportRepositoryID = false;

		vrcopProdEquipmentModelImpl._originalCopReportNo = vrcopProdEquipmentModelImpl._copReportNo;

		vrcopProdEquipmentModelImpl._originalDossierId = vrcopProdEquipmentModelImpl._dossierId;

		vrcopProdEquipmentModelImpl._setOriginalDossierId = false;

		vrcopProdEquipmentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VRCOPProdEquipment> toCacheModel() {
		VRCOPProdEquipmentCacheModel vrcopProdEquipmentCacheModel = new VRCOPProdEquipmentCacheModel();

		vrcopProdEquipmentCacheModel.id = getId();

		vrcopProdEquipmentCacheModel.mtCore = getMtCore();

		vrcopProdEquipmentCacheModel.copReportRepositoryID = getCopReportRepositoryID();

		vrcopProdEquipmentCacheModel.copReportNo = getCopReportNo();

		String copReportNo = vrcopProdEquipmentCacheModel.copReportNo;

		if ((copReportNo != null) && (copReportNo.length() == 0)) {
			vrcopProdEquipmentCacheModel.copReportNo = null;
		}

		vrcopProdEquipmentCacheModel.sequenceNo = getSequenceNo();

		vrcopProdEquipmentCacheModel.equipmentCode = getEquipmentCode();

		String equipmentCode = vrcopProdEquipmentCacheModel.equipmentCode;

		if ((equipmentCode != null) && (equipmentCode.length() == 0)) {
			vrcopProdEquipmentCacheModel.equipmentCode = null;
		}

		vrcopProdEquipmentCacheModel.equipmentName = getEquipmentName();

		String equipmentName = vrcopProdEquipmentCacheModel.equipmentName;

		if ((equipmentName != null) && (equipmentName.length() == 0)) {
			vrcopProdEquipmentCacheModel.equipmentName = null;
		}

		vrcopProdEquipmentCacheModel.equipmentType = getEquipmentType();

		String equipmentType = vrcopProdEquipmentCacheModel.equipmentType;

		if ((equipmentType != null) && (equipmentType.length() == 0)) {
			vrcopProdEquipmentCacheModel.equipmentType = null;
		}

		vrcopProdEquipmentCacheModel.trademark = getTrademark();

		String trademark = vrcopProdEquipmentCacheModel.trademark;

		if ((trademark != null) && (trademark.length() == 0)) {
			vrcopProdEquipmentCacheModel.trademark = null;
		}

		vrcopProdEquipmentCacheModel.trademarkName = getTrademarkName();

		String trademarkName = vrcopProdEquipmentCacheModel.trademarkName;

		if ((trademarkName != null) && (trademarkName.length() == 0)) {
			vrcopProdEquipmentCacheModel.trademarkName = null;
		}

		vrcopProdEquipmentCacheModel.commercialName = getCommercialName();

		String commercialName = vrcopProdEquipmentCacheModel.commercialName;

		if ((commercialName != null) && (commercialName.length() == 0)) {
			vrcopProdEquipmentCacheModel.commercialName = null;
		}

		vrcopProdEquipmentCacheModel.modelCode = getModelCode();

		String modelCode = vrcopProdEquipmentCacheModel.modelCode;

		if ((modelCode != null) && (modelCode.length() == 0)) {
			vrcopProdEquipmentCacheModel.modelCode = null;
		}

		vrcopProdEquipmentCacheModel.designSymbolNo = getDesignSymbolNo();

		String designSymbolNo = vrcopProdEquipmentCacheModel.designSymbolNo;

		if ((designSymbolNo != null) && (designSymbolNo.length() == 0)) {
			vrcopProdEquipmentCacheModel.designSymbolNo = null;
		}

		vrcopProdEquipmentCacheModel.productionCountryCode = getProductionCountryCode();

		String productionCountryCode = vrcopProdEquipmentCacheModel.productionCountryCode;

		if ((productionCountryCode != null) &&
				(productionCountryCode.length() == 0)) {
			vrcopProdEquipmentCacheModel.productionCountryCode = null;
		}

		vrcopProdEquipmentCacheModel.equipmentStatus = getEquipmentStatus();

		String equipmentStatus = vrcopProdEquipmentCacheModel.equipmentStatus;

		if ((equipmentStatus != null) && (equipmentStatus.length() == 0)) {
			vrcopProdEquipmentCacheModel.equipmentStatus = null;
		}

		vrcopProdEquipmentCacheModel.notes = getNotes();

		String notes = vrcopProdEquipmentCacheModel.notes;

		if ((notes != null) && (notes.length() == 0)) {
			vrcopProdEquipmentCacheModel.notes = null;
		}

		Date modifyDate = getModifyDate();

		if (modifyDate != null) {
			vrcopProdEquipmentCacheModel.modifyDate = modifyDate.getTime();
		}
		else {
			vrcopProdEquipmentCacheModel.modifyDate = Long.MIN_VALUE;
		}

		Date syncDate = getSyncDate();

		if (syncDate != null) {
			vrcopProdEquipmentCacheModel.syncDate = syncDate.getTime();
		}
		else {
			vrcopProdEquipmentCacheModel.syncDate = Long.MIN_VALUE;
		}

		vrcopProdEquipmentCacheModel.quantity = getQuantity();

		vrcopProdEquipmentCacheModel.dossierId = getDossierId();

		vrcopProdEquipmentCacheModel.dossierIdCTN = getDossierIdCTN();

		String dossierIdCTN = vrcopProdEquipmentCacheModel.dossierIdCTN;

		if ((dossierIdCTN != null) && (dossierIdCTN.length() == 0)) {
			vrcopProdEquipmentCacheModel.dossierIdCTN = null;
		}

		vrcopProdEquipmentCacheModel.dossierNo = getDossierNo();

		String dossierNo = vrcopProdEquipmentCacheModel.dossierNo;

		if ((dossierNo != null) && (dossierNo.length() == 0)) {
			vrcopProdEquipmentCacheModel.dossierNo = null;
		}

		return vrcopProdEquipmentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(45);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", mtCore=");
		sb.append(getMtCore());
		sb.append(", copReportRepositoryID=");
		sb.append(getCopReportRepositoryID());
		sb.append(", copReportNo=");
		sb.append(getCopReportNo());
		sb.append(", sequenceNo=");
		sb.append(getSequenceNo());
		sb.append(", equipmentCode=");
		sb.append(getEquipmentCode());
		sb.append(", equipmentName=");
		sb.append(getEquipmentName());
		sb.append(", equipmentType=");
		sb.append(getEquipmentType());
		sb.append(", trademark=");
		sb.append(getTrademark());
		sb.append(", trademarkName=");
		sb.append(getTrademarkName());
		sb.append(", commercialName=");
		sb.append(getCommercialName());
		sb.append(", modelCode=");
		sb.append(getModelCode());
		sb.append(", designSymbolNo=");
		sb.append(getDesignSymbolNo());
		sb.append(", productionCountryCode=");
		sb.append(getProductionCountryCode());
		sb.append(", equipmentStatus=");
		sb.append(getEquipmentStatus());
		sb.append(", notes=");
		sb.append(getNotes());
		sb.append(", modifyDate=");
		sb.append(getModifyDate());
		sb.append(", syncDate=");
		sb.append(getSyncDate());
		sb.append(", quantity=");
		sb.append(getQuantity());
		sb.append(", dossierId=");
		sb.append(getDossierId());
		sb.append(", dossierIdCTN=");
		sb.append(getDossierIdCTN());
		sb.append(", dossierNo=");
		sb.append(getDossierNo());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(70);

		sb.append("<model><model-name>");
		sb.append("com.fds.vr.business.model.VRCOPProdEquipment");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mtCore</column-name><column-value><![CDATA[");
		sb.append(getMtCore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportRepositoryID</column-name><column-value><![CDATA[");
		sb.append(getCopReportRepositoryID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportNo</column-name><column-value><![CDATA[");
		sb.append(getCopReportNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sequenceNo</column-name><column-value><![CDATA[");
		sb.append(getSequenceNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>equipmentCode</column-name><column-value><![CDATA[");
		sb.append(getEquipmentCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>equipmentName</column-name><column-value><![CDATA[");
		sb.append(getEquipmentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>equipmentType</column-name><column-value><![CDATA[");
		sb.append(getEquipmentType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>trademark</column-name><column-value><![CDATA[");
		sb.append(getTrademark());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>trademarkName</column-name><column-value><![CDATA[");
		sb.append(getTrademarkName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commercialName</column-name><column-value><![CDATA[");
		sb.append(getCommercialName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modelCode</column-name><column-value><![CDATA[");
		sb.append(getModelCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>designSymbolNo</column-name><column-value><![CDATA[");
		sb.append(getDesignSymbolNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionCountryCode</column-name><column-value><![CDATA[");
		sb.append(getProductionCountryCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>equipmentStatus</column-name><column-value><![CDATA[");
		sb.append(getEquipmentStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notes</column-name><column-value><![CDATA[");
		sb.append(getNotes());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifyDate</column-name><column-value><![CDATA[");
		sb.append(getModifyDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncDate</column-name><column-value><![CDATA[");
		sb.append(getSyncDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quantity</column-name><column-value><![CDATA[");
		sb.append(getQuantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierId</column-name><column-value><![CDATA[");
		sb.append(getDossierId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierIdCTN</column-name><column-value><![CDATA[");
		sb.append(getDossierIdCTN());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierNo</column-name><column-value><![CDATA[");
		sb.append(getDossierNo());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VRCOPProdEquipment.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VRCOPProdEquipment.class
		};
	private long _id;
	private long _mtCore;
	private long _originalMtCore;
	private boolean _setOriginalMtCore;
	private long _copReportRepositoryID;
	private long _originalCopReportRepositoryID;
	private boolean _setOriginalCopReportRepositoryID;
	private String _copReportNo;
	private String _originalCopReportNo;
	private long _sequenceNo;
	private String _equipmentCode;
	private String _equipmentName;
	private String _equipmentType;
	private String _trademark;
	private String _trademarkName;
	private String _commercialName;
	private String _modelCode;
	private String _designSymbolNo;
	private String _productionCountryCode;
	private String _equipmentStatus;
	private String _notes;
	private Date _modifyDate;
	private Date _syncDate;
	private int _quantity;
	private long _dossierId;
	private long _originalDossierId;
	private boolean _setOriginalDossierId;
	private String _dossierIdCTN;
	private String _dossierNo;
	private long _columnBitmask;
	private VRCOPProdEquipment _escapedModel;
}