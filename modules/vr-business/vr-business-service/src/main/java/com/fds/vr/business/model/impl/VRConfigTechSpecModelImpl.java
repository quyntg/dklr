/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.business.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.business.model.VRConfigTechSpec;
import com.fds.vr.business.model.VRConfigTechSpecModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VRConfigTechSpec service. Represents a row in the &quot;vr_cfg_technicalspec&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VRConfigTechSpecModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VRConfigTechSpecImpl}.
 * </p>
 *
 * @author LamTV
 * @see VRConfigTechSpecImpl
 * @see VRConfigTechSpec
 * @see VRConfigTechSpecModel
 * @generated
 */
@ProviderType
public class VRConfigTechSpecModelImpl extends BaseModelImpl<VRConfigTechSpec>
	implements VRConfigTechSpecModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vr config tech spec model instance should use the {@link VRConfigTechSpec} interface instead.
	 */
	public static final String TABLE_NAME = "vr_cfg_technicalspec";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "vehicleclass", Types.VARCHAR },
			{ "vehicletype", Types.VARCHAR },
			{ "vehicletypename", Types.VARCHAR },
			{ "sequenceno", Types.INTEGER },
			{ "specificationname", Types.VARCHAR },
			{ "specificationcode", Types.VARCHAR },
			{ "specificationdisplayname", Types.VARCHAR },
			{ "spec_category", Types.VARCHAR },
			{ "specificationgroup", Types.INTEGER },
			{ "SpecificationDataCollectionID", Types.VARCHAR },
			{ "SpecificationBasicUnit", Types.VARCHAR },
			{ "SpecificationStandard", Types.VARCHAR },
			{ "SpecificationEntryType", Types.VARCHAR },
			{ "SpecificationEntryPlaceholder", Types.VARCHAR },
			{ "SpecificationMandatory", Types.INTEGER },
			{ "Module", Types.VARCHAR },
			{ "synchdate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("vehicleclass", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("vehicletype", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("vehicletypename", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sequenceno", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("specificationname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("specificationcode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("specificationdisplayname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("spec_category", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("specificationgroup", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("SpecificationDataCollectionID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SpecificationBasicUnit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SpecificationStandard", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SpecificationEntryType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SpecificationEntryPlaceholder", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SpecificationMandatory", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("Module", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("synchdate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table vr_cfg_technicalspec (id LONG not null primary key,vehicleclass VARCHAR(75) null,vehicletype VARCHAR(75) null,vehicletypename VARCHAR(75) null,sequenceno INTEGER,specificationname VARCHAR(75) null,specificationcode VARCHAR(75) null,specificationdisplayname VARCHAR(75) null,spec_category VARCHAR(75) null,specificationgroup INTEGER,SpecificationDataCollectionID VARCHAR(75) null,SpecificationBasicUnit VARCHAR(75) null,SpecificationStandard VARCHAR(75) null,SpecificationEntryType VARCHAR(75) null,SpecificationEntryPlaceholder VARCHAR(75) null,SpecificationMandatory INTEGER,Module VARCHAR(75) null,synchdate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table vr_cfg_technicalspec";
	public static final String ORDER_BY_JPQL = " ORDER BY vrConfigTechSpec.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_cfg_technicalspec.id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fds.vr.business.model.VRConfigTechSpec"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fds.vr.business.model.VRConfigTechSpec"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fds.vr.business.model.VRConfigTechSpec"),
			true);
	public static final long MODULE_COLUMN_BITMASK = 1L;
	public static final long SPECCATEGORY_COLUMN_BITMASK = 2L;
	public static final long VEHICLECLASS_COLUMN_BITMASK = 4L;
	public static final long VEHICLETYPE_COLUMN_BITMASK = 8L;
	public static final long ID_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.fds.vr.service.util.ServiceProps.get(
				"lock.expiration.time.com.fds.vr.business.model.VRConfigTechSpec"));

	public VRConfigTechSpecModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VRConfigTechSpec.class;
	}

	@Override
	public String getModelClassName() {
		return VRConfigTechSpec.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("vehicleClass", getVehicleClass());
		attributes.put("vehicleType", getVehicleType());
		attributes.put("vehicletypeName", getVehicletypeName());
		attributes.put("sequenceNo", getSequenceNo());
		attributes.put("specificationName", getSpecificationName());
		attributes.put("specificationCode", getSpecificationCode());
		attributes.put("specificationDisplayName", getSpecificationDisplayName());
		attributes.put("specCategory", getSpecCategory());
		attributes.put("specificationGroup", getSpecificationGroup());
		attributes.put("specificationDataCollectionId",
			getSpecificationDataCollectionId());
		attributes.put("specificationBasicUnit", getSpecificationBasicUnit());
		attributes.put("specificationStandard", getSpecificationStandard());
		attributes.put("specificationEntryType", getSpecificationEntryType());
		attributes.put("specificationEntryPlaceholder",
			getSpecificationEntryPlaceholder());
		attributes.put("specificationMandatory", getSpecificationMandatory());
		attributes.put("module", getModule());
		attributes.put("synchDate", getSynchDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String vehicleClass = (String)attributes.get("vehicleClass");

		if (vehicleClass != null) {
			setVehicleClass(vehicleClass);
		}

		String vehicleType = (String)attributes.get("vehicleType");

		if (vehicleType != null) {
			setVehicleType(vehicleType);
		}

		String vehicletypeName = (String)attributes.get("vehicletypeName");

		if (vehicletypeName != null) {
			setVehicletypeName(vehicletypeName);
		}

		Integer sequenceNo = (Integer)attributes.get("sequenceNo");

		if (sequenceNo != null) {
			setSequenceNo(sequenceNo);
		}

		String specificationName = (String)attributes.get("specificationName");

		if (specificationName != null) {
			setSpecificationName(specificationName);
		}

		String specificationCode = (String)attributes.get("specificationCode");

		if (specificationCode != null) {
			setSpecificationCode(specificationCode);
		}

		String specificationDisplayName = (String)attributes.get(
				"specificationDisplayName");

		if (specificationDisplayName != null) {
			setSpecificationDisplayName(specificationDisplayName);
		}

		String specCategory = (String)attributes.get("specCategory");

		if (specCategory != null) {
			setSpecCategory(specCategory);
		}

		Integer specificationGroup = (Integer)attributes.get(
				"specificationGroup");

		if (specificationGroup != null) {
			setSpecificationGroup(specificationGroup);
		}

		String specificationDataCollectionId = (String)attributes.get(
				"specificationDataCollectionId");

		if (specificationDataCollectionId != null) {
			setSpecificationDataCollectionId(specificationDataCollectionId);
		}

		String specificationBasicUnit = (String)attributes.get(
				"specificationBasicUnit");

		if (specificationBasicUnit != null) {
			setSpecificationBasicUnit(specificationBasicUnit);
		}

		String specificationStandard = (String)attributes.get(
				"specificationStandard");

		if (specificationStandard != null) {
			setSpecificationStandard(specificationStandard);
		}

		String specificationEntryType = (String)attributes.get(
				"specificationEntryType");

		if (specificationEntryType != null) {
			setSpecificationEntryType(specificationEntryType);
		}

		String specificationEntryPlaceholder = (String)attributes.get(
				"specificationEntryPlaceholder");

		if (specificationEntryPlaceholder != null) {
			setSpecificationEntryPlaceholder(specificationEntryPlaceholder);
		}

		Integer specificationMandatory = (Integer)attributes.get(
				"specificationMandatory");

		if (specificationMandatory != null) {
			setSpecificationMandatory(specificationMandatory);
		}

		String module = (String)attributes.get("module");

		if (module != null) {
			setModule(module);
		}

		Date synchDate = (Date)attributes.get("synchDate");

		if (synchDate != null) {
			setSynchDate(synchDate);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public String getVehicleClass() {
		if (_vehicleClass == null) {
			return StringPool.BLANK;
		}
		else {
			return _vehicleClass;
		}
	}

	@Override
	public void setVehicleClass(String vehicleClass) {
		_columnBitmask |= VEHICLECLASS_COLUMN_BITMASK;

		if (_originalVehicleClass == null) {
			_originalVehicleClass = _vehicleClass;
		}

		_vehicleClass = vehicleClass;
	}

	public String getOriginalVehicleClass() {
		return GetterUtil.getString(_originalVehicleClass);
	}

	@Override
	public String getVehicleType() {
		if (_vehicleType == null) {
			return StringPool.BLANK;
		}
		else {
			return _vehicleType;
		}
	}

	@Override
	public void setVehicleType(String vehicleType) {
		_columnBitmask |= VEHICLETYPE_COLUMN_BITMASK;

		if (_originalVehicleType == null) {
			_originalVehicleType = _vehicleType;
		}

		_vehicleType = vehicleType;
	}

	public String getOriginalVehicleType() {
		return GetterUtil.getString(_originalVehicleType);
	}

	@Override
	public String getVehicletypeName() {
		if (_vehicletypeName == null) {
			return StringPool.BLANK;
		}
		else {
			return _vehicletypeName;
		}
	}

	@Override
	public void setVehicletypeName(String vehicletypeName) {
		_vehicletypeName = vehicletypeName;
	}

	@Override
	public int getSequenceNo() {
		return _sequenceNo;
	}

	@Override
	public void setSequenceNo(int sequenceNo) {
		_sequenceNo = sequenceNo;
	}

	@Override
	public String getSpecificationName() {
		if (_specificationName == null) {
			return StringPool.BLANK;
		}
		else {
			return _specificationName;
		}
	}

	@Override
	public void setSpecificationName(String specificationName) {
		_specificationName = specificationName;
	}

	@Override
	public String getSpecificationCode() {
		if (_specificationCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _specificationCode;
		}
	}

	@Override
	public void setSpecificationCode(String specificationCode) {
		_specificationCode = specificationCode;
	}

	@Override
	public String getSpecificationDisplayName() {
		if (_specificationDisplayName == null) {
			return StringPool.BLANK;
		}
		else {
			return _specificationDisplayName;
		}
	}

	@Override
	public void setSpecificationDisplayName(String specificationDisplayName) {
		_specificationDisplayName = specificationDisplayName;
	}

	@Override
	public String getSpecCategory() {
		if (_specCategory == null) {
			return StringPool.BLANK;
		}
		else {
			return _specCategory;
		}
	}

	@Override
	public void setSpecCategory(String specCategory) {
		_columnBitmask |= SPECCATEGORY_COLUMN_BITMASK;

		if (_originalSpecCategory == null) {
			_originalSpecCategory = _specCategory;
		}

		_specCategory = specCategory;
	}

	public String getOriginalSpecCategory() {
		return GetterUtil.getString(_originalSpecCategory);
	}

	@Override
	public int getSpecificationGroup() {
		return _specificationGroup;
	}

	@Override
	public void setSpecificationGroup(int specificationGroup) {
		_specificationGroup = specificationGroup;
	}

	@Override
	public String getSpecificationDataCollectionId() {
		if (_specificationDataCollectionId == null) {
			return StringPool.BLANK;
		}
		else {
			return _specificationDataCollectionId;
		}
	}

	@Override
	public void setSpecificationDataCollectionId(
		String specificationDataCollectionId) {
		_specificationDataCollectionId = specificationDataCollectionId;
	}

	@Override
	public String getSpecificationBasicUnit() {
		if (_specificationBasicUnit == null) {
			return StringPool.BLANK;
		}
		else {
			return _specificationBasicUnit;
		}
	}

	@Override
	public void setSpecificationBasicUnit(String specificationBasicUnit) {
		_specificationBasicUnit = specificationBasicUnit;
	}

	@Override
	public String getSpecificationStandard() {
		if (_specificationStandard == null) {
			return StringPool.BLANK;
		}
		else {
			return _specificationStandard;
		}
	}

	@Override
	public void setSpecificationStandard(String specificationStandard) {
		_specificationStandard = specificationStandard;
	}

	@Override
	public String getSpecificationEntryType() {
		if (_specificationEntryType == null) {
			return StringPool.BLANK;
		}
		else {
			return _specificationEntryType;
		}
	}

	@Override
	public void setSpecificationEntryType(String specificationEntryType) {
		_specificationEntryType = specificationEntryType;
	}

	@Override
	public String getSpecificationEntryPlaceholder() {
		if (_specificationEntryPlaceholder == null) {
			return StringPool.BLANK;
		}
		else {
			return _specificationEntryPlaceholder;
		}
	}

	@Override
	public void setSpecificationEntryPlaceholder(
		String specificationEntryPlaceholder) {
		_specificationEntryPlaceholder = specificationEntryPlaceholder;
	}

	@Override
	public int getSpecificationMandatory() {
		return _specificationMandatory;
	}

	@Override
	public void setSpecificationMandatory(int specificationMandatory) {
		_specificationMandatory = specificationMandatory;
	}

	@Override
	public String getModule() {
		if (_module == null) {
			return StringPool.BLANK;
		}
		else {
			return _module;
		}
	}

	@Override
	public void setModule(String module) {
		_columnBitmask |= MODULE_COLUMN_BITMASK;

		if (_originalModule == null) {
			_originalModule = _module;
		}

		_module = module;
	}

	public String getOriginalModule() {
		return GetterUtil.getString(_originalModule);
	}

	@Override
	public Date getSynchDate() {
		return _synchDate;
	}

	@Override
	public void setSynchDate(Date synchDate) {
		_synchDate = synchDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VRConfigTechSpec.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VRConfigTechSpec toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VRConfigTechSpec)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VRConfigTechSpecImpl vrConfigTechSpecImpl = new VRConfigTechSpecImpl();

		vrConfigTechSpecImpl.setId(getId());
		vrConfigTechSpecImpl.setVehicleClass(getVehicleClass());
		vrConfigTechSpecImpl.setVehicleType(getVehicleType());
		vrConfigTechSpecImpl.setVehicletypeName(getVehicletypeName());
		vrConfigTechSpecImpl.setSequenceNo(getSequenceNo());
		vrConfigTechSpecImpl.setSpecificationName(getSpecificationName());
		vrConfigTechSpecImpl.setSpecificationCode(getSpecificationCode());
		vrConfigTechSpecImpl.setSpecificationDisplayName(getSpecificationDisplayName());
		vrConfigTechSpecImpl.setSpecCategory(getSpecCategory());
		vrConfigTechSpecImpl.setSpecificationGroup(getSpecificationGroup());
		vrConfigTechSpecImpl.setSpecificationDataCollectionId(getSpecificationDataCollectionId());
		vrConfigTechSpecImpl.setSpecificationBasicUnit(getSpecificationBasicUnit());
		vrConfigTechSpecImpl.setSpecificationStandard(getSpecificationStandard());
		vrConfigTechSpecImpl.setSpecificationEntryType(getSpecificationEntryType());
		vrConfigTechSpecImpl.setSpecificationEntryPlaceholder(getSpecificationEntryPlaceholder());
		vrConfigTechSpecImpl.setSpecificationMandatory(getSpecificationMandatory());
		vrConfigTechSpecImpl.setModule(getModule());
		vrConfigTechSpecImpl.setSynchDate(getSynchDate());

		vrConfigTechSpecImpl.resetOriginalValues();

		return vrConfigTechSpecImpl;
	}

	@Override
	public int compareTo(VRConfigTechSpec vrConfigTechSpec) {
		long primaryKey = vrConfigTechSpec.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VRConfigTechSpec)) {
			return false;
		}

		VRConfigTechSpec vrConfigTechSpec = (VRConfigTechSpec)obj;

		long primaryKey = vrConfigTechSpec.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VRConfigTechSpecModelImpl vrConfigTechSpecModelImpl = this;

		vrConfigTechSpecModelImpl._originalVehicleClass = vrConfigTechSpecModelImpl._vehicleClass;

		vrConfigTechSpecModelImpl._originalVehicleType = vrConfigTechSpecModelImpl._vehicleType;

		vrConfigTechSpecModelImpl._originalSpecCategory = vrConfigTechSpecModelImpl._specCategory;

		vrConfigTechSpecModelImpl._originalModule = vrConfigTechSpecModelImpl._module;

		vrConfigTechSpecModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VRConfigTechSpec> toCacheModel() {
		VRConfigTechSpecCacheModel vrConfigTechSpecCacheModel = new VRConfigTechSpecCacheModel();

		vrConfigTechSpecCacheModel.id = getId();

		vrConfigTechSpecCacheModel.vehicleClass = getVehicleClass();

		String vehicleClass = vrConfigTechSpecCacheModel.vehicleClass;

		if ((vehicleClass != null) && (vehicleClass.length() == 0)) {
			vrConfigTechSpecCacheModel.vehicleClass = null;
		}

		vrConfigTechSpecCacheModel.vehicleType = getVehicleType();

		String vehicleType = vrConfigTechSpecCacheModel.vehicleType;

		if ((vehicleType != null) && (vehicleType.length() == 0)) {
			vrConfigTechSpecCacheModel.vehicleType = null;
		}

		vrConfigTechSpecCacheModel.vehicletypeName = getVehicletypeName();

		String vehicletypeName = vrConfigTechSpecCacheModel.vehicletypeName;

		if ((vehicletypeName != null) && (vehicletypeName.length() == 0)) {
			vrConfigTechSpecCacheModel.vehicletypeName = null;
		}

		vrConfigTechSpecCacheModel.sequenceNo = getSequenceNo();

		vrConfigTechSpecCacheModel.specificationName = getSpecificationName();

		String specificationName = vrConfigTechSpecCacheModel.specificationName;

		if ((specificationName != null) && (specificationName.length() == 0)) {
			vrConfigTechSpecCacheModel.specificationName = null;
		}

		vrConfigTechSpecCacheModel.specificationCode = getSpecificationCode();

		String specificationCode = vrConfigTechSpecCacheModel.specificationCode;

		if ((specificationCode != null) && (specificationCode.length() == 0)) {
			vrConfigTechSpecCacheModel.specificationCode = null;
		}

		vrConfigTechSpecCacheModel.specificationDisplayName = getSpecificationDisplayName();

		String specificationDisplayName = vrConfigTechSpecCacheModel.specificationDisplayName;

		if ((specificationDisplayName != null) &&
				(specificationDisplayName.length() == 0)) {
			vrConfigTechSpecCacheModel.specificationDisplayName = null;
		}

		vrConfigTechSpecCacheModel.specCategory = getSpecCategory();

		String specCategory = vrConfigTechSpecCacheModel.specCategory;

		if ((specCategory != null) && (specCategory.length() == 0)) {
			vrConfigTechSpecCacheModel.specCategory = null;
		}

		vrConfigTechSpecCacheModel.specificationGroup = getSpecificationGroup();

		vrConfigTechSpecCacheModel.specificationDataCollectionId = getSpecificationDataCollectionId();

		String specificationDataCollectionId = vrConfigTechSpecCacheModel.specificationDataCollectionId;

		if ((specificationDataCollectionId != null) &&
				(specificationDataCollectionId.length() == 0)) {
			vrConfigTechSpecCacheModel.specificationDataCollectionId = null;
		}

		vrConfigTechSpecCacheModel.specificationBasicUnit = getSpecificationBasicUnit();

		String specificationBasicUnit = vrConfigTechSpecCacheModel.specificationBasicUnit;

		if ((specificationBasicUnit != null) &&
				(specificationBasicUnit.length() == 0)) {
			vrConfigTechSpecCacheModel.specificationBasicUnit = null;
		}

		vrConfigTechSpecCacheModel.specificationStandard = getSpecificationStandard();

		String specificationStandard = vrConfigTechSpecCacheModel.specificationStandard;

		if ((specificationStandard != null) &&
				(specificationStandard.length() == 0)) {
			vrConfigTechSpecCacheModel.specificationStandard = null;
		}

		vrConfigTechSpecCacheModel.specificationEntryType = getSpecificationEntryType();

		String specificationEntryType = vrConfigTechSpecCacheModel.specificationEntryType;

		if ((specificationEntryType != null) &&
				(specificationEntryType.length() == 0)) {
			vrConfigTechSpecCacheModel.specificationEntryType = null;
		}

		vrConfigTechSpecCacheModel.specificationEntryPlaceholder = getSpecificationEntryPlaceholder();

		String specificationEntryPlaceholder = vrConfigTechSpecCacheModel.specificationEntryPlaceholder;

		if ((specificationEntryPlaceholder != null) &&
				(specificationEntryPlaceholder.length() == 0)) {
			vrConfigTechSpecCacheModel.specificationEntryPlaceholder = null;
		}

		vrConfigTechSpecCacheModel.specificationMandatory = getSpecificationMandatory();

		vrConfigTechSpecCacheModel.module = getModule();

		String module = vrConfigTechSpecCacheModel.module;

		if ((module != null) && (module.length() == 0)) {
			vrConfigTechSpecCacheModel.module = null;
		}

		Date synchDate = getSynchDate();

		if (synchDate != null) {
			vrConfigTechSpecCacheModel.synchDate = synchDate.getTime();
		}
		else {
			vrConfigTechSpecCacheModel.synchDate = Long.MIN_VALUE;
		}

		return vrConfigTechSpecCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(37);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", vehicleClass=");
		sb.append(getVehicleClass());
		sb.append(", vehicleType=");
		sb.append(getVehicleType());
		sb.append(", vehicletypeName=");
		sb.append(getVehicletypeName());
		sb.append(", sequenceNo=");
		sb.append(getSequenceNo());
		sb.append(", specificationName=");
		sb.append(getSpecificationName());
		sb.append(", specificationCode=");
		sb.append(getSpecificationCode());
		sb.append(", specificationDisplayName=");
		sb.append(getSpecificationDisplayName());
		sb.append(", specCategory=");
		sb.append(getSpecCategory());
		sb.append(", specificationGroup=");
		sb.append(getSpecificationGroup());
		sb.append(", specificationDataCollectionId=");
		sb.append(getSpecificationDataCollectionId());
		sb.append(", specificationBasicUnit=");
		sb.append(getSpecificationBasicUnit());
		sb.append(", specificationStandard=");
		sb.append(getSpecificationStandard());
		sb.append(", specificationEntryType=");
		sb.append(getSpecificationEntryType());
		sb.append(", specificationEntryPlaceholder=");
		sb.append(getSpecificationEntryPlaceholder());
		sb.append(", specificationMandatory=");
		sb.append(getSpecificationMandatory());
		sb.append(", module=");
		sb.append(getModule());
		sb.append(", synchDate=");
		sb.append(getSynchDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(58);

		sb.append("<model><model-name>");
		sb.append("com.fds.vr.business.model.VRConfigTechSpec");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleClass</column-name><column-value><![CDATA[");
		sb.append(getVehicleClass());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleType</column-name><column-value><![CDATA[");
		sb.append(getVehicleType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicletypeName</column-name><column-value><![CDATA[");
		sb.append(getVehicletypeName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sequenceNo</column-name><column-value><![CDATA[");
		sb.append(getSequenceNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>specificationName</column-name><column-value><![CDATA[");
		sb.append(getSpecificationName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>specificationCode</column-name><column-value><![CDATA[");
		sb.append(getSpecificationCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>specificationDisplayName</column-name><column-value><![CDATA[");
		sb.append(getSpecificationDisplayName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>specCategory</column-name><column-value><![CDATA[");
		sb.append(getSpecCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>specificationGroup</column-name><column-value><![CDATA[");
		sb.append(getSpecificationGroup());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>specificationDataCollectionId</column-name><column-value><![CDATA[");
		sb.append(getSpecificationDataCollectionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>specificationBasicUnit</column-name><column-value><![CDATA[");
		sb.append(getSpecificationBasicUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>specificationStandard</column-name><column-value><![CDATA[");
		sb.append(getSpecificationStandard());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>specificationEntryType</column-name><column-value><![CDATA[");
		sb.append(getSpecificationEntryType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>specificationEntryPlaceholder</column-name><column-value><![CDATA[");
		sb.append(getSpecificationEntryPlaceholder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>specificationMandatory</column-name><column-value><![CDATA[");
		sb.append(getSpecificationMandatory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>module</column-name><column-value><![CDATA[");
		sb.append(getModule());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>synchDate</column-name><column-value><![CDATA[");
		sb.append(getSynchDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VRConfigTechSpec.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VRConfigTechSpec.class
		};
	private long _id;
	private String _vehicleClass;
	private String _originalVehicleClass;
	private String _vehicleType;
	private String _originalVehicleType;
	private String _vehicletypeName;
	private int _sequenceNo;
	private String _specificationName;
	private String _specificationCode;
	private String _specificationDisplayName;
	private String _specCategory;
	private String _originalSpecCategory;
	private int _specificationGroup;
	private String _specificationDataCollectionId;
	private String _specificationBasicUnit;
	private String _specificationStandard;
	private String _specificationEntryType;
	private String _specificationEntryPlaceholder;
	private int _specificationMandatory;
	private String _module;
	private String _originalModule;
	private Date _synchDate;
	private long _columnBitmask;
	private VRConfigTechSpec _escapedModel;
}