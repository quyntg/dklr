/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.business.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.business.model.VRTemplateNo;
import com.fds.vr.business.model.VRTemplateNoModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VRTemplateNo service. Represents a row in the &quot;vr_templateno&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VRTemplateNoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VRTemplateNoImpl}.
 * </p>
 *
 * @author LamTV
 * @see VRTemplateNoImpl
 * @see VRTemplateNo
 * @see VRTemplateNoModel
 * @generated
 */
@ProviderType
public class VRTemplateNoModelImpl extends BaseModelImpl<VRTemplateNo>
	implements VRTemplateNoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vr template no model instance should use the {@link VRTemplateNo} interface instead.
	 */
	public static final String TABLE_NAME = "vr_templateno";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "patternNo", Types.VARCHAR },
			{ "year", Types.INTEGER },
			{ "initNumber", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("patternNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("year", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("initNumber", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table vr_templateno (id LONG not null primary key,patternNo VARCHAR(75) null,year INTEGER,initNumber INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table vr_templateno";
	public static final String ORDER_BY_JPQL = " ORDER BY vrTemplateNo.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_templateno.id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fds.vr.business.model.VRTemplateNo"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fds.vr.business.model.VRTemplateNo"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fds.vr.business.model.VRTemplateNo"),
			true);
	public static final long PATTERNNO_COLUMN_BITMASK = 1L;
	public static final long YEAR_COLUMN_BITMASK = 2L;
	public static final long ID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.fds.vr.service.util.ServiceProps.get(
				"lock.expiration.time.com.fds.vr.business.model.VRTemplateNo"));

	public VRTemplateNoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VRTemplateNo.class;
	}

	@Override
	public String getModelClassName() {
		return VRTemplateNo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("patternNo", getPatternNo());
		attributes.put("year", getYear());
		attributes.put("initNumber", getInitNumber());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String patternNo = (String)attributes.get("patternNo");

		if (patternNo != null) {
			setPatternNo(patternNo);
		}

		Integer year = (Integer)attributes.get("year");

		if (year != null) {
			setYear(year);
		}

		Integer initNumber = (Integer)attributes.get("initNumber");

		if (initNumber != null) {
			setInitNumber(initNumber);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public String getPatternNo() {
		if (_patternNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _patternNo;
		}
	}

	@Override
	public void setPatternNo(String patternNo) {
		_columnBitmask |= PATTERNNO_COLUMN_BITMASK;

		if (_originalPatternNo == null) {
			_originalPatternNo = _patternNo;
		}

		_patternNo = patternNo;
	}

	public String getOriginalPatternNo() {
		return GetterUtil.getString(_originalPatternNo);
	}

	@Override
	public int getYear() {
		return _year;
	}

	@Override
	public void setYear(int year) {
		_columnBitmask |= YEAR_COLUMN_BITMASK;

		if (!_setOriginalYear) {
			_setOriginalYear = true;

			_originalYear = _year;
		}

		_year = year;
	}

	public int getOriginalYear() {
		return _originalYear;
	}

	@Override
	public int getInitNumber() {
		return _initNumber;
	}

	@Override
	public void setInitNumber(int initNumber) {
		_initNumber = initNumber;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VRTemplateNo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VRTemplateNo toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VRTemplateNo)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VRTemplateNoImpl vrTemplateNoImpl = new VRTemplateNoImpl();

		vrTemplateNoImpl.setId(getId());
		vrTemplateNoImpl.setPatternNo(getPatternNo());
		vrTemplateNoImpl.setYear(getYear());
		vrTemplateNoImpl.setInitNumber(getInitNumber());

		vrTemplateNoImpl.resetOriginalValues();

		return vrTemplateNoImpl;
	}

	@Override
	public int compareTo(VRTemplateNo vrTemplateNo) {
		long primaryKey = vrTemplateNo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VRTemplateNo)) {
			return false;
		}

		VRTemplateNo vrTemplateNo = (VRTemplateNo)obj;

		long primaryKey = vrTemplateNo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VRTemplateNoModelImpl vrTemplateNoModelImpl = this;

		vrTemplateNoModelImpl._originalPatternNo = vrTemplateNoModelImpl._patternNo;

		vrTemplateNoModelImpl._originalYear = vrTemplateNoModelImpl._year;

		vrTemplateNoModelImpl._setOriginalYear = false;

		vrTemplateNoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VRTemplateNo> toCacheModel() {
		VRTemplateNoCacheModel vrTemplateNoCacheModel = new VRTemplateNoCacheModel();

		vrTemplateNoCacheModel.id = getId();

		vrTemplateNoCacheModel.patternNo = getPatternNo();

		String patternNo = vrTemplateNoCacheModel.patternNo;

		if ((patternNo != null) && (patternNo.length() == 0)) {
			vrTemplateNoCacheModel.patternNo = null;
		}

		vrTemplateNoCacheModel.year = getYear();

		vrTemplateNoCacheModel.initNumber = getInitNumber();

		return vrTemplateNoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", patternNo=");
		sb.append(getPatternNo());
		sb.append(", year=");
		sb.append(getYear());
		sb.append(", initNumber=");
		sb.append(getInitNumber());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.fds.vr.business.model.VRTemplateNo");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>patternNo</column-name><column-value><![CDATA[");
		sb.append(getPatternNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>year</column-name><column-value><![CDATA[");
		sb.append(getYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>initNumber</column-name><column-value><![CDATA[");
		sb.append(getInitNumber());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VRTemplateNo.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VRTemplateNo.class
		};
	private long _id;
	private String _patternNo;
	private String _originalPatternNo;
	private int _year;
	private int _originalYear;
	private boolean _setOriginalYear;
	private int _initNumber;
	private long _columnBitmask;
	private VRTemplateNo _escapedModel;
}