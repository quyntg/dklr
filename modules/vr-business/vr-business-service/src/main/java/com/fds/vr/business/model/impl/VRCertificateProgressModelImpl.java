/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.business.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.business.model.VRCertificateProgress;
import com.fds.vr.business.model.VRCertificateProgressModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VRCertificateProgress service. Represents a row in the &quot;vr_certificate_progress&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VRCertificateProgressModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VRCertificateProgressImpl}.
 * </p>
 *
 * @author LamTV
 * @see VRCertificateProgressImpl
 * @see VRCertificateProgress
 * @see VRCertificateProgressModel
 * @generated
 */
@ProviderType
public class VRCertificateProgressModelImpl extends BaseModelImpl<VRCertificateProgress>
	implements VRCertificateProgressModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vr certificate progress model instance should use the {@link VRCertificateProgress} interface instead.
	 */
	public static final String TABLE_NAME = "vr_certificate_progress";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "vehicleCertificateId", Types.BIGINT },
			{ "corporationId", Types.VARCHAR },
			{ "inspectorId", Types.BIGINT },
			{ "actionCode", Types.VARCHAR },
			{ "progressTime", Types.TIMESTAMP },
			{ "syncDate", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("vehicleCertificateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("corporationId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectorId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("actionCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("progressTime", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("syncDate", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table vr_certificate_progress (id LONG not null primary key,vehicleCertificateId LONG,corporationId VARCHAR(75) null,inspectorId LONG,actionCode VARCHAR(75) null,progressTime DATE null,syncDate VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table vr_certificate_progress";
	public static final String ORDER_BY_JPQL = " ORDER BY vrCertificateProgress.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_certificate_progress.id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fds.vr.business.model.VRCertificateProgress"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fds.vr.business.model.VRCertificateProgress"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.fds.vr.service.util.ServiceProps.get(
				"lock.expiration.time.com.fds.vr.business.model.VRCertificateProgress"));

	public VRCertificateProgressModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VRCertificateProgress.class;
	}

	@Override
	public String getModelClassName() {
		return VRCertificateProgress.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("vehicleCertificateId", getVehicleCertificateId());
		attributes.put("corporationId", getCorporationId());
		attributes.put("inspectorId", getInspectorId());
		attributes.put("actionCode", getActionCode());
		attributes.put("progressTime", getProgressTime());
		attributes.put("remarks", getRemarks());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long vehicleCertificateId = (Long)attributes.get("vehicleCertificateId");

		if (vehicleCertificateId != null) {
			setVehicleCertificateId(vehicleCertificateId);
		}

		String corporationId = (String)attributes.get("corporationId");

		if (corporationId != null) {
			setCorporationId(corporationId);
		}

		Long inspectorId = (Long)attributes.get("inspectorId");

		if (inspectorId != null) {
			setInspectorId(inspectorId);
		}

		String actionCode = (String)attributes.get("actionCode");

		if (actionCode != null) {
			setActionCode(actionCode);
		}

		Date progressTime = (Date)attributes.get("progressTime");

		if (progressTime != null) {
			setProgressTime(progressTime);
		}

		String remarks = (String)attributes.get("remarks");

		if (remarks != null) {
			setRemarks(remarks);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getVehicleCertificateId() {
		return _vehicleCertificateId;
	}

	@Override
	public void setVehicleCertificateId(long vehicleCertificateId) {
		_vehicleCertificateId = vehicleCertificateId;
	}

	@Override
	public String getCorporationId() {
		if (_corporationId == null) {
			return StringPool.BLANK;
		}
		else {
			return _corporationId;
		}
	}

	@Override
	public void setCorporationId(String corporationId) {
		_corporationId = corporationId;
	}

	@Override
	public long getInspectorId() {
		return _inspectorId;
	}

	@Override
	public void setInspectorId(long inspectorId) {
		_inspectorId = inspectorId;
	}

	@Override
	public String getActionCode() {
		if (_actionCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _actionCode;
		}
	}

	@Override
	public void setActionCode(String actionCode) {
		_actionCode = actionCode;
	}

	@Override
	public Date getProgressTime() {
		return _progressTime;
	}

	@Override
	public void setProgressTime(Date progressTime) {
		_progressTime = progressTime;
	}

	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		_remarks = remarks;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VRCertificateProgress.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VRCertificateProgress toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VRCertificateProgress)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VRCertificateProgressImpl vrCertificateProgressImpl = new VRCertificateProgressImpl();

		vrCertificateProgressImpl.setId(getId());
		vrCertificateProgressImpl.setVehicleCertificateId(getVehicleCertificateId());
		vrCertificateProgressImpl.setCorporationId(getCorporationId());
		vrCertificateProgressImpl.setInspectorId(getInspectorId());
		vrCertificateProgressImpl.setActionCode(getActionCode());
		vrCertificateProgressImpl.setProgressTime(getProgressTime());
		vrCertificateProgressImpl.setRemarks(getRemarks());

		vrCertificateProgressImpl.resetOriginalValues();

		return vrCertificateProgressImpl;
	}

	@Override
	public int compareTo(VRCertificateProgress vrCertificateProgress) {
		long primaryKey = vrCertificateProgress.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VRCertificateProgress)) {
			return false;
		}

		VRCertificateProgress vrCertificateProgress = (VRCertificateProgress)obj;

		long primaryKey = vrCertificateProgress.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<VRCertificateProgress> toCacheModel() {
		VRCertificateProgressCacheModel vrCertificateProgressCacheModel = new VRCertificateProgressCacheModel();

		vrCertificateProgressCacheModel.id = getId();

		vrCertificateProgressCacheModel.vehicleCertificateId = getVehicleCertificateId();

		vrCertificateProgressCacheModel.corporationId = getCorporationId();

		String corporationId = vrCertificateProgressCacheModel.corporationId;

		if ((corporationId != null) && (corporationId.length() == 0)) {
			vrCertificateProgressCacheModel.corporationId = null;
		}

		vrCertificateProgressCacheModel.inspectorId = getInspectorId();

		vrCertificateProgressCacheModel.actionCode = getActionCode();

		String actionCode = vrCertificateProgressCacheModel.actionCode;

		if ((actionCode != null) && (actionCode.length() == 0)) {
			vrCertificateProgressCacheModel.actionCode = null;
		}

		Date progressTime = getProgressTime();

		if (progressTime != null) {
			vrCertificateProgressCacheModel.progressTime = progressTime.getTime();
		}
		else {
			vrCertificateProgressCacheModel.progressTime = Long.MIN_VALUE;
		}

		vrCertificateProgressCacheModel.remarks = getRemarks();

		String remarks = vrCertificateProgressCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			vrCertificateProgressCacheModel.remarks = null;
		}

		return vrCertificateProgressCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", vehicleCertificateId=");
		sb.append(getVehicleCertificateId());
		sb.append(", corporationId=");
		sb.append(getCorporationId());
		sb.append(", inspectorId=");
		sb.append(getInspectorId());
		sb.append(", actionCode=");
		sb.append(getActionCode());
		sb.append(", progressTime=");
		sb.append(getProgressTime());
		sb.append(", remarks=");
		sb.append(getRemarks());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.fds.vr.business.model.VRCertificateProgress");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleCertificateId</column-name><column-value><![CDATA[");
		sb.append(getVehicleCertificateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>corporationId</column-name><column-value><![CDATA[");
		sb.append(getCorporationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorId</column-name><column-value><![CDATA[");
		sb.append(getInspectorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actionCode</column-name><column-value><![CDATA[");
		sb.append(getActionCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>progressTime</column-name><column-value><![CDATA[");
		sb.append(getProgressTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remarks</column-name><column-value><![CDATA[");
		sb.append(getRemarks());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VRCertificateProgress.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VRCertificateProgress.class
		};
	private long _id;
	private long _vehicleCertificateId;
	private String _corporationId;
	private long _inspectorId;
	private String _actionCode;
	private Date _progressTime;
	private String _remarks;
	private VRCertificateProgress _escapedModel;
}