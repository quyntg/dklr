/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.business.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.business.model.VRVehicleRecord;
import com.fds.vr.business.model.VRVehicleRecordModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VRVehicleRecord service. Represents a row in the &quot;vr_vehiclerecord&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VRVehicleRecordModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VRVehicleRecordImpl}.
 * </p>
 *
 * @author LamTV
 * @see VRVehicleRecordImpl
 * @see VRVehicleRecord
 * @see VRVehicleRecordModel
 * @generated
 */
@ProviderType
public class VRVehicleRecordModelImpl extends BaseModelImpl<VRVehicleRecord>
	implements VRVehicleRecordModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vr vehicle record model instance should use the {@link VRVehicleRecord} interface instead.
	 */
	public static final String TABLE_NAME = "vr_vehiclerecord";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "mtCore", Types.BIGINT },
			{ "issueId", Types.BIGINT },
			{ "issueVehicleCertificateId", Types.BIGINT },
			{ "dossierId", Types.BIGINT },
			{ "applicantProfileId", Types.BIGINT },
			{ "applicantName", Types.VARCHAR },
			{ "applicantAddress", Types.VARCHAR },
			{ "certificateId", Types.BIGINT },
			{ "productionNumber", Types.VARCHAR },
			{ "productionDate", Types.TIMESTAMP },
			{ "frameNo", Types.VARCHAR },
			{ "boxNo", Types.VARCHAR },
			{ "engineNo", Types.VARCHAR },
			{ "color", Types.VARCHAR },
			{ "stampShortNo", Types.VARCHAR },
			{ "serialNo", Types.VARCHAR },
			{ "vehicleRecordStatus", Types.BIGINT },
			{ "printingStatus", Types.BIGINT },
			{ "attachedFile", Types.BIGINT },
			{ "signName", Types.VARCHAR },
			{ "signTitle", Types.VARCHAR },
			{ "signPlace", Types.VARCHAR },
			{ "signDate", Types.TIMESTAMP },
			{ "modifyDate", Types.TIMESTAMP },
			{ "syncDate", Types.TIMESTAMP },
			{ "certificateRecordDate", Types.TIMESTAMP },
			{ "issueInspectionRecordId", Types.BIGINT },
			{ "certificaterecordno", Types.VARCHAR },
			{ "postPrintingStatus", Types.INTEGER },
			{ "qrCode", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mtCore", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("issueId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("issueVehicleCertificateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dossierId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("applicantProfileId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("applicantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certificateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("productionNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("frameNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("boxNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("engineNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("color", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stampShortNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("serialNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("vehicleRecordStatus", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("printingStatus", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("attachedFile", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("signName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("signTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("signPlace", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("signDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifyDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("syncDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("certificateRecordDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("issueInspectionRecordId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("certificaterecordno", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("postPrintingStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("qrCode", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table vr_vehiclerecord (id LONG not null primary key,mtCore LONG,issueId LONG,issueVehicleCertificateId LONG,dossierId LONG,applicantProfileId LONG,applicantName VARCHAR(75) null,applicantAddress VARCHAR(75) null,certificateId LONG,productionNumber VARCHAR(75) null,productionDate DATE null,frameNo VARCHAR(75) null,boxNo VARCHAR(75) null,engineNo VARCHAR(75) null,color VARCHAR(75) null,stampShortNo VARCHAR(75) null,serialNo VARCHAR(75) null,vehicleRecordStatus LONG,printingStatus LONG,attachedFile LONG,signName VARCHAR(75) null,signTitle VARCHAR(75) null,signPlace VARCHAR(75) null,signDate DATE null,modifyDate DATE null,syncDate DATE null,certificateRecordDate DATE null,issueInspectionRecordId LONG,certificaterecordno VARCHAR(75) null,postPrintingStatus INTEGER,qrCode VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table vr_vehiclerecord";
	public static final String ORDER_BY_JPQL = " ORDER BY vrVehicleRecord.modifyDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_vehiclerecord.modifyDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fds.vr.business.model.VRVehicleRecord"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fds.vr.business.model.VRVehicleRecord"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fds.vr.business.model.VRVehicleRecord"),
			true);
	public static final long APPLICANTPROFILEID_COLUMN_BITMASK = 1L;
	public static final long CERTIFICATEID_COLUMN_BITMASK = 2L;
	public static final long DOSSIERID_COLUMN_BITMASK = 4L;
	public static final long FRAMENO_COLUMN_BITMASK = 8L;
	public static final long ISSUEID_COLUMN_BITMASK = 16L;
	public static final long ISSUEVEHICLECERTIFICATEID_COLUMN_BITMASK = 32L;
	public static final long MTCORE_COLUMN_BITMASK = 64L;
	public static final long PRINTINGSTATUS_COLUMN_BITMASK = 128L;
	public static final long VEHICLERECORDSTATUS_COLUMN_BITMASK = 256L;
	public static final long MODIFYDATE_COLUMN_BITMASK = 512L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.fds.vr.service.util.ServiceProps.get(
				"lock.expiration.time.com.fds.vr.business.model.VRVehicleRecord"));

	public VRVehicleRecordModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VRVehicleRecord.class;
	}

	@Override
	public String getModelClassName() {
		return VRVehicleRecord.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("mtCore", getMtCore());
		attributes.put("issueId", getIssueId());
		attributes.put("issueVehicleCertificateId",
			getIssueVehicleCertificateId());
		attributes.put("dossierId", getDossierId());
		attributes.put("applicantProfileId", getApplicantProfileId());
		attributes.put("applicantName", getApplicantName());
		attributes.put("applicantAddress", getApplicantAddress());
		attributes.put("certificateId", getCertificateId());
		attributes.put("productionNumber", getProductionNumber());
		attributes.put("productionDate", getProductionDate());
		attributes.put("frameNo", getFrameNo());
		attributes.put("boxNo", getBoxNo());
		attributes.put("engineNo", getEngineNo());
		attributes.put("color", getColor());
		attributes.put("stampShortNo", getStampShortNo());
		attributes.put("serialNo", getSerialNo());
		attributes.put("vehicleRecordStatus", getVehicleRecordStatus());
		attributes.put("printingStatus", getPrintingStatus());
		attributes.put("attachedFile", getAttachedFile());
		attributes.put("signName", getSignName());
		attributes.put("signTitle", getSignTitle());
		attributes.put("signPlace", getSignPlace());
		attributes.put("signDate", getSignDate());
		attributes.put("modifyDate", getModifyDate());
		attributes.put("syncDate", getSyncDate());
		attributes.put("certificateRecordDate", getCertificateRecordDate());
		attributes.put("issueInspectionRecordId", getIssueInspectionRecordId());
		attributes.put("certificaterecordno", getCertificaterecordno());
		attributes.put("postPrintingStatus", getPostPrintingStatus());
		attributes.put("qrCode", getQrCode());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long mtCore = (Long)attributes.get("mtCore");

		if (mtCore != null) {
			setMtCore(mtCore);
		}

		Long issueId = (Long)attributes.get("issueId");

		if (issueId != null) {
			setIssueId(issueId);
		}

		Long issueVehicleCertificateId = (Long)attributes.get(
				"issueVehicleCertificateId");

		if (issueVehicleCertificateId != null) {
			setIssueVehicleCertificateId(issueVehicleCertificateId);
		}

		Long dossierId = (Long)attributes.get("dossierId");

		if (dossierId != null) {
			setDossierId(dossierId);
		}

		Long applicantProfileId = (Long)attributes.get("applicantProfileId");

		if (applicantProfileId != null) {
			setApplicantProfileId(applicantProfileId);
		}

		String applicantName = (String)attributes.get("applicantName");

		if (applicantName != null) {
			setApplicantName(applicantName);
		}

		String applicantAddress = (String)attributes.get("applicantAddress");

		if (applicantAddress != null) {
			setApplicantAddress(applicantAddress);
		}

		Long certificateId = (Long)attributes.get("certificateId");

		if (certificateId != null) {
			setCertificateId(certificateId);
		}

		String productionNumber = (String)attributes.get("productionNumber");

		if (productionNumber != null) {
			setProductionNumber(productionNumber);
		}

		Date productionDate = (Date)attributes.get("productionDate");

		if (productionDate != null) {
			setProductionDate(productionDate);
		}

		String frameNo = (String)attributes.get("frameNo");

		if (frameNo != null) {
			setFrameNo(frameNo);
		}

		String boxNo = (String)attributes.get("boxNo");

		if (boxNo != null) {
			setBoxNo(boxNo);
		}

		String engineNo = (String)attributes.get("engineNo");

		if (engineNo != null) {
			setEngineNo(engineNo);
		}

		String color = (String)attributes.get("color");

		if (color != null) {
			setColor(color);
		}

		String stampShortNo = (String)attributes.get("stampShortNo");

		if (stampShortNo != null) {
			setStampShortNo(stampShortNo);
		}

		String serialNo = (String)attributes.get("serialNo");

		if (serialNo != null) {
			setSerialNo(serialNo);
		}

		Long vehicleRecordStatus = (Long)attributes.get("vehicleRecordStatus");

		if (vehicleRecordStatus != null) {
			setVehicleRecordStatus(vehicleRecordStatus);
		}

		Long printingStatus = (Long)attributes.get("printingStatus");

		if (printingStatus != null) {
			setPrintingStatus(printingStatus);
		}

		Long attachedFile = (Long)attributes.get("attachedFile");

		if (attachedFile != null) {
			setAttachedFile(attachedFile);
		}

		String signName = (String)attributes.get("signName");

		if (signName != null) {
			setSignName(signName);
		}

		String signTitle = (String)attributes.get("signTitle");

		if (signTitle != null) {
			setSignTitle(signTitle);
		}

		String signPlace = (String)attributes.get("signPlace");

		if (signPlace != null) {
			setSignPlace(signPlace);
		}

		Date signDate = (Date)attributes.get("signDate");

		if (signDate != null) {
			setSignDate(signDate);
		}

		Date modifyDate = (Date)attributes.get("modifyDate");

		if (modifyDate != null) {
			setModifyDate(modifyDate);
		}

		Date syncDate = (Date)attributes.get("syncDate");

		if (syncDate != null) {
			setSyncDate(syncDate);
		}

		Date certificateRecordDate = (Date)attributes.get(
				"certificateRecordDate");

		if (certificateRecordDate != null) {
			setCertificateRecordDate(certificateRecordDate);
		}

		Long issueInspectionRecordId = (Long)attributes.get(
				"issueInspectionRecordId");

		if (issueInspectionRecordId != null) {
			setIssueInspectionRecordId(issueInspectionRecordId);
		}

		String certificaterecordno = (String)attributes.get(
				"certificaterecordno");

		if (certificaterecordno != null) {
			setCertificaterecordno(certificaterecordno);
		}

		Integer postPrintingStatus = (Integer)attributes.get(
				"postPrintingStatus");

		if (postPrintingStatus != null) {
			setPostPrintingStatus(postPrintingStatus);
		}

		String qrCode = (String)attributes.get("qrCode");

		if (qrCode != null) {
			setQrCode(qrCode);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getMtCore() {
		return _mtCore;
	}

	@Override
	public void setMtCore(long mtCore) {
		_columnBitmask |= MTCORE_COLUMN_BITMASK;

		if (!_setOriginalMtCore) {
			_setOriginalMtCore = true;

			_originalMtCore = _mtCore;
		}

		_mtCore = mtCore;
	}

	public long getOriginalMtCore() {
		return _originalMtCore;
	}

	@Override
	public long getIssueId() {
		return _issueId;
	}

	@Override
	public void setIssueId(long issueId) {
		_columnBitmask |= ISSUEID_COLUMN_BITMASK;

		if (!_setOriginalIssueId) {
			_setOriginalIssueId = true;

			_originalIssueId = _issueId;
		}

		_issueId = issueId;
	}

	public long getOriginalIssueId() {
		return _originalIssueId;
	}

	@Override
	public long getIssueVehicleCertificateId() {
		return _issueVehicleCertificateId;
	}

	@Override
	public void setIssueVehicleCertificateId(long issueVehicleCertificateId) {
		_columnBitmask |= ISSUEVEHICLECERTIFICATEID_COLUMN_BITMASK;

		if (!_setOriginalIssueVehicleCertificateId) {
			_setOriginalIssueVehicleCertificateId = true;

			_originalIssueVehicleCertificateId = _issueVehicleCertificateId;
		}

		_issueVehicleCertificateId = issueVehicleCertificateId;
	}

	public long getOriginalIssueVehicleCertificateId() {
		return _originalIssueVehicleCertificateId;
	}

	@Override
	public long getDossierId() {
		return _dossierId;
	}

	@Override
	public void setDossierId(long dossierId) {
		_columnBitmask |= DOSSIERID_COLUMN_BITMASK;

		if (!_setOriginalDossierId) {
			_setOriginalDossierId = true;

			_originalDossierId = _dossierId;
		}

		_dossierId = dossierId;
	}

	public long getOriginalDossierId() {
		return _originalDossierId;
	}

	@Override
	public long getApplicantProfileId() {
		return _applicantProfileId;
	}

	@Override
	public void setApplicantProfileId(long applicantProfileId) {
		_columnBitmask |= APPLICANTPROFILEID_COLUMN_BITMASK;

		if (!_setOriginalApplicantProfileId) {
			_setOriginalApplicantProfileId = true;

			_originalApplicantProfileId = _applicantProfileId;
		}

		_applicantProfileId = applicantProfileId;
	}

	public long getOriginalApplicantProfileId() {
		return _originalApplicantProfileId;
	}

	@Override
	public String getApplicantName() {
		if (_applicantName == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantName;
		}
	}

	@Override
	public void setApplicantName(String applicantName) {
		_applicantName = applicantName;
	}

	@Override
	public String getApplicantAddress() {
		if (_applicantAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantAddress;
		}
	}

	@Override
	public void setApplicantAddress(String applicantAddress) {
		_applicantAddress = applicantAddress;
	}

	@Override
	public long getCertificateId() {
		return _certificateId;
	}

	@Override
	public void setCertificateId(long certificateId) {
		_columnBitmask |= CERTIFICATEID_COLUMN_BITMASK;

		if (!_setOriginalCertificateId) {
			_setOriginalCertificateId = true;

			_originalCertificateId = _certificateId;
		}

		_certificateId = certificateId;
	}

	public long getOriginalCertificateId() {
		return _originalCertificateId;
	}

	@Override
	public String getProductionNumber() {
		if (_productionNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionNumber;
		}
	}

	@Override
	public void setProductionNumber(String productionNumber) {
		_productionNumber = productionNumber;
	}

	@Override
	public Date getProductionDate() {
		return _productionDate;
	}

	@Override
	public void setProductionDate(Date productionDate) {
		_productionDate = productionDate;
	}

	@Override
	public String getFrameNo() {
		if (_frameNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _frameNo;
		}
	}

	@Override
	public void setFrameNo(String frameNo) {
		_columnBitmask |= FRAMENO_COLUMN_BITMASK;

		if (_originalFrameNo == null) {
			_originalFrameNo = _frameNo;
		}

		_frameNo = frameNo;
	}

	public String getOriginalFrameNo() {
		return GetterUtil.getString(_originalFrameNo);
	}

	@Override
	public String getBoxNo() {
		if (_boxNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _boxNo;
		}
	}

	@Override
	public void setBoxNo(String boxNo) {
		_boxNo = boxNo;
	}

	@Override
	public String getEngineNo() {
		if (_engineNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _engineNo;
		}
	}

	@Override
	public void setEngineNo(String engineNo) {
		_engineNo = engineNo;
	}

	@Override
	public String getColor() {
		if (_color == null) {
			return StringPool.BLANK;
		}
		else {
			return _color;
		}
	}

	@Override
	public void setColor(String color) {
		_color = color;
	}

	@Override
	public String getStampShortNo() {
		if (_stampShortNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _stampShortNo;
		}
	}

	@Override
	public void setStampShortNo(String stampShortNo) {
		_stampShortNo = stampShortNo;
	}

	@Override
	public String getSerialNo() {
		if (_serialNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _serialNo;
		}
	}

	@Override
	public void setSerialNo(String serialNo) {
		_serialNo = serialNo;
	}

	@Override
	public long getVehicleRecordStatus() {
		return _vehicleRecordStatus;
	}

	@Override
	public void setVehicleRecordStatus(long vehicleRecordStatus) {
		_columnBitmask |= VEHICLERECORDSTATUS_COLUMN_BITMASK;

		if (!_setOriginalVehicleRecordStatus) {
			_setOriginalVehicleRecordStatus = true;

			_originalVehicleRecordStatus = _vehicleRecordStatus;
		}

		_vehicleRecordStatus = vehicleRecordStatus;
	}

	public long getOriginalVehicleRecordStatus() {
		return _originalVehicleRecordStatus;
	}

	@Override
	public long getPrintingStatus() {
		return _printingStatus;
	}

	@Override
	public void setPrintingStatus(long printingStatus) {
		_columnBitmask |= PRINTINGSTATUS_COLUMN_BITMASK;

		if (!_setOriginalPrintingStatus) {
			_setOriginalPrintingStatus = true;

			_originalPrintingStatus = _printingStatus;
		}

		_printingStatus = printingStatus;
	}

	public long getOriginalPrintingStatus() {
		return _originalPrintingStatus;
	}

	@Override
	public long getAttachedFile() {
		return _attachedFile;
	}

	@Override
	public void setAttachedFile(long attachedFile) {
		_attachedFile = attachedFile;
	}

	@Override
	public String getSignName() {
		if (_signName == null) {
			return StringPool.BLANK;
		}
		else {
			return _signName;
		}
	}

	@Override
	public void setSignName(String signName) {
		_signName = signName;
	}

	@Override
	public String getSignTitle() {
		if (_signTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _signTitle;
		}
	}

	@Override
	public void setSignTitle(String signTitle) {
		_signTitle = signTitle;
	}

	@Override
	public String getSignPlace() {
		if (_signPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _signPlace;
		}
	}

	@Override
	public void setSignPlace(String signPlace) {
		_signPlace = signPlace;
	}

	@Override
	public Date getSignDate() {
		return _signDate;
	}

	@Override
	public void setSignDate(Date signDate) {
		_signDate = signDate;
	}

	@Override
	public Date getModifyDate() {
		return _modifyDate;
	}

	@Override
	public void setModifyDate(Date modifyDate) {
		_columnBitmask = -1L;

		_modifyDate = modifyDate;
	}

	@Override
	public Date getSyncDate() {
		return _syncDate;
	}

	@Override
	public void setSyncDate(Date syncDate) {
		_syncDate = syncDate;
	}

	@Override
	public Date getCertificateRecordDate() {
		return _certificateRecordDate;
	}

	@Override
	public void setCertificateRecordDate(Date certificateRecordDate) {
		_certificateRecordDate = certificateRecordDate;
	}

	@Override
	public long getIssueInspectionRecordId() {
		return _issueInspectionRecordId;
	}

	@Override
	public void setIssueInspectionRecordId(long issueInspectionRecordId) {
		_issueInspectionRecordId = issueInspectionRecordId;
	}

	@Override
	public String getCertificaterecordno() {
		if (_certificaterecordno == null) {
			return StringPool.BLANK;
		}
		else {
			return _certificaterecordno;
		}
	}

	@Override
	public void setCertificaterecordno(String certificaterecordno) {
		_certificaterecordno = certificaterecordno;
	}

	@Override
	public int getPostPrintingStatus() {
		return _postPrintingStatus;
	}

	@Override
	public void setPostPrintingStatus(int postPrintingStatus) {
		_postPrintingStatus = postPrintingStatus;
	}

	@Override
	public String getQrCode() {
		if (_qrCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _qrCode;
		}
	}

	@Override
	public void setQrCode(String qrCode) {
		_qrCode = qrCode;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VRVehicleRecord.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VRVehicleRecord toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VRVehicleRecord)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VRVehicleRecordImpl vrVehicleRecordImpl = new VRVehicleRecordImpl();

		vrVehicleRecordImpl.setId(getId());
		vrVehicleRecordImpl.setMtCore(getMtCore());
		vrVehicleRecordImpl.setIssueId(getIssueId());
		vrVehicleRecordImpl.setIssueVehicleCertificateId(getIssueVehicleCertificateId());
		vrVehicleRecordImpl.setDossierId(getDossierId());
		vrVehicleRecordImpl.setApplicantProfileId(getApplicantProfileId());
		vrVehicleRecordImpl.setApplicantName(getApplicantName());
		vrVehicleRecordImpl.setApplicantAddress(getApplicantAddress());
		vrVehicleRecordImpl.setCertificateId(getCertificateId());
		vrVehicleRecordImpl.setProductionNumber(getProductionNumber());
		vrVehicleRecordImpl.setProductionDate(getProductionDate());
		vrVehicleRecordImpl.setFrameNo(getFrameNo());
		vrVehicleRecordImpl.setBoxNo(getBoxNo());
		vrVehicleRecordImpl.setEngineNo(getEngineNo());
		vrVehicleRecordImpl.setColor(getColor());
		vrVehicleRecordImpl.setStampShortNo(getStampShortNo());
		vrVehicleRecordImpl.setSerialNo(getSerialNo());
		vrVehicleRecordImpl.setVehicleRecordStatus(getVehicleRecordStatus());
		vrVehicleRecordImpl.setPrintingStatus(getPrintingStatus());
		vrVehicleRecordImpl.setAttachedFile(getAttachedFile());
		vrVehicleRecordImpl.setSignName(getSignName());
		vrVehicleRecordImpl.setSignTitle(getSignTitle());
		vrVehicleRecordImpl.setSignPlace(getSignPlace());
		vrVehicleRecordImpl.setSignDate(getSignDate());
		vrVehicleRecordImpl.setModifyDate(getModifyDate());
		vrVehicleRecordImpl.setSyncDate(getSyncDate());
		vrVehicleRecordImpl.setCertificateRecordDate(getCertificateRecordDate());
		vrVehicleRecordImpl.setIssueInspectionRecordId(getIssueInspectionRecordId());
		vrVehicleRecordImpl.setCertificaterecordno(getCertificaterecordno());
		vrVehicleRecordImpl.setPostPrintingStatus(getPostPrintingStatus());
		vrVehicleRecordImpl.setQrCode(getQrCode());

		vrVehicleRecordImpl.resetOriginalValues();

		return vrVehicleRecordImpl;
	}

	@Override
	public int compareTo(VRVehicleRecord vrVehicleRecord) {
		int value = 0;

		value = DateUtil.compareTo(getModifyDate(),
				vrVehicleRecord.getModifyDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VRVehicleRecord)) {
			return false;
		}

		VRVehicleRecord vrVehicleRecord = (VRVehicleRecord)obj;

		long primaryKey = vrVehicleRecord.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VRVehicleRecordModelImpl vrVehicleRecordModelImpl = this;

		vrVehicleRecordModelImpl._originalMtCore = vrVehicleRecordModelImpl._mtCore;

		vrVehicleRecordModelImpl._setOriginalMtCore = false;

		vrVehicleRecordModelImpl._originalIssueId = vrVehicleRecordModelImpl._issueId;

		vrVehicleRecordModelImpl._setOriginalIssueId = false;

		vrVehicleRecordModelImpl._originalIssueVehicleCertificateId = vrVehicleRecordModelImpl._issueVehicleCertificateId;

		vrVehicleRecordModelImpl._setOriginalIssueVehicleCertificateId = false;

		vrVehicleRecordModelImpl._originalDossierId = vrVehicleRecordModelImpl._dossierId;

		vrVehicleRecordModelImpl._setOriginalDossierId = false;

		vrVehicleRecordModelImpl._originalApplicantProfileId = vrVehicleRecordModelImpl._applicantProfileId;

		vrVehicleRecordModelImpl._setOriginalApplicantProfileId = false;

		vrVehicleRecordModelImpl._originalCertificateId = vrVehicleRecordModelImpl._certificateId;

		vrVehicleRecordModelImpl._setOriginalCertificateId = false;

		vrVehicleRecordModelImpl._originalFrameNo = vrVehicleRecordModelImpl._frameNo;

		vrVehicleRecordModelImpl._originalVehicleRecordStatus = vrVehicleRecordModelImpl._vehicleRecordStatus;

		vrVehicleRecordModelImpl._setOriginalVehicleRecordStatus = false;

		vrVehicleRecordModelImpl._originalPrintingStatus = vrVehicleRecordModelImpl._printingStatus;

		vrVehicleRecordModelImpl._setOriginalPrintingStatus = false;

		vrVehicleRecordModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VRVehicleRecord> toCacheModel() {
		VRVehicleRecordCacheModel vrVehicleRecordCacheModel = new VRVehicleRecordCacheModel();

		vrVehicleRecordCacheModel.id = getId();

		vrVehicleRecordCacheModel.mtCore = getMtCore();

		vrVehicleRecordCacheModel.issueId = getIssueId();

		vrVehicleRecordCacheModel.issueVehicleCertificateId = getIssueVehicleCertificateId();

		vrVehicleRecordCacheModel.dossierId = getDossierId();

		vrVehicleRecordCacheModel.applicantProfileId = getApplicantProfileId();

		vrVehicleRecordCacheModel.applicantName = getApplicantName();

		String applicantName = vrVehicleRecordCacheModel.applicantName;

		if ((applicantName != null) && (applicantName.length() == 0)) {
			vrVehicleRecordCacheModel.applicantName = null;
		}

		vrVehicleRecordCacheModel.applicantAddress = getApplicantAddress();

		String applicantAddress = vrVehicleRecordCacheModel.applicantAddress;

		if ((applicantAddress != null) && (applicantAddress.length() == 0)) {
			vrVehicleRecordCacheModel.applicantAddress = null;
		}

		vrVehicleRecordCacheModel.certificateId = getCertificateId();

		vrVehicleRecordCacheModel.productionNumber = getProductionNumber();

		String productionNumber = vrVehicleRecordCacheModel.productionNumber;

		if ((productionNumber != null) && (productionNumber.length() == 0)) {
			vrVehicleRecordCacheModel.productionNumber = null;
		}

		Date productionDate = getProductionDate();

		if (productionDate != null) {
			vrVehicleRecordCacheModel.productionDate = productionDate.getTime();
		}
		else {
			vrVehicleRecordCacheModel.productionDate = Long.MIN_VALUE;
		}

		vrVehicleRecordCacheModel.frameNo = getFrameNo();

		String frameNo = vrVehicleRecordCacheModel.frameNo;

		if ((frameNo != null) && (frameNo.length() == 0)) {
			vrVehicleRecordCacheModel.frameNo = null;
		}

		vrVehicleRecordCacheModel.boxNo = getBoxNo();

		String boxNo = vrVehicleRecordCacheModel.boxNo;

		if ((boxNo != null) && (boxNo.length() == 0)) {
			vrVehicleRecordCacheModel.boxNo = null;
		}

		vrVehicleRecordCacheModel.engineNo = getEngineNo();

		String engineNo = vrVehicleRecordCacheModel.engineNo;

		if ((engineNo != null) && (engineNo.length() == 0)) {
			vrVehicleRecordCacheModel.engineNo = null;
		}

		vrVehicleRecordCacheModel.color = getColor();

		String color = vrVehicleRecordCacheModel.color;

		if ((color != null) && (color.length() == 0)) {
			vrVehicleRecordCacheModel.color = null;
		}

		vrVehicleRecordCacheModel.stampShortNo = getStampShortNo();

		String stampShortNo = vrVehicleRecordCacheModel.stampShortNo;

		if ((stampShortNo != null) && (stampShortNo.length() == 0)) {
			vrVehicleRecordCacheModel.stampShortNo = null;
		}

		vrVehicleRecordCacheModel.serialNo = getSerialNo();

		String serialNo = vrVehicleRecordCacheModel.serialNo;

		if ((serialNo != null) && (serialNo.length() == 0)) {
			vrVehicleRecordCacheModel.serialNo = null;
		}

		vrVehicleRecordCacheModel.vehicleRecordStatus = getVehicleRecordStatus();

		vrVehicleRecordCacheModel.printingStatus = getPrintingStatus();

		vrVehicleRecordCacheModel.attachedFile = getAttachedFile();

		vrVehicleRecordCacheModel.signName = getSignName();

		String signName = vrVehicleRecordCacheModel.signName;

		if ((signName != null) && (signName.length() == 0)) {
			vrVehicleRecordCacheModel.signName = null;
		}

		vrVehicleRecordCacheModel.signTitle = getSignTitle();

		String signTitle = vrVehicleRecordCacheModel.signTitle;

		if ((signTitle != null) && (signTitle.length() == 0)) {
			vrVehicleRecordCacheModel.signTitle = null;
		}

		vrVehicleRecordCacheModel.signPlace = getSignPlace();

		String signPlace = vrVehicleRecordCacheModel.signPlace;

		if ((signPlace != null) && (signPlace.length() == 0)) {
			vrVehicleRecordCacheModel.signPlace = null;
		}

		Date signDate = getSignDate();

		if (signDate != null) {
			vrVehicleRecordCacheModel.signDate = signDate.getTime();
		}
		else {
			vrVehicleRecordCacheModel.signDate = Long.MIN_VALUE;
		}

		Date modifyDate = getModifyDate();

		if (modifyDate != null) {
			vrVehicleRecordCacheModel.modifyDate = modifyDate.getTime();
		}
		else {
			vrVehicleRecordCacheModel.modifyDate = Long.MIN_VALUE;
		}

		Date syncDate = getSyncDate();

		if (syncDate != null) {
			vrVehicleRecordCacheModel.syncDate = syncDate.getTime();
		}
		else {
			vrVehicleRecordCacheModel.syncDate = Long.MIN_VALUE;
		}

		Date certificateRecordDate = getCertificateRecordDate();

		if (certificateRecordDate != null) {
			vrVehicleRecordCacheModel.certificateRecordDate = certificateRecordDate.getTime();
		}
		else {
			vrVehicleRecordCacheModel.certificateRecordDate = Long.MIN_VALUE;
		}

		vrVehicleRecordCacheModel.issueInspectionRecordId = getIssueInspectionRecordId();

		vrVehicleRecordCacheModel.certificaterecordno = getCertificaterecordno();

		String certificaterecordno = vrVehicleRecordCacheModel.certificaterecordno;

		if ((certificaterecordno != null) &&
				(certificaterecordno.length() == 0)) {
			vrVehicleRecordCacheModel.certificaterecordno = null;
		}

		vrVehicleRecordCacheModel.postPrintingStatus = getPostPrintingStatus();

		vrVehicleRecordCacheModel.qrCode = getQrCode();

		String qrCode = vrVehicleRecordCacheModel.qrCode;

		if ((qrCode != null) && (qrCode.length() == 0)) {
			vrVehicleRecordCacheModel.qrCode = null;
		}

		return vrVehicleRecordCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(63);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", mtCore=");
		sb.append(getMtCore());
		sb.append(", issueId=");
		sb.append(getIssueId());
		sb.append(", issueVehicleCertificateId=");
		sb.append(getIssueVehicleCertificateId());
		sb.append(", dossierId=");
		sb.append(getDossierId());
		sb.append(", applicantProfileId=");
		sb.append(getApplicantProfileId());
		sb.append(", applicantName=");
		sb.append(getApplicantName());
		sb.append(", applicantAddress=");
		sb.append(getApplicantAddress());
		sb.append(", certificateId=");
		sb.append(getCertificateId());
		sb.append(", productionNumber=");
		sb.append(getProductionNumber());
		sb.append(", productionDate=");
		sb.append(getProductionDate());
		sb.append(", frameNo=");
		sb.append(getFrameNo());
		sb.append(", boxNo=");
		sb.append(getBoxNo());
		sb.append(", engineNo=");
		sb.append(getEngineNo());
		sb.append(", color=");
		sb.append(getColor());
		sb.append(", stampShortNo=");
		sb.append(getStampShortNo());
		sb.append(", serialNo=");
		sb.append(getSerialNo());
		sb.append(", vehicleRecordStatus=");
		sb.append(getVehicleRecordStatus());
		sb.append(", printingStatus=");
		sb.append(getPrintingStatus());
		sb.append(", attachedFile=");
		sb.append(getAttachedFile());
		sb.append(", signName=");
		sb.append(getSignName());
		sb.append(", signTitle=");
		sb.append(getSignTitle());
		sb.append(", signPlace=");
		sb.append(getSignPlace());
		sb.append(", signDate=");
		sb.append(getSignDate());
		sb.append(", modifyDate=");
		sb.append(getModifyDate());
		sb.append(", syncDate=");
		sb.append(getSyncDate());
		sb.append(", certificateRecordDate=");
		sb.append(getCertificateRecordDate());
		sb.append(", issueInspectionRecordId=");
		sb.append(getIssueInspectionRecordId());
		sb.append(", certificaterecordno=");
		sb.append(getCertificaterecordno());
		sb.append(", postPrintingStatus=");
		sb.append(getPostPrintingStatus());
		sb.append(", qrCode=");
		sb.append(getQrCode());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(97);

		sb.append("<model><model-name>");
		sb.append("com.fds.vr.business.model.VRVehicleRecord");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mtCore</column-name><column-value><![CDATA[");
		sb.append(getMtCore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issueId</column-name><column-value><![CDATA[");
		sb.append(getIssueId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issueVehicleCertificateId</column-name><column-value><![CDATA[");
		sb.append(getIssueVehicleCertificateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierId</column-name><column-value><![CDATA[");
		sb.append(getDossierId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantProfileId</column-name><column-value><![CDATA[");
		sb.append(getApplicantProfileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantName</column-name><column-value><![CDATA[");
		sb.append(getApplicantName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantAddress</column-name><column-value><![CDATA[");
		sb.append(getApplicantAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateId</column-name><column-value><![CDATA[");
		sb.append(getCertificateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionNumber</column-name><column-value><![CDATA[");
		sb.append(getProductionNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionDate</column-name><column-value><![CDATA[");
		sb.append(getProductionDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>frameNo</column-name><column-value><![CDATA[");
		sb.append(getFrameNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>boxNo</column-name><column-value><![CDATA[");
		sb.append(getBoxNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>engineNo</column-name><column-value><![CDATA[");
		sb.append(getEngineNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>color</column-name><column-value><![CDATA[");
		sb.append(getColor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stampShortNo</column-name><column-value><![CDATA[");
		sb.append(getStampShortNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serialNo</column-name><column-value><![CDATA[");
		sb.append(getSerialNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleRecordStatus</column-name><column-value><![CDATA[");
		sb.append(getVehicleRecordStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>printingStatus</column-name><column-value><![CDATA[");
		sb.append(getPrintingStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachedFile</column-name><column-value><![CDATA[");
		sb.append(getAttachedFile());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signName</column-name><column-value><![CDATA[");
		sb.append(getSignName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signTitle</column-name><column-value><![CDATA[");
		sb.append(getSignTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signPlace</column-name><column-value><![CDATA[");
		sb.append(getSignPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signDate</column-name><column-value><![CDATA[");
		sb.append(getSignDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifyDate</column-name><column-value><![CDATA[");
		sb.append(getModifyDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncDate</column-name><column-value><![CDATA[");
		sb.append(getSyncDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateRecordDate</column-name><column-value><![CDATA[");
		sb.append(getCertificateRecordDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issueInspectionRecordId</column-name><column-value><![CDATA[");
		sb.append(getIssueInspectionRecordId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificaterecordno</column-name><column-value><![CDATA[");
		sb.append(getCertificaterecordno());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>postPrintingStatus</column-name><column-value><![CDATA[");
		sb.append(getPostPrintingStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>qrCode</column-name><column-value><![CDATA[");
		sb.append(getQrCode());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VRVehicleRecord.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VRVehicleRecord.class
		};
	private long _id;
	private long _mtCore;
	private long _originalMtCore;
	private boolean _setOriginalMtCore;
	private long _issueId;
	private long _originalIssueId;
	private boolean _setOriginalIssueId;
	private long _issueVehicleCertificateId;
	private long _originalIssueVehicleCertificateId;
	private boolean _setOriginalIssueVehicleCertificateId;
	private long _dossierId;
	private long _originalDossierId;
	private boolean _setOriginalDossierId;
	private long _applicantProfileId;
	private long _originalApplicantProfileId;
	private boolean _setOriginalApplicantProfileId;
	private String _applicantName;
	private String _applicantAddress;
	private long _certificateId;
	private long _originalCertificateId;
	private boolean _setOriginalCertificateId;
	private String _productionNumber;
	private Date _productionDate;
	private String _frameNo;
	private String _originalFrameNo;
	private String _boxNo;
	private String _engineNo;
	private String _color;
	private String _stampShortNo;
	private String _serialNo;
	private long _vehicleRecordStatus;
	private long _originalVehicleRecordStatus;
	private boolean _setOriginalVehicleRecordStatus;
	private long _printingStatus;
	private long _originalPrintingStatus;
	private boolean _setOriginalPrintingStatus;
	private long _attachedFile;
	private String _signName;
	private String _signTitle;
	private String _signPlace;
	private Date _signDate;
	private Date _modifyDate;
	private Date _syncDate;
	private Date _certificateRecordDate;
	private long _issueInspectionRecordId;
	private String _certificaterecordno;
	private int _postPrintingStatus;
	private String _qrCode;
	private long _columnBitmask;
	private VRVehicleRecord _escapedModel;
}