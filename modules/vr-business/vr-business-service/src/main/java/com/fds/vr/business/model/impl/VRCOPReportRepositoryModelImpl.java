/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.business.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.business.model.VRCOPReportRepository;
import com.fds.vr.business.model.VRCOPReportRepositoryModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VRCOPReportRepository service. Represents a row in the &quot;vr_copreportrepository&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VRCOPReportRepositoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VRCOPReportRepositoryImpl}.
 * </p>
 *
 * @author LamTV
 * @see VRCOPReportRepositoryImpl
 * @see VRCOPReportRepository
 * @see VRCOPReportRepositoryModel
 * @generated
 */
@ProviderType
public class VRCOPReportRepositoryModelImpl extends BaseModelImpl<VRCOPReportRepository>
	implements VRCOPReportRepositoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vrcop report repository model instance should use the {@link VRCOPReportRepository} interface instead.
	 */
	public static final String TABLE_NAME = "vr_copreportrepository";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "mtCore", Types.BIGINT },
			{ "applicantProfileId", Types.BIGINT },
			{ "applicantCode", Types.VARCHAR },
			{ "applicantName", Types.VARCHAR },
			{ "applicantAddress", Types.VARCHAR },
			{ "overseasManufacturerCode", Types.VARCHAR },
			{ "overseasManufacturerName", Types.VARCHAR },
			{ "overseasManufacturerAddress", Types.VARCHAR },
			{ "productionPlantId", Types.BIGINT },
			{ "productionPlantCode", Types.VARCHAR },
			{ "productionPlantName", Types.VARCHAR },
			{ "productionPlantAddress", Types.VARCHAR },
			{ "copReportNo", Types.VARCHAR },
			{ "copReportStatus", Types.VARCHAR },
			{ "copReportType", Types.VARCHAR },
			{ "copReportMetadata", Types.VARCHAR },
			{ "copReportSignName", Types.VARCHAR },
			{ "copReportSignTitle", Types.VARCHAR },
			{ "copReportSignPlace", Types.VARCHAR },
			{ "copReportDate", Types.TIMESTAMP },
			{ "copReportApprovedDate", Types.TIMESTAMP },
			{ "copReportExpiredDate", Types.TIMESTAMP },
			{ "COPFileEntryId", Types.BIGINT },
			{ "modifyDate", Types.TIMESTAMP },
			{ "syncDate", Types.TIMESTAMP },
			{ "importerManufacturerCode", Types.VARCHAR },
			{ "importerManufacturerName", Types.VARCHAR },
			{ "importerManufacturerAddress", Types.VARCHAR },
			{ "markupDomesticsManufacturer", Types.VARCHAR },
			{ "markupImporter", Types.VARCHAR },
			{ "copClassification", Types.VARCHAR },
			{ "productClassificationDescription", Types.VARCHAR },
			{ "totalPointA", Types.INTEGER },
			{ "totalPointB", Types.INTEGER },
			{ "totalPointC", Types.INTEGER },
			{ "copNonConformity", Types.VARCHAR },
			{ "inspectionRecordNo", Types.VARCHAR },
			{ "inspectionRecordDate", Types.TIMESTAMP },
			{ "corporationId", Types.BIGINT },
			{ "inspectorId", Types.BIGINT },
			{ "inspectionSite", Types.VARCHAR },
			{ "inspectionDateFrom", Types.TIMESTAMP },
			{ "inspectionDateTo", Types.TIMESTAMP },
			{ "subInspector", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "applicantRepresentative", Types.VARCHAR },
			{ "applicantRepresentativeTitle", Types.VARCHAR },
			{ "inspectionRecordFileEntryId", Types.BIGINT },
			{ "copReportRefNo", Types.VARCHAR },
			{ "copReportRefDate", Types.TIMESTAMP },
			{ "copReportPreviousNo", Types.VARCHAR },
			{ "copReportPreviousDate", Types.TIMESTAMP },
			{ "expiredStatus", Types.VARCHAR },
			{ "dossierId", Types.BIGINT },
			{ "dossierIdCTN", Types.VARCHAR },
			{ "dossierNo", Types.VARCHAR },
			{ "applicantEmail", Types.VARCHAR },
			{ "applicantPhone", Types.VARCHAR },
			{ "applicantTelNo", Types.VARCHAR },
			{ "applicantFax", Types.VARCHAR },
			{ "applicantContactName", Types.VARCHAR },
			{ "applicantContactEmail", Types.VARCHAR },
			{ "applicantContactPhone", Types.VARCHAR },
			{ "applicantContactTelNo", Types.VARCHAR },
			{ "applicantBusinessType", Types.VARCHAR },
			{ "markupDesigner", Types.VARCHAR },
			{ "markupOverseasManufacturer", Types.VARCHAR },
			{ "markupMaintainer", Types.VARCHAR },
			{ "importerDomesticSite", Types.VARCHAR },
			{ "siteOfNationality", Types.VARCHAR },
			{ "siteOfNationalityCode", Types.VARCHAR },
			{ "siteOfRegion", Types.VARCHAR },
			{ "siteOfRegionCode", Types.VARCHAR },
			{ "siteOfCity", Types.VARCHAR },
			{ "siteOfCityCode", Types.VARCHAR },
			{ "manufacturerRepresentative", Types.VARCHAR },
			{ "manufacturerRepresentativeTitle", Types.VARCHAR },
			{ "manufacturerEmail", Types.VARCHAR },
			{ "manufacturerPhone", Types.VARCHAR },
			{ "manufacturerFax", Types.VARCHAR },
			{ "productionPlantEmail", Types.VARCHAR },
			{ "productionPlantWebsite", Types.VARCHAR },
			{ "productionPlantRepresentative", Types.VARCHAR },
			{ "productionPlantRepresentativeTitle", Types.VARCHAR },
			{ "corporationName", Types.VARCHAR },
			{ "inspectorContactCode", Types.VARCHAR },
			{ "inspectorName", Types.VARCHAR },
			{ "inspectoRendorSementDate", Types.TIMESTAMP },
			{ "inspectorDeadline", Types.TIMESTAMP },
			{ "resolvedStatus", Types.VARCHAR },
			{ "numberOfNonConformity", Types.INTEGER },
			{ "numberOfResolved", Types.INTEGER },
			{ "observationDescription", Types.VARCHAR },
			{ "inspectionAuditCycle", Types.VARCHAR },
			{ "inspectionNote", Types.VARCHAR },
			{ "productionConformityChecking", Types.VARCHAR },
			{ "productionStampChecking", Types.VARCHAR },
			{ "testingEquipmentChecking", Types.VARCHAR },
			{ "productionPlantClassification", Types.VARCHAR },
			{ "actualCapacity", Types.VARCHAR },
			{ "maxCapacity", Types.VARCHAR },
			{ "averageCapacity", Types.VARCHAR },
			{ "totalEmployee", Types.VARCHAR },
			{ "totalWorker", Types.VARCHAR },
			{ "totalManager", Types.VARCHAR },
			{ "totalTechnical", Types.VARCHAR },
			{ "totalQaEmployee", Types.VARCHAR },
			{ "totalSquareMeter", Types.VARCHAR },
			{ "wareHouseSquare", Types.VARCHAR },
			{ "officeSquare", Types.VARCHAR },
			{ "productionSquare", Types.VARCHAR },
			{ "machiningArea", Types.VARCHAR },
			{ "weldingArea", Types.VARCHAR },
			{ "paintingArea", Types.VARCHAR },
			{ "productionAssembleArea", Types.VARCHAR },
			{ "finishProductArea", Types.VARCHAR },
			{ "testingArea", Types.VARCHAR },
			{ "selfEquipment", Types.VARCHAR },
			{ "contractEquipment", Types.VARCHAR },
			{ "circularNo", Types.VARCHAR },
			{ "circularDate", Types.TIMESTAMP },
			{ "circularNo2", Types.VARCHAR },
			{ "circularDate2", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mtCore", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("applicantProfileId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("applicantCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("overseasManufacturerCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("overseasManufacturerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("overseasManufacturerAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionPlantId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("productionPlantCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionPlantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionPlantAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportMetadata", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportSignName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportSignTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportSignPlace", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("copReportApprovedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("copReportExpiredDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("COPFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifyDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("syncDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("importerManufacturerCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("importerManufacturerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("importerManufacturerAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("markupDomesticsManufacturer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("markupImporter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copClassification", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productClassificationDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("totalPointA", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("totalPointB", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("totalPointC", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("copNonConformity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectionRecordNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectionRecordDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("corporationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("inspectorId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("inspectionSite", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectionDateFrom", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("inspectionDateTo", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("subInspector", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantRepresentative", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantRepresentativeTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectionRecordFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("copReportRefNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportRefDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("copReportPreviousNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportPreviousDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("expiredStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dossierId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dossierIdCTN", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dossierNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantPhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantTelNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantFax", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantContactName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantContactEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantContactPhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantContactTelNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantBusinessType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("markupDesigner", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("markupOverseasManufacturer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("markupMaintainer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("importerDomesticSite", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("siteOfNationality", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("siteOfNationalityCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("siteOfRegion", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("siteOfRegionCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("siteOfCity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("siteOfCityCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufacturerRepresentative", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufacturerRepresentativeTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufacturerEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufacturerPhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufacturerFax", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionPlantEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionPlantWebsite", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionPlantRepresentative", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionPlantRepresentativeTitle",
			Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("corporationName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectorContactCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectorName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectoRendorSementDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("inspectorDeadline", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("resolvedStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numberOfNonConformity", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("numberOfResolved", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("observationDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectionAuditCycle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectionNote", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionConformityChecking", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionStampChecking", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("testingEquipmentChecking", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionPlantClassification", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("actualCapacity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("maxCapacity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("averageCapacity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("totalEmployee", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("totalWorker", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("totalManager", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("totalTechnical", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("totalQaEmployee", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("totalSquareMeter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("wareHouseSquare", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("officeSquare", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionSquare", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("machiningArea", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("weldingArea", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("paintingArea", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionAssembleArea", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("finishProductArea", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("testingArea", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("selfEquipment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contractEquipment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("circularNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("circularDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("circularNo2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("circularDate2", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table vr_copreportrepository (id LONG not null primary key,mtCore LONG,applicantProfileId LONG,applicantCode VARCHAR(75) null,applicantName VARCHAR(75) null,applicantAddress VARCHAR(75) null,overseasManufacturerCode VARCHAR(75) null,overseasManufacturerName VARCHAR(75) null,overseasManufacturerAddress VARCHAR(75) null,productionPlantId LONG,productionPlantCode VARCHAR(75) null,productionPlantName VARCHAR(75) null,productionPlantAddress VARCHAR(75) null,copReportNo VARCHAR(75) null,copReportStatus VARCHAR(75) null,copReportType VARCHAR(75) null,copReportMetadata VARCHAR(75) null,copReportSignName VARCHAR(75) null,copReportSignTitle VARCHAR(75) null,copReportSignPlace VARCHAR(75) null,copReportDate DATE null,copReportApprovedDate DATE null,copReportExpiredDate DATE null,COPFileEntryId LONG,modifyDate DATE null,syncDate DATE null,importerManufacturerCode VARCHAR(75) null,importerManufacturerName VARCHAR(75) null,importerManufacturerAddress VARCHAR(75) null,markupDomesticsManufacturer VARCHAR(75) null,markupImporter VARCHAR(75) null,copClassification VARCHAR(75) null,productClassificationDescription VARCHAR(75) null,totalPointA INTEGER,totalPointB INTEGER,totalPointC INTEGER,copNonConformity VARCHAR(75) null,inspectionRecordNo VARCHAR(75) null,inspectionRecordDate DATE null,corporationId LONG,inspectorId LONG,inspectionSite VARCHAR(75) null,inspectionDateFrom DATE null,inspectionDateTo DATE null,subInspector VARCHAR(75) null,description VARCHAR(75) null,applicantRepresentative VARCHAR(75) null,applicantRepresentativeTitle VARCHAR(75) null,inspectionRecordFileEntryId LONG,copReportRefNo VARCHAR(75) null,copReportRefDate DATE null,copReportPreviousNo VARCHAR(75) null,copReportPreviousDate DATE null,expiredStatus VARCHAR(75) null,dossierId LONG,dossierIdCTN VARCHAR(75) null,dossierNo VARCHAR(75) null,applicantEmail VARCHAR(75) null,applicantPhone VARCHAR(75) null,applicantTelNo VARCHAR(75) null,applicantFax VARCHAR(75) null,applicantContactName VARCHAR(75) null,applicantContactEmail VARCHAR(75) null,applicantContactPhone VARCHAR(75) null,applicantContactTelNo VARCHAR(75) null,applicantBusinessType VARCHAR(75) null,markupDesigner VARCHAR(75) null,markupOverseasManufacturer VARCHAR(75) null,markupMaintainer VARCHAR(75) null,importerDomesticSite VARCHAR(75) null,siteOfNationality VARCHAR(75) null,siteOfNationalityCode VARCHAR(75) null,siteOfRegion VARCHAR(75) null,siteOfRegionCode VARCHAR(75) null,siteOfCity VARCHAR(75) null,siteOfCityCode VARCHAR(75) null,manufacturerRepresentative VARCHAR(75) null,manufacturerRepresentativeTitle VARCHAR(75) null,manufacturerEmail VARCHAR(75) null,manufacturerPhone VARCHAR(75) null,manufacturerFax VARCHAR(75) null,productionPlantEmail VARCHAR(75) null,productionPlantWebsite VARCHAR(75) null,productionPlantRepresentative VARCHAR(75) null,productionPlantRepresentativeTitle VARCHAR(75) null,corporationName VARCHAR(75) null,inspectorContactCode VARCHAR(75) null,inspectorName VARCHAR(75) null,inspectoRendorSementDate DATE null,inspectorDeadline DATE null,resolvedStatus VARCHAR(75) null,numberOfNonConformity INTEGER,numberOfResolved INTEGER,observationDescription VARCHAR(75) null,inspectionAuditCycle VARCHAR(75) null,inspectionNote VARCHAR(75) null,productionConformityChecking VARCHAR(75) null,productionStampChecking VARCHAR(75) null,testingEquipmentChecking VARCHAR(75) null,productionPlantClassification VARCHAR(75) null,actualCapacity VARCHAR(75) null,maxCapacity VARCHAR(75) null,averageCapacity VARCHAR(75) null,totalEmployee VARCHAR(75) null,totalWorker VARCHAR(75) null,totalManager VARCHAR(75) null,totalTechnical VARCHAR(75) null,totalQaEmployee VARCHAR(75) null,totalSquareMeter VARCHAR(75) null,wareHouseSquare VARCHAR(75) null,officeSquare VARCHAR(75) null,productionSquare VARCHAR(75) null,machiningArea VARCHAR(75) null,weldingArea VARCHAR(75) null,paintingArea VARCHAR(75) null,productionAssembleArea VARCHAR(75) null,finishProductArea VARCHAR(75) null,testingArea VARCHAR(75) null,selfEquipment VARCHAR(75) null,contractEquipment VARCHAR(75) null,circularNo VARCHAR(75) null,circularDate DATE null,circularNo2 VARCHAR(75) null,circularDate2 DATE null)";
	public static final String TABLE_SQL_DROP = "drop table vr_copreportrepository";
	public static final String ORDER_BY_JPQL = " ORDER BY vrcopReportRepository.modifyDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_copreportrepository.modifyDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fds.vr.business.model.VRCOPReportRepository"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fds.vr.business.model.VRCOPReportRepository"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fds.vr.business.model.VRCOPReportRepository"),
			true);
	public static final long APPLICANTPROFILEID_COLUMN_BITMASK = 1L;
	public static final long COPCLASSIFICATION_COLUMN_BITMASK = 2L;
	public static final long COPREPORTNO_COLUMN_BITMASK = 4L;
	public static final long COPREPORTSTATUS_COLUMN_BITMASK = 8L;
	public static final long DOSSIERID_COLUMN_BITMASK = 16L;
	public static final long MTCORE_COLUMN_BITMASK = 32L;
	public static final long PRODUCTIONPLANTADDRESS_COLUMN_BITMASK = 64L;
	public static final long PRODUCTIONPLANTCODE_COLUMN_BITMASK = 128L;
	public static final long PRODUCTIONPLANTNAME_COLUMN_BITMASK = 256L;
	public static final long MODIFYDATE_COLUMN_BITMASK = 512L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.fds.vr.service.util.ServiceProps.get(
				"lock.expiration.time.com.fds.vr.business.model.VRCOPReportRepository"));

	public VRCOPReportRepositoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VRCOPReportRepository.class;
	}

	@Override
	public String getModelClassName() {
		return VRCOPReportRepository.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("mtCore", getMtCore());
		attributes.put("applicantProfileId", getApplicantProfileId());
		attributes.put("applicantCode", getApplicantCode());
		attributes.put("applicantName", getApplicantName());
		attributes.put("applicantAddress", getApplicantAddress());
		attributes.put("overseasManufacturerCode", getOverseasManufacturerCode());
		attributes.put("overseasManufacturerName", getOverseasManufacturerName());
		attributes.put("overseasManufacturerAddress",
			getOverseasManufacturerAddress());
		attributes.put("productionPlantId", getProductionPlantId());
		attributes.put("productionPlantCode", getProductionPlantCode());
		attributes.put("productionPlantName", getProductionPlantName());
		attributes.put("productionPlantAddress", getProductionPlantAddress());
		attributes.put("copReportNo", getCopReportNo());
		attributes.put("copReportStatus", getCopReportStatus());
		attributes.put("copReportType", getCopReportType());
		attributes.put("copReportMetadata", getCopReportMetadata());
		attributes.put("copReportSignName", getCopReportSignName());
		attributes.put("copReportSignTitle", getCopReportSignTitle());
		attributes.put("copReportSignPlace", getCopReportSignPlace());
		attributes.put("copReportDate", getCopReportDate());
		attributes.put("copReportApprovedDate", getCopReportApprovedDate());
		attributes.put("copReportExpiredDate", getCopReportExpiredDate());
		attributes.put("COPFileEntryId", getCOPFileEntryId());
		attributes.put("modifyDate", getModifyDate());
		attributes.put("syncDate", getSyncDate());
		attributes.put("importerManufacturerCode", getImporterManufacturerCode());
		attributes.put("importerManufacturerName", getImporterManufacturerName());
		attributes.put("importerManufacturerAddress",
			getImporterManufacturerAddress());
		attributes.put("markupDomesticsManufacturer",
			getMarkupDomesticsManufacturer());
		attributes.put("markupImporter", getMarkupImporter());
		attributes.put("copClassification", getCopClassification());
		attributes.put("productClassificationDescription",
			getProductClassificationDescription());
		attributes.put("totalPointA", getTotalPointA());
		attributes.put("totalPointB", getTotalPointB());
		attributes.put("totalPointC", getTotalPointC());
		attributes.put("copNonConformity", getCopNonConformity());
		attributes.put("inspectionRecordNo", getInspectionRecordNo());
		attributes.put("inspectionRecordDate", getInspectionRecordDate());
		attributes.put("corporationId", getCorporationId());
		attributes.put("inspectorId", getInspectorId());
		attributes.put("inspectionSite", getInspectionSite());
		attributes.put("inspectionDateFrom", getInspectionDateFrom());
		attributes.put("inspectionDateTo", getInspectionDateTo());
		attributes.put("subInspector", getSubInspector());
		attributes.put("description", getDescription());
		attributes.put("applicantRepresentative", getApplicantRepresentative());
		attributes.put("applicantRepresentativeTitle",
			getApplicantRepresentativeTitle());
		attributes.put("inspectionRecordFileEntryId",
			getInspectionRecordFileEntryId());
		attributes.put("copReportRefNo", getCopReportRefNo());
		attributes.put("copReportRefDate", getCopReportRefDate());
		attributes.put("copReportPreviousNo", getCopReportPreviousNo());
		attributes.put("copReportPreviousDate", getCopReportPreviousDate());
		attributes.put("expiredStatus", getExpiredStatus());
		attributes.put("dossierId", getDossierId());
		attributes.put("dossierIdCTN", getDossierIdCTN());
		attributes.put("dossierNo", getDossierNo());
		attributes.put("applicantEmail", getApplicantEmail());
		attributes.put("applicantPhone", getApplicantPhone());
		attributes.put("applicantTelNo", getApplicantTelNo());
		attributes.put("applicantFax", getApplicantFax());
		attributes.put("applicantContactName", getApplicantContactName());
		attributes.put("applicantContactEmail", getApplicantContactEmail());
		attributes.put("applicantContactPhone", getApplicantContactPhone());
		attributes.put("applicantContactTelNo", getApplicantContactTelNo());
		attributes.put("applicantBusinessType", getApplicantBusinessType());
		attributes.put("markupDesigner", getMarkupDesigner());
		attributes.put("markupOverseasManufacturer",
			getMarkupOverseasManufacturer());
		attributes.put("markupMaintainer", getMarkupMaintainer());
		attributes.put("importerDomesticSite", getImporterDomesticSite());
		attributes.put("siteOfNationality", getSiteOfNationality());
		attributes.put("siteOfNationalityCode", getSiteOfNationalityCode());
		attributes.put("siteOfRegion", getSiteOfRegion());
		attributes.put("siteOfRegionCode", getSiteOfRegionCode());
		attributes.put("siteOfCity", getSiteOfCity());
		attributes.put("siteOfCityCode", getSiteOfCityCode());
		attributes.put("manufacturerRepresentative",
			getManufacturerRepresentative());
		attributes.put("manufacturerRepresentativeTitle",
			getManufacturerRepresentativeTitle());
		attributes.put("manufacturerEmail", getManufacturerEmail());
		attributes.put("manufacturerPhone", getManufacturerPhone());
		attributes.put("manufacturerFax", getManufacturerFax());
		attributes.put("productionPlantEmail", getProductionPlantEmail());
		attributes.put("productionPlantWebsite", getProductionPlantWebsite());
		attributes.put("productionPlantRepresentative",
			getProductionPlantRepresentative());
		attributes.put("productionPlantRepresentativeTitle",
			getProductionPlantRepresentativeTitle());
		attributes.put("corporationName", getCorporationName());
		attributes.put("inspectorContactCode", getInspectorContactCode());
		attributes.put("inspectorName", getInspectorName());
		attributes.put("inspectoRendorSementDate", getInspectoRendorSementDate());
		attributes.put("inspectorDeadline", getInspectorDeadline());
		attributes.put("resolvedStatus", getResolvedStatus());
		attributes.put("numberOfNonConformity", getNumberOfNonConformity());
		attributes.put("numberOfResolved", getNumberOfResolved());
		attributes.put("observationDescription", getObservationDescription());
		attributes.put("inspectionAuditCycle", getInspectionAuditCycle());
		attributes.put("inspectionNote", getInspectionNote());
		attributes.put("productionConformityChecking",
			getProductionConformityChecking());
		attributes.put("productionStampChecking", getProductionStampChecking());
		attributes.put("testingEquipmentChecking", getTestingEquipmentChecking());
		attributes.put("productionPlantClassification",
			getProductionPlantClassification());
		attributes.put("actualCapacity", getActualCapacity());
		attributes.put("maxCapacity", getMaxCapacity());
		attributes.put("averageCapacity", getAverageCapacity());
		attributes.put("totalEmployee", getTotalEmployee());
		attributes.put("totalWorker", getTotalWorker());
		attributes.put("totalManager", getTotalManager());
		attributes.put("totalTechnical", getTotalTechnical());
		attributes.put("totalQaEmployee", getTotalQaEmployee());
		attributes.put("totalSquareMeter", getTotalSquareMeter());
		attributes.put("wareHouseSquare", getWareHouseSquare());
		attributes.put("officeSquare", getOfficeSquare());
		attributes.put("productionSquare", getProductionSquare());
		attributes.put("machiningArea", getMachiningArea());
		attributes.put("weldingArea", getWeldingArea());
		attributes.put("paintingArea", getPaintingArea());
		attributes.put("productionAssembleArea", getProductionAssembleArea());
		attributes.put("finishProductArea", getFinishProductArea());
		attributes.put("testingArea", getTestingArea());
		attributes.put("selfEquipment", getSelfEquipment());
		attributes.put("contractEquipment", getContractEquipment());
		attributes.put("circularNo", getCircularNo());
		attributes.put("circularDate", getCircularDate());
		attributes.put("circularNo2", getCircularNo2());
		attributes.put("circularDate2", getCircularDate2());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long mtCore = (Long)attributes.get("mtCore");

		if (mtCore != null) {
			setMtCore(mtCore);
		}

		Long applicantProfileId = (Long)attributes.get("applicantProfileId");

		if (applicantProfileId != null) {
			setApplicantProfileId(applicantProfileId);
		}

		String applicantCode = (String)attributes.get("applicantCode");

		if (applicantCode != null) {
			setApplicantCode(applicantCode);
		}

		String applicantName = (String)attributes.get("applicantName");

		if (applicantName != null) {
			setApplicantName(applicantName);
		}

		String applicantAddress = (String)attributes.get("applicantAddress");

		if (applicantAddress != null) {
			setApplicantAddress(applicantAddress);
		}

		String overseasManufacturerCode = (String)attributes.get(
				"overseasManufacturerCode");

		if (overseasManufacturerCode != null) {
			setOverseasManufacturerCode(overseasManufacturerCode);
		}

		String overseasManufacturerName = (String)attributes.get(
				"overseasManufacturerName");

		if (overseasManufacturerName != null) {
			setOverseasManufacturerName(overseasManufacturerName);
		}

		String overseasManufacturerAddress = (String)attributes.get(
				"overseasManufacturerAddress");

		if (overseasManufacturerAddress != null) {
			setOverseasManufacturerAddress(overseasManufacturerAddress);
		}

		Long productionPlantId = (Long)attributes.get("productionPlantId");

		if (productionPlantId != null) {
			setProductionPlantId(productionPlantId);
		}

		String productionPlantCode = (String)attributes.get(
				"productionPlantCode");

		if (productionPlantCode != null) {
			setProductionPlantCode(productionPlantCode);
		}

		String productionPlantName = (String)attributes.get(
				"productionPlantName");

		if (productionPlantName != null) {
			setProductionPlantName(productionPlantName);
		}

		String productionPlantAddress = (String)attributes.get(
				"productionPlantAddress");

		if (productionPlantAddress != null) {
			setProductionPlantAddress(productionPlantAddress);
		}

		String copReportNo = (String)attributes.get("copReportNo");

		if (copReportNo != null) {
			setCopReportNo(copReportNo);
		}

		String copReportStatus = (String)attributes.get("copReportStatus");

		if (copReportStatus != null) {
			setCopReportStatus(copReportStatus);
		}

		String copReportType = (String)attributes.get("copReportType");

		if (copReportType != null) {
			setCopReportType(copReportType);
		}

		String copReportMetadata = (String)attributes.get("copReportMetadata");

		if (copReportMetadata != null) {
			setCopReportMetadata(copReportMetadata);
		}

		String copReportSignName = (String)attributes.get("copReportSignName");

		if (copReportSignName != null) {
			setCopReportSignName(copReportSignName);
		}

		String copReportSignTitle = (String)attributes.get("copReportSignTitle");

		if (copReportSignTitle != null) {
			setCopReportSignTitle(copReportSignTitle);
		}

		String copReportSignPlace = (String)attributes.get("copReportSignPlace");

		if (copReportSignPlace != null) {
			setCopReportSignPlace(copReportSignPlace);
		}

		Date copReportDate = (Date)attributes.get("copReportDate");

		if (copReportDate != null) {
			setCopReportDate(copReportDate);
		}

		Date copReportApprovedDate = (Date)attributes.get(
				"copReportApprovedDate");

		if (copReportApprovedDate != null) {
			setCopReportApprovedDate(copReportApprovedDate);
		}

		Date copReportExpiredDate = (Date)attributes.get("copReportExpiredDate");

		if (copReportExpiredDate != null) {
			setCopReportExpiredDate(copReportExpiredDate);
		}

		Long COPFileEntryId = (Long)attributes.get("COPFileEntryId");

		if (COPFileEntryId != null) {
			setCOPFileEntryId(COPFileEntryId);
		}

		Date modifyDate = (Date)attributes.get("modifyDate");

		if (modifyDate != null) {
			setModifyDate(modifyDate);
		}

		Date syncDate = (Date)attributes.get("syncDate");

		if (syncDate != null) {
			setSyncDate(syncDate);
		}

		String importerManufacturerCode = (String)attributes.get(
				"importerManufacturerCode");

		if (importerManufacturerCode != null) {
			setImporterManufacturerCode(importerManufacturerCode);
		}

		String importerManufacturerName = (String)attributes.get(
				"importerManufacturerName");

		if (importerManufacturerName != null) {
			setImporterManufacturerName(importerManufacturerName);
		}

		String importerManufacturerAddress = (String)attributes.get(
				"importerManufacturerAddress");

		if (importerManufacturerAddress != null) {
			setImporterManufacturerAddress(importerManufacturerAddress);
		}

		String markupDomesticsManufacturer = (String)attributes.get(
				"markupDomesticsManufacturer");

		if (markupDomesticsManufacturer != null) {
			setMarkupDomesticsManufacturer(markupDomesticsManufacturer);
		}

		String markupImporter = (String)attributes.get("markupImporter");

		if (markupImporter != null) {
			setMarkupImporter(markupImporter);
		}

		String copClassification = (String)attributes.get("copClassification");

		if (copClassification != null) {
			setCopClassification(copClassification);
		}

		String productClassificationDescription = (String)attributes.get(
				"productClassificationDescription");

		if (productClassificationDescription != null) {
			setProductClassificationDescription(productClassificationDescription);
		}

		Integer totalPointA = (Integer)attributes.get("totalPointA");

		if (totalPointA != null) {
			setTotalPointA(totalPointA);
		}

		Integer totalPointB = (Integer)attributes.get("totalPointB");

		if (totalPointB != null) {
			setTotalPointB(totalPointB);
		}

		Integer totalPointC = (Integer)attributes.get("totalPointC");

		if (totalPointC != null) {
			setTotalPointC(totalPointC);
		}

		String copNonConformity = (String)attributes.get("copNonConformity");

		if (copNonConformity != null) {
			setCopNonConformity(copNonConformity);
		}

		String inspectionRecordNo = (String)attributes.get("inspectionRecordNo");

		if (inspectionRecordNo != null) {
			setInspectionRecordNo(inspectionRecordNo);
		}

		Date inspectionRecordDate = (Date)attributes.get("inspectionRecordDate");

		if (inspectionRecordDate != null) {
			setInspectionRecordDate(inspectionRecordDate);
		}

		Long corporationId = (Long)attributes.get("corporationId");

		if (corporationId != null) {
			setCorporationId(corporationId);
		}

		Long inspectorId = (Long)attributes.get("inspectorId");

		if (inspectorId != null) {
			setInspectorId(inspectorId);
		}

		String inspectionSite = (String)attributes.get("inspectionSite");

		if (inspectionSite != null) {
			setInspectionSite(inspectionSite);
		}

		Date inspectionDateFrom = (Date)attributes.get("inspectionDateFrom");

		if (inspectionDateFrom != null) {
			setInspectionDateFrom(inspectionDateFrom);
		}

		Date inspectionDateTo = (Date)attributes.get("inspectionDateTo");

		if (inspectionDateTo != null) {
			setInspectionDateTo(inspectionDateTo);
		}

		String subInspector = (String)attributes.get("subInspector");

		if (subInspector != null) {
			setSubInspector(subInspector);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String applicantRepresentative = (String)attributes.get(
				"applicantRepresentative");

		if (applicantRepresentative != null) {
			setApplicantRepresentative(applicantRepresentative);
		}

		String applicantRepresentativeTitle = (String)attributes.get(
				"applicantRepresentativeTitle");

		if (applicantRepresentativeTitle != null) {
			setApplicantRepresentativeTitle(applicantRepresentativeTitle);
		}

		Long inspectionRecordFileEntryId = (Long)attributes.get(
				"inspectionRecordFileEntryId");

		if (inspectionRecordFileEntryId != null) {
			setInspectionRecordFileEntryId(inspectionRecordFileEntryId);
		}

		String copReportRefNo = (String)attributes.get("copReportRefNo");

		if (copReportRefNo != null) {
			setCopReportRefNo(copReportRefNo);
		}

		Date copReportRefDate = (Date)attributes.get("copReportRefDate");

		if (copReportRefDate != null) {
			setCopReportRefDate(copReportRefDate);
		}

		String copReportPreviousNo = (String)attributes.get(
				"copReportPreviousNo");

		if (copReportPreviousNo != null) {
			setCopReportPreviousNo(copReportPreviousNo);
		}

		Date copReportPreviousDate = (Date)attributes.get(
				"copReportPreviousDate");

		if (copReportPreviousDate != null) {
			setCopReportPreviousDate(copReportPreviousDate);
		}

		String expiredStatus = (String)attributes.get("expiredStatus");

		if (expiredStatus != null) {
			setExpiredStatus(expiredStatus);
		}

		Long dossierId = (Long)attributes.get("dossierId");

		if (dossierId != null) {
			setDossierId(dossierId);
		}

		String dossierIdCTN = (String)attributes.get("dossierIdCTN");

		if (dossierIdCTN != null) {
			setDossierIdCTN(dossierIdCTN);
		}

		String dossierNo = (String)attributes.get("dossierNo");

		if (dossierNo != null) {
			setDossierNo(dossierNo);
		}

		String applicantEmail = (String)attributes.get("applicantEmail");

		if (applicantEmail != null) {
			setApplicantEmail(applicantEmail);
		}

		String applicantPhone = (String)attributes.get("applicantPhone");

		if (applicantPhone != null) {
			setApplicantPhone(applicantPhone);
		}

		String applicantTelNo = (String)attributes.get("applicantTelNo");

		if (applicantTelNo != null) {
			setApplicantTelNo(applicantTelNo);
		}

		String applicantFax = (String)attributes.get("applicantFax");

		if (applicantFax != null) {
			setApplicantFax(applicantFax);
		}

		String applicantContactName = (String)attributes.get(
				"applicantContactName");

		if (applicantContactName != null) {
			setApplicantContactName(applicantContactName);
		}

		String applicantContactEmail = (String)attributes.get(
				"applicantContactEmail");

		if (applicantContactEmail != null) {
			setApplicantContactEmail(applicantContactEmail);
		}

		String applicantContactPhone = (String)attributes.get(
				"applicantContactPhone");

		if (applicantContactPhone != null) {
			setApplicantContactPhone(applicantContactPhone);
		}

		String applicantContactTelNo = (String)attributes.get(
				"applicantContactTelNo");

		if (applicantContactTelNo != null) {
			setApplicantContactTelNo(applicantContactTelNo);
		}

		String applicantBusinessType = (String)attributes.get(
				"applicantBusinessType");

		if (applicantBusinessType != null) {
			setApplicantBusinessType(applicantBusinessType);
		}

		String markupDesigner = (String)attributes.get("markupDesigner");

		if (markupDesigner != null) {
			setMarkupDesigner(markupDesigner);
		}

		String markupOverseasManufacturer = (String)attributes.get(
				"markupOverseasManufacturer");

		if (markupOverseasManufacturer != null) {
			setMarkupOverseasManufacturer(markupOverseasManufacturer);
		}

		String markupMaintainer = (String)attributes.get("markupMaintainer");

		if (markupMaintainer != null) {
			setMarkupMaintainer(markupMaintainer);
		}

		String importerDomesticSite = (String)attributes.get(
				"importerDomesticSite");

		if (importerDomesticSite != null) {
			setImporterDomesticSite(importerDomesticSite);
		}

		String siteOfNationality = (String)attributes.get("siteOfNationality");

		if (siteOfNationality != null) {
			setSiteOfNationality(siteOfNationality);
		}

		String siteOfNationalityCode = (String)attributes.get(
				"siteOfNationalityCode");

		if (siteOfNationalityCode != null) {
			setSiteOfNationalityCode(siteOfNationalityCode);
		}

		String siteOfRegion = (String)attributes.get("siteOfRegion");

		if (siteOfRegion != null) {
			setSiteOfRegion(siteOfRegion);
		}

		String siteOfRegionCode = (String)attributes.get("siteOfRegionCode");

		if (siteOfRegionCode != null) {
			setSiteOfRegionCode(siteOfRegionCode);
		}

		String siteOfCity = (String)attributes.get("siteOfCity");

		if (siteOfCity != null) {
			setSiteOfCity(siteOfCity);
		}

		String siteOfCityCode = (String)attributes.get("siteOfCityCode");

		if (siteOfCityCode != null) {
			setSiteOfCityCode(siteOfCityCode);
		}

		String manufacturerRepresentative = (String)attributes.get(
				"manufacturerRepresentative");

		if (manufacturerRepresentative != null) {
			setManufacturerRepresentative(manufacturerRepresentative);
		}

		String manufacturerRepresentativeTitle = (String)attributes.get(
				"manufacturerRepresentativeTitle");

		if (manufacturerRepresentativeTitle != null) {
			setManufacturerRepresentativeTitle(manufacturerRepresentativeTitle);
		}

		String manufacturerEmail = (String)attributes.get("manufacturerEmail");

		if (manufacturerEmail != null) {
			setManufacturerEmail(manufacturerEmail);
		}

		String manufacturerPhone = (String)attributes.get("manufacturerPhone");

		if (manufacturerPhone != null) {
			setManufacturerPhone(manufacturerPhone);
		}

		String manufacturerFax = (String)attributes.get("manufacturerFax");

		if (manufacturerFax != null) {
			setManufacturerFax(manufacturerFax);
		}

		String productionPlantEmail = (String)attributes.get(
				"productionPlantEmail");

		if (productionPlantEmail != null) {
			setProductionPlantEmail(productionPlantEmail);
		}

		String productionPlantWebsite = (String)attributes.get(
				"productionPlantWebsite");

		if (productionPlantWebsite != null) {
			setProductionPlantWebsite(productionPlantWebsite);
		}

		String productionPlantRepresentative = (String)attributes.get(
				"productionPlantRepresentative");

		if (productionPlantRepresentative != null) {
			setProductionPlantRepresentative(productionPlantRepresentative);
		}

		String productionPlantRepresentativeTitle = (String)attributes.get(
				"productionPlantRepresentativeTitle");

		if (productionPlantRepresentativeTitle != null) {
			setProductionPlantRepresentativeTitle(productionPlantRepresentativeTitle);
		}

		String corporationName = (String)attributes.get("corporationName");

		if (corporationName != null) {
			setCorporationName(corporationName);
		}

		String inspectorContactCode = (String)attributes.get(
				"inspectorContactCode");

		if (inspectorContactCode != null) {
			setInspectorContactCode(inspectorContactCode);
		}

		String inspectorName = (String)attributes.get("inspectorName");

		if (inspectorName != null) {
			setInspectorName(inspectorName);
		}

		Date inspectoRendorSementDate = (Date)attributes.get(
				"inspectoRendorSementDate");

		if (inspectoRendorSementDate != null) {
			setInspectoRendorSementDate(inspectoRendorSementDate);
		}

		Date inspectorDeadline = (Date)attributes.get("inspectorDeadline");

		if (inspectorDeadline != null) {
			setInspectorDeadline(inspectorDeadline);
		}

		String resolvedStatus = (String)attributes.get("resolvedStatus");

		if (resolvedStatus != null) {
			setResolvedStatus(resolvedStatus);
		}

		Integer numberOfNonConformity = (Integer)attributes.get(
				"numberOfNonConformity");

		if (numberOfNonConformity != null) {
			setNumberOfNonConformity(numberOfNonConformity);
		}

		Integer numberOfResolved = (Integer)attributes.get("numberOfResolved");

		if (numberOfResolved != null) {
			setNumberOfResolved(numberOfResolved);
		}

		String observationDescription = (String)attributes.get(
				"observationDescription");

		if (observationDescription != null) {
			setObservationDescription(observationDescription);
		}

		String inspectionAuditCycle = (String)attributes.get(
				"inspectionAuditCycle");

		if (inspectionAuditCycle != null) {
			setInspectionAuditCycle(inspectionAuditCycle);
		}

		String inspectionNote = (String)attributes.get("inspectionNote");

		if (inspectionNote != null) {
			setInspectionNote(inspectionNote);
		}

		String productionConformityChecking = (String)attributes.get(
				"productionConformityChecking");

		if (productionConformityChecking != null) {
			setProductionConformityChecking(productionConformityChecking);
		}

		String productionStampChecking = (String)attributes.get(
				"productionStampChecking");

		if (productionStampChecking != null) {
			setProductionStampChecking(productionStampChecking);
		}

		String testingEquipmentChecking = (String)attributes.get(
				"testingEquipmentChecking");

		if (testingEquipmentChecking != null) {
			setTestingEquipmentChecking(testingEquipmentChecking);
		}

		String productionPlantClassification = (String)attributes.get(
				"productionPlantClassification");

		if (productionPlantClassification != null) {
			setProductionPlantClassification(productionPlantClassification);
		}

		String actualCapacity = (String)attributes.get("actualCapacity");

		if (actualCapacity != null) {
			setActualCapacity(actualCapacity);
		}

		String maxCapacity = (String)attributes.get("maxCapacity");

		if (maxCapacity != null) {
			setMaxCapacity(maxCapacity);
		}

		String averageCapacity = (String)attributes.get("averageCapacity");

		if (averageCapacity != null) {
			setAverageCapacity(averageCapacity);
		}

		String totalEmployee = (String)attributes.get("totalEmployee");

		if (totalEmployee != null) {
			setTotalEmployee(totalEmployee);
		}

		String totalWorker = (String)attributes.get("totalWorker");

		if (totalWorker != null) {
			setTotalWorker(totalWorker);
		}

		String totalManager = (String)attributes.get("totalManager");

		if (totalManager != null) {
			setTotalManager(totalManager);
		}

		String totalTechnical = (String)attributes.get("totalTechnical");

		if (totalTechnical != null) {
			setTotalTechnical(totalTechnical);
		}

		String totalQaEmployee = (String)attributes.get("totalQaEmployee");

		if (totalQaEmployee != null) {
			setTotalQaEmployee(totalQaEmployee);
		}

		String totalSquareMeter = (String)attributes.get("totalSquareMeter");

		if (totalSquareMeter != null) {
			setTotalSquareMeter(totalSquareMeter);
		}

		String wareHouseSquare = (String)attributes.get("wareHouseSquare");

		if (wareHouseSquare != null) {
			setWareHouseSquare(wareHouseSquare);
		}

		String officeSquare = (String)attributes.get("officeSquare");

		if (officeSquare != null) {
			setOfficeSquare(officeSquare);
		}

		String productionSquare = (String)attributes.get("productionSquare");

		if (productionSquare != null) {
			setProductionSquare(productionSquare);
		}

		String machiningArea = (String)attributes.get("machiningArea");

		if (machiningArea != null) {
			setMachiningArea(machiningArea);
		}

		String weldingArea = (String)attributes.get("weldingArea");

		if (weldingArea != null) {
			setWeldingArea(weldingArea);
		}

		String paintingArea = (String)attributes.get("paintingArea");

		if (paintingArea != null) {
			setPaintingArea(paintingArea);
		}

		String productionAssembleArea = (String)attributes.get(
				"productionAssembleArea");

		if (productionAssembleArea != null) {
			setProductionAssembleArea(productionAssembleArea);
		}

		String finishProductArea = (String)attributes.get("finishProductArea");

		if (finishProductArea != null) {
			setFinishProductArea(finishProductArea);
		}

		String testingArea = (String)attributes.get("testingArea");

		if (testingArea != null) {
			setTestingArea(testingArea);
		}

		String selfEquipment = (String)attributes.get("selfEquipment");

		if (selfEquipment != null) {
			setSelfEquipment(selfEquipment);
		}

		String contractEquipment = (String)attributes.get("contractEquipment");

		if (contractEquipment != null) {
			setContractEquipment(contractEquipment);
		}

		String circularNo = (String)attributes.get("circularNo");

		if (circularNo != null) {
			setCircularNo(circularNo);
		}

		Date circularDate = (Date)attributes.get("circularDate");

		if (circularDate != null) {
			setCircularDate(circularDate);
		}

		String circularNo2 = (String)attributes.get("circularNo2");

		if (circularNo2 != null) {
			setCircularNo2(circularNo2);
		}

		Date circularDate2 = (Date)attributes.get("circularDate2");

		if (circularDate2 != null) {
			setCircularDate2(circularDate2);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getMtCore() {
		return _mtCore;
	}

	@Override
	public void setMtCore(long mtCore) {
		_columnBitmask |= MTCORE_COLUMN_BITMASK;

		if (!_setOriginalMtCore) {
			_setOriginalMtCore = true;

			_originalMtCore = _mtCore;
		}

		_mtCore = mtCore;
	}

	public long getOriginalMtCore() {
		return _originalMtCore;
	}

	@Override
	public long getApplicantProfileId() {
		return _applicantProfileId;
	}

	@Override
	public void setApplicantProfileId(long applicantProfileId) {
		_columnBitmask |= APPLICANTPROFILEID_COLUMN_BITMASK;

		if (!_setOriginalApplicantProfileId) {
			_setOriginalApplicantProfileId = true;

			_originalApplicantProfileId = _applicantProfileId;
		}

		_applicantProfileId = applicantProfileId;
	}

	public long getOriginalApplicantProfileId() {
		return _originalApplicantProfileId;
	}

	@Override
	public String getApplicantCode() {
		if (_applicantCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantCode;
		}
	}

	@Override
	public void setApplicantCode(String applicantCode) {
		_applicantCode = applicantCode;
	}

	@Override
	public String getApplicantName() {
		if (_applicantName == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantName;
		}
	}

	@Override
	public void setApplicantName(String applicantName) {
		_applicantName = applicantName;
	}

	@Override
	public String getApplicantAddress() {
		if (_applicantAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantAddress;
		}
	}

	@Override
	public void setApplicantAddress(String applicantAddress) {
		_applicantAddress = applicantAddress;
	}

	@Override
	public String getOverseasManufacturerCode() {
		if (_overseasManufacturerCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _overseasManufacturerCode;
		}
	}

	@Override
	public void setOverseasManufacturerCode(String overseasManufacturerCode) {
		_overseasManufacturerCode = overseasManufacturerCode;
	}

	@Override
	public String getOverseasManufacturerName() {
		if (_overseasManufacturerName == null) {
			return StringPool.BLANK;
		}
		else {
			return _overseasManufacturerName;
		}
	}

	@Override
	public void setOverseasManufacturerName(String overseasManufacturerName) {
		_overseasManufacturerName = overseasManufacturerName;
	}

	@Override
	public String getOverseasManufacturerAddress() {
		if (_overseasManufacturerAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _overseasManufacturerAddress;
		}
	}

	@Override
	public void setOverseasManufacturerAddress(
		String overseasManufacturerAddress) {
		_overseasManufacturerAddress = overseasManufacturerAddress;
	}

	@Override
	public long getProductionPlantId() {
		return _productionPlantId;
	}

	@Override
	public void setProductionPlantId(long productionPlantId) {
		_productionPlantId = productionPlantId;
	}

	@Override
	public String getProductionPlantCode() {
		if (_productionPlantCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionPlantCode;
		}
	}

	@Override
	public void setProductionPlantCode(String productionPlantCode) {
		_columnBitmask |= PRODUCTIONPLANTCODE_COLUMN_BITMASK;

		if (_originalProductionPlantCode == null) {
			_originalProductionPlantCode = _productionPlantCode;
		}

		_productionPlantCode = productionPlantCode;
	}

	public String getOriginalProductionPlantCode() {
		return GetterUtil.getString(_originalProductionPlantCode);
	}

	@Override
	public String getProductionPlantName() {
		if (_productionPlantName == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionPlantName;
		}
	}

	@Override
	public void setProductionPlantName(String productionPlantName) {
		_columnBitmask |= PRODUCTIONPLANTNAME_COLUMN_BITMASK;

		if (_originalProductionPlantName == null) {
			_originalProductionPlantName = _productionPlantName;
		}

		_productionPlantName = productionPlantName;
	}

	public String getOriginalProductionPlantName() {
		return GetterUtil.getString(_originalProductionPlantName);
	}

	@Override
	public String getProductionPlantAddress() {
		if (_productionPlantAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionPlantAddress;
		}
	}

	@Override
	public void setProductionPlantAddress(String productionPlantAddress) {
		_columnBitmask |= PRODUCTIONPLANTADDRESS_COLUMN_BITMASK;

		if (_originalProductionPlantAddress == null) {
			_originalProductionPlantAddress = _productionPlantAddress;
		}

		_productionPlantAddress = productionPlantAddress;
	}

	public String getOriginalProductionPlantAddress() {
		return GetterUtil.getString(_originalProductionPlantAddress);
	}

	@Override
	public String getCopReportNo() {
		if (_copReportNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _copReportNo;
		}
	}

	@Override
	public void setCopReportNo(String copReportNo) {
		_columnBitmask |= COPREPORTNO_COLUMN_BITMASK;

		if (_originalCopReportNo == null) {
			_originalCopReportNo = _copReportNo;
		}

		_copReportNo = copReportNo;
	}

	public String getOriginalCopReportNo() {
		return GetterUtil.getString(_originalCopReportNo);
	}

	@Override
	public String getCopReportStatus() {
		if (_copReportStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _copReportStatus;
		}
	}

	@Override
	public void setCopReportStatus(String copReportStatus) {
		_columnBitmask |= COPREPORTSTATUS_COLUMN_BITMASK;

		if (_originalCopReportStatus == null) {
			_originalCopReportStatus = _copReportStatus;
		}

		_copReportStatus = copReportStatus;
	}

	public String getOriginalCopReportStatus() {
		return GetterUtil.getString(_originalCopReportStatus);
	}

	@Override
	public String getCopReportType() {
		if (_copReportType == null) {
			return StringPool.BLANK;
		}
		else {
			return _copReportType;
		}
	}

	@Override
	public void setCopReportType(String copReportType) {
		_copReportType = copReportType;
	}

	@Override
	public String getCopReportMetadata() {
		if (_copReportMetadata == null) {
			return StringPool.BLANK;
		}
		else {
			return _copReportMetadata;
		}
	}

	@Override
	public void setCopReportMetadata(String copReportMetadata) {
		_copReportMetadata = copReportMetadata;
	}

	@Override
	public String getCopReportSignName() {
		if (_copReportSignName == null) {
			return StringPool.BLANK;
		}
		else {
			return _copReportSignName;
		}
	}

	@Override
	public void setCopReportSignName(String copReportSignName) {
		_copReportSignName = copReportSignName;
	}

	@Override
	public String getCopReportSignTitle() {
		if (_copReportSignTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _copReportSignTitle;
		}
	}

	@Override
	public void setCopReportSignTitle(String copReportSignTitle) {
		_copReportSignTitle = copReportSignTitle;
	}

	@Override
	public String getCopReportSignPlace() {
		if (_copReportSignPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _copReportSignPlace;
		}
	}

	@Override
	public void setCopReportSignPlace(String copReportSignPlace) {
		_copReportSignPlace = copReportSignPlace;
	}

	@Override
	public Date getCopReportDate() {
		return _copReportDate;
	}

	@Override
	public void setCopReportDate(Date copReportDate) {
		_copReportDate = copReportDate;
	}

	@Override
	public Date getCopReportApprovedDate() {
		return _copReportApprovedDate;
	}

	@Override
	public void setCopReportApprovedDate(Date copReportApprovedDate) {
		_copReportApprovedDate = copReportApprovedDate;
	}

	@Override
	public Date getCopReportExpiredDate() {
		return _copReportExpiredDate;
	}

	@Override
	public void setCopReportExpiredDate(Date copReportExpiredDate) {
		_copReportExpiredDate = copReportExpiredDate;
	}

	@Override
	public long getCOPFileEntryId() {
		return _COPFileEntryId;
	}

	@Override
	public void setCOPFileEntryId(long COPFileEntryId) {
		_COPFileEntryId = COPFileEntryId;
	}

	@Override
	public Date getModifyDate() {
		return _modifyDate;
	}

	@Override
	public void setModifyDate(Date modifyDate) {
		_columnBitmask = -1L;

		_modifyDate = modifyDate;
	}

	@Override
	public Date getSyncDate() {
		return _syncDate;
	}

	@Override
	public void setSyncDate(Date syncDate) {
		_syncDate = syncDate;
	}

	@Override
	public String getImporterManufacturerCode() {
		if (_importerManufacturerCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _importerManufacturerCode;
		}
	}

	@Override
	public void setImporterManufacturerCode(String importerManufacturerCode) {
		_importerManufacturerCode = importerManufacturerCode;
	}

	@Override
	public String getImporterManufacturerName() {
		if (_importerManufacturerName == null) {
			return StringPool.BLANK;
		}
		else {
			return _importerManufacturerName;
		}
	}

	@Override
	public void setImporterManufacturerName(String importerManufacturerName) {
		_importerManufacturerName = importerManufacturerName;
	}

	@Override
	public String getImporterManufacturerAddress() {
		if (_importerManufacturerAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _importerManufacturerAddress;
		}
	}

	@Override
	public void setImporterManufacturerAddress(
		String importerManufacturerAddress) {
		_importerManufacturerAddress = importerManufacturerAddress;
	}

	@Override
	public String getMarkupDomesticsManufacturer() {
		if (_markupDomesticsManufacturer == null) {
			return StringPool.BLANK;
		}
		else {
			return _markupDomesticsManufacturer;
		}
	}

	@Override
	public void setMarkupDomesticsManufacturer(
		String markupDomesticsManufacturer) {
		_markupDomesticsManufacturer = markupDomesticsManufacturer;
	}

	@Override
	public String getMarkupImporter() {
		if (_markupImporter == null) {
			return StringPool.BLANK;
		}
		else {
			return _markupImporter;
		}
	}

	@Override
	public void setMarkupImporter(String markupImporter) {
		_markupImporter = markupImporter;
	}

	@Override
	public String getCopClassification() {
		if (_copClassification == null) {
			return StringPool.BLANK;
		}
		else {
			return _copClassification;
		}
	}

	@Override
	public void setCopClassification(String copClassification) {
		_columnBitmask |= COPCLASSIFICATION_COLUMN_BITMASK;

		if (_originalCopClassification == null) {
			_originalCopClassification = _copClassification;
		}

		_copClassification = copClassification;
	}

	public String getOriginalCopClassification() {
		return GetterUtil.getString(_originalCopClassification);
	}

	@Override
	public String getProductClassificationDescription() {
		if (_productClassificationDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _productClassificationDescription;
		}
	}

	@Override
	public void setProductClassificationDescription(
		String productClassificationDescription) {
		_productClassificationDescription = productClassificationDescription;
	}

	@Override
	public int getTotalPointA() {
		return _totalPointA;
	}

	@Override
	public void setTotalPointA(int totalPointA) {
		_totalPointA = totalPointA;
	}

	@Override
	public int getTotalPointB() {
		return _totalPointB;
	}

	@Override
	public void setTotalPointB(int totalPointB) {
		_totalPointB = totalPointB;
	}

	@Override
	public int getTotalPointC() {
		return _totalPointC;
	}

	@Override
	public void setTotalPointC(int totalPointC) {
		_totalPointC = totalPointC;
	}

	@Override
	public String getCopNonConformity() {
		if (_copNonConformity == null) {
			return StringPool.BLANK;
		}
		else {
			return _copNonConformity;
		}
	}

	@Override
	public void setCopNonConformity(String copNonConformity) {
		_copNonConformity = copNonConformity;
	}

	@Override
	public String getInspectionRecordNo() {
		if (_inspectionRecordNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectionRecordNo;
		}
	}

	@Override
	public void setInspectionRecordNo(String inspectionRecordNo) {
		_inspectionRecordNo = inspectionRecordNo;
	}

	@Override
	public Date getInspectionRecordDate() {
		return _inspectionRecordDate;
	}

	@Override
	public void setInspectionRecordDate(Date inspectionRecordDate) {
		_inspectionRecordDate = inspectionRecordDate;
	}

	@Override
	public long getCorporationId() {
		return _corporationId;
	}

	@Override
	public void setCorporationId(long corporationId) {
		_corporationId = corporationId;
	}

	@Override
	public long getInspectorId() {
		return _inspectorId;
	}

	@Override
	public void setInspectorId(long inspectorId) {
		_inspectorId = inspectorId;
	}

	@Override
	public String getInspectionSite() {
		if (_inspectionSite == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectionSite;
		}
	}

	@Override
	public void setInspectionSite(String inspectionSite) {
		_inspectionSite = inspectionSite;
	}

	@Override
	public Date getInspectionDateFrom() {
		return _inspectionDateFrom;
	}

	@Override
	public void setInspectionDateFrom(Date inspectionDateFrom) {
		_inspectionDateFrom = inspectionDateFrom;
	}

	@Override
	public Date getInspectionDateTo() {
		return _inspectionDateTo;
	}

	@Override
	public void setInspectionDateTo(Date inspectionDateTo) {
		_inspectionDateTo = inspectionDateTo;
	}

	@Override
	public String getSubInspector() {
		if (_subInspector == null) {
			return StringPool.BLANK;
		}
		else {
			return _subInspector;
		}
	}

	@Override
	public void setSubInspector(String subInspector) {
		_subInspector = subInspector;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public String getApplicantRepresentative() {
		if (_applicantRepresentative == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantRepresentative;
		}
	}

	@Override
	public void setApplicantRepresentative(String applicantRepresentative) {
		_applicantRepresentative = applicantRepresentative;
	}

	@Override
	public String getApplicantRepresentativeTitle() {
		if (_applicantRepresentativeTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantRepresentativeTitle;
		}
	}

	@Override
	public void setApplicantRepresentativeTitle(
		String applicantRepresentativeTitle) {
		_applicantRepresentativeTitle = applicantRepresentativeTitle;
	}

	@Override
	public long getInspectionRecordFileEntryId() {
		return _inspectionRecordFileEntryId;
	}

	@Override
	public void setInspectionRecordFileEntryId(long inspectionRecordFileEntryId) {
		_inspectionRecordFileEntryId = inspectionRecordFileEntryId;
	}

	@Override
	public String getCopReportRefNo() {
		if (_copReportRefNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _copReportRefNo;
		}
	}

	@Override
	public void setCopReportRefNo(String copReportRefNo) {
		_copReportRefNo = copReportRefNo;
	}

	@Override
	public Date getCopReportRefDate() {
		return _copReportRefDate;
	}

	@Override
	public void setCopReportRefDate(Date copReportRefDate) {
		_copReportRefDate = copReportRefDate;
	}

	@Override
	public String getCopReportPreviousNo() {
		if (_copReportPreviousNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _copReportPreviousNo;
		}
	}

	@Override
	public void setCopReportPreviousNo(String copReportPreviousNo) {
		_copReportPreviousNo = copReportPreviousNo;
	}

	@Override
	public Date getCopReportPreviousDate() {
		return _copReportPreviousDate;
	}

	@Override
	public void setCopReportPreviousDate(Date copReportPreviousDate) {
		_copReportPreviousDate = copReportPreviousDate;
	}

	@Override
	public String getExpiredStatus() {
		if (_expiredStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _expiredStatus;
		}
	}

	@Override
	public void setExpiredStatus(String expiredStatus) {
		_expiredStatus = expiredStatus;
	}

	@Override
	public long getDossierId() {
		return _dossierId;
	}

	@Override
	public void setDossierId(long dossierId) {
		_columnBitmask |= DOSSIERID_COLUMN_BITMASK;

		if (!_setOriginalDossierId) {
			_setOriginalDossierId = true;

			_originalDossierId = _dossierId;
		}

		_dossierId = dossierId;
	}

	public long getOriginalDossierId() {
		return _originalDossierId;
	}

	@Override
	public String getDossierIdCTN() {
		if (_dossierIdCTN == null) {
			return StringPool.BLANK;
		}
		else {
			return _dossierIdCTN;
		}
	}

	@Override
	public void setDossierIdCTN(String dossierIdCTN) {
		_dossierIdCTN = dossierIdCTN;
	}

	@Override
	public String getDossierNo() {
		if (_dossierNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _dossierNo;
		}
	}

	@Override
	public void setDossierNo(String dossierNo) {
		_dossierNo = dossierNo;
	}

	@Override
	public String getApplicantEmail() {
		if (_applicantEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantEmail;
		}
	}

	@Override
	public void setApplicantEmail(String applicantEmail) {
		_applicantEmail = applicantEmail;
	}

	@Override
	public String getApplicantPhone() {
		if (_applicantPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantPhone;
		}
	}

	@Override
	public void setApplicantPhone(String applicantPhone) {
		_applicantPhone = applicantPhone;
	}

	@Override
	public String getApplicantTelNo() {
		if (_applicantTelNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantTelNo;
		}
	}

	@Override
	public void setApplicantTelNo(String applicantTelNo) {
		_applicantTelNo = applicantTelNo;
	}

	@Override
	public String getApplicantFax() {
		if (_applicantFax == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantFax;
		}
	}

	@Override
	public void setApplicantFax(String applicantFax) {
		_applicantFax = applicantFax;
	}

	@Override
	public String getApplicantContactName() {
		if (_applicantContactName == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantContactName;
		}
	}

	@Override
	public void setApplicantContactName(String applicantContactName) {
		_applicantContactName = applicantContactName;
	}

	@Override
	public String getApplicantContactEmail() {
		if (_applicantContactEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantContactEmail;
		}
	}

	@Override
	public void setApplicantContactEmail(String applicantContactEmail) {
		_applicantContactEmail = applicantContactEmail;
	}

	@Override
	public String getApplicantContactPhone() {
		if (_applicantContactPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantContactPhone;
		}
	}

	@Override
	public void setApplicantContactPhone(String applicantContactPhone) {
		_applicantContactPhone = applicantContactPhone;
	}

	@Override
	public String getApplicantContactTelNo() {
		if (_applicantContactTelNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantContactTelNo;
		}
	}

	@Override
	public void setApplicantContactTelNo(String applicantContactTelNo) {
		_applicantContactTelNo = applicantContactTelNo;
	}

	@Override
	public String getApplicantBusinessType() {
		if (_applicantBusinessType == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantBusinessType;
		}
	}

	@Override
	public void setApplicantBusinessType(String applicantBusinessType) {
		_applicantBusinessType = applicantBusinessType;
	}

	@Override
	public String getMarkupDesigner() {
		if (_markupDesigner == null) {
			return StringPool.BLANK;
		}
		else {
			return _markupDesigner;
		}
	}

	@Override
	public void setMarkupDesigner(String markupDesigner) {
		_markupDesigner = markupDesigner;
	}

	@Override
	public String getMarkupOverseasManufacturer() {
		if (_markupOverseasManufacturer == null) {
			return StringPool.BLANK;
		}
		else {
			return _markupOverseasManufacturer;
		}
	}

	@Override
	public void setMarkupOverseasManufacturer(String markupOverseasManufacturer) {
		_markupOverseasManufacturer = markupOverseasManufacturer;
	}

	@Override
	public String getMarkupMaintainer() {
		if (_markupMaintainer == null) {
			return StringPool.BLANK;
		}
		else {
			return _markupMaintainer;
		}
	}

	@Override
	public void setMarkupMaintainer(String markupMaintainer) {
		_markupMaintainer = markupMaintainer;
	}

	@Override
	public String getImporterDomesticSite() {
		if (_importerDomesticSite == null) {
			return StringPool.BLANK;
		}
		else {
			return _importerDomesticSite;
		}
	}

	@Override
	public void setImporterDomesticSite(String importerDomesticSite) {
		_importerDomesticSite = importerDomesticSite;
	}

	@Override
	public String getSiteOfNationality() {
		if (_siteOfNationality == null) {
			return StringPool.BLANK;
		}
		else {
			return _siteOfNationality;
		}
	}

	@Override
	public void setSiteOfNationality(String siteOfNationality) {
		_siteOfNationality = siteOfNationality;
	}

	@Override
	public String getSiteOfNationalityCode() {
		if (_siteOfNationalityCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _siteOfNationalityCode;
		}
	}

	@Override
	public void setSiteOfNationalityCode(String siteOfNationalityCode) {
		_siteOfNationalityCode = siteOfNationalityCode;
	}

	@Override
	public String getSiteOfRegion() {
		if (_siteOfRegion == null) {
			return StringPool.BLANK;
		}
		else {
			return _siteOfRegion;
		}
	}

	@Override
	public void setSiteOfRegion(String siteOfRegion) {
		_siteOfRegion = siteOfRegion;
	}

	@Override
	public String getSiteOfRegionCode() {
		if (_siteOfRegionCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _siteOfRegionCode;
		}
	}

	@Override
	public void setSiteOfRegionCode(String siteOfRegionCode) {
		_siteOfRegionCode = siteOfRegionCode;
	}

	@Override
	public String getSiteOfCity() {
		if (_siteOfCity == null) {
			return StringPool.BLANK;
		}
		else {
			return _siteOfCity;
		}
	}

	@Override
	public void setSiteOfCity(String siteOfCity) {
		_siteOfCity = siteOfCity;
	}

	@Override
	public String getSiteOfCityCode() {
		if (_siteOfCityCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _siteOfCityCode;
		}
	}

	@Override
	public void setSiteOfCityCode(String siteOfCityCode) {
		_siteOfCityCode = siteOfCityCode;
	}

	@Override
	public String getManufacturerRepresentative() {
		if (_manufacturerRepresentative == null) {
			return StringPool.BLANK;
		}
		else {
			return _manufacturerRepresentative;
		}
	}

	@Override
	public void setManufacturerRepresentative(String manufacturerRepresentative) {
		_manufacturerRepresentative = manufacturerRepresentative;
	}

	@Override
	public String getManufacturerRepresentativeTitle() {
		if (_manufacturerRepresentativeTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _manufacturerRepresentativeTitle;
		}
	}

	@Override
	public void setManufacturerRepresentativeTitle(
		String manufacturerRepresentativeTitle) {
		_manufacturerRepresentativeTitle = manufacturerRepresentativeTitle;
	}

	@Override
	public String getManufacturerEmail() {
		if (_manufacturerEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _manufacturerEmail;
		}
	}

	@Override
	public void setManufacturerEmail(String manufacturerEmail) {
		_manufacturerEmail = manufacturerEmail;
	}

	@Override
	public String getManufacturerPhone() {
		if (_manufacturerPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _manufacturerPhone;
		}
	}

	@Override
	public void setManufacturerPhone(String manufacturerPhone) {
		_manufacturerPhone = manufacturerPhone;
	}

	@Override
	public String getManufacturerFax() {
		if (_manufacturerFax == null) {
			return StringPool.BLANK;
		}
		else {
			return _manufacturerFax;
		}
	}

	@Override
	public void setManufacturerFax(String manufacturerFax) {
		_manufacturerFax = manufacturerFax;
	}

	@Override
	public String getProductionPlantEmail() {
		if (_productionPlantEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionPlantEmail;
		}
	}

	@Override
	public void setProductionPlantEmail(String productionPlantEmail) {
		_productionPlantEmail = productionPlantEmail;
	}

	@Override
	public String getProductionPlantWebsite() {
		if (_productionPlantWebsite == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionPlantWebsite;
		}
	}

	@Override
	public void setProductionPlantWebsite(String productionPlantWebsite) {
		_productionPlantWebsite = productionPlantWebsite;
	}

	@Override
	public String getProductionPlantRepresentative() {
		if (_productionPlantRepresentative == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionPlantRepresentative;
		}
	}

	@Override
	public void setProductionPlantRepresentative(
		String productionPlantRepresentative) {
		_productionPlantRepresentative = productionPlantRepresentative;
	}

	@Override
	public String getProductionPlantRepresentativeTitle() {
		if (_productionPlantRepresentativeTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionPlantRepresentativeTitle;
		}
	}

	@Override
	public void setProductionPlantRepresentativeTitle(
		String productionPlantRepresentativeTitle) {
		_productionPlantRepresentativeTitle = productionPlantRepresentativeTitle;
	}

	@Override
	public String getCorporationName() {
		if (_corporationName == null) {
			return StringPool.BLANK;
		}
		else {
			return _corporationName;
		}
	}

	@Override
	public void setCorporationName(String corporationName) {
		_corporationName = corporationName;
	}

	@Override
	public String getInspectorContactCode() {
		if (_inspectorContactCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectorContactCode;
		}
	}

	@Override
	public void setInspectorContactCode(String inspectorContactCode) {
		_inspectorContactCode = inspectorContactCode;
	}

	@Override
	public String getInspectorName() {
		if (_inspectorName == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectorName;
		}
	}

	@Override
	public void setInspectorName(String inspectorName) {
		_inspectorName = inspectorName;
	}

	@Override
	public Date getInspectoRendorSementDate() {
		return _inspectoRendorSementDate;
	}

	@Override
	public void setInspectoRendorSementDate(Date inspectoRendorSementDate) {
		_inspectoRendorSementDate = inspectoRendorSementDate;
	}

	@Override
	public Date getInspectorDeadline() {
		return _inspectorDeadline;
	}

	@Override
	public void setInspectorDeadline(Date inspectorDeadline) {
		_inspectorDeadline = inspectorDeadline;
	}

	@Override
	public String getResolvedStatus() {
		if (_resolvedStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _resolvedStatus;
		}
	}

	@Override
	public void setResolvedStatus(String resolvedStatus) {
		_resolvedStatus = resolvedStatus;
	}

	@Override
	public int getNumberOfNonConformity() {
		return _numberOfNonConformity;
	}

	@Override
	public void setNumberOfNonConformity(int numberOfNonConformity) {
		_numberOfNonConformity = numberOfNonConformity;
	}

	@Override
	public int getNumberOfResolved() {
		return _numberOfResolved;
	}

	@Override
	public void setNumberOfResolved(int numberOfResolved) {
		_numberOfResolved = numberOfResolved;
	}

	@Override
	public String getObservationDescription() {
		if (_observationDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _observationDescription;
		}
	}

	@Override
	public void setObservationDescription(String observationDescription) {
		_observationDescription = observationDescription;
	}

	@Override
	public String getInspectionAuditCycle() {
		if (_inspectionAuditCycle == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectionAuditCycle;
		}
	}

	@Override
	public void setInspectionAuditCycle(String inspectionAuditCycle) {
		_inspectionAuditCycle = inspectionAuditCycle;
	}

	@Override
	public String getInspectionNote() {
		if (_inspectionNote == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectionNote;
		}
	}

	@Override
	public void setInspectionNote(String inspectionNote) {
		_inspectionNote = inspectionNote;
	}

	@Override
	public String getProductionConformityChecking() {
		if (_productionConformityChecking == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionConformityChecking;
		}
	}

	@Override
	public void setProductionConformityChecking(
		String productionConformityChecking) {
		_productionConformityChecking = productionConformityChecking;
	}

	@Override
	public String getProductionStampChecking() {
		if (_productionStampChecking == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionStampChecking;
		}
	}

	@Override
	public void setProductionStampChecking(String productionStampChecking) {
		_productionStampChecking = productionStampChecking;
	}

	@Override
	public String getTestingEquipmentChecking() {
		if (_testingEquipmentChecking == null) {
			return StringPool.BLANK;
		}
		else {
			return _testingEquipmentChecking;
		}
	}

	@Override
	public void setTestingEquipmentChecking(String testingEquipmentChecking) {
		_testingEquipmentChecking = testingEquipmentChecking;
	}

	@Override
	public String getProductionPlantClassification() {
		if (_productionPlantClassification == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionPlantClassification;
		}
	}

	@Override
	public void setProductionPlantClassification(
		String productionPlantClassification) {
		_productionPlantClassification = productionPlantClassification;
	}

	@Override
	public String getActualCapacity() {
		if (_actualCapacity == null) {
			return StringPool.BLANK;
		}
		else {
			return _actualCapacity;
		}
	}

	@Override
	public void setActualCapacity(String actualCapacity) {
		_actualCapacity = actualCapacity;
	}

	@Override
	public String getMaxCapacity() {
		if (_maxCapacity == null) {
			return StringPool.BLANK;
		}
		else {
			return _maxCapacity;
		}
	}

	@Override
	public void setMaxCapacity(String maxCapacity) {
		_maxCapacity = maxCapacity;
	}

	@Override
	public String getAverageCapacity() {
		if (_averageCapacity == null) {
			return StringPool.BLANK;
		}
		else {
			return _averageCapacity;
		}
	}

	@Override
	public void setAverageCapacity(String averageCapacity) {
		_averageCapacity = averageCapacity;
	}

	@Override
	public String getTotalEmployee() {
		if (_totalEmployee == null) {
			return StringPool.BLANK;
		}
		else {
			return _totalEmployee;
		}
	}

	@Override
	public void setTotalEmployee(String totalEmployee) {
		_totalEmployee = totalEmployee;
	}

	@Override
	public String getTotalWorker() {
		if (_totalWorker == null) {
			return StringPool.BLANK;
		}
		else {
			return _totalWorker;
		}
	}

	@Override
	public void setTotalWorker(String totalWorker) {
		_totalWorker = totalWorker;
	}

	@Override
	public String getTotalManager() {
		if (_totalManager == null) {
			return StringPool.BLANK;
		}
		else {
			return _totalManager;
		}
	}

	@Override
	public void setTotalManager(String totalManager) {
		_totalManager = totalManager;
	}

	@Override
	public String getTotalTechnical() {
		if (_totalTechnical == null) {
			return StringPool.BLANK;
		}
		else {
			return _totalTechnical;
		}
	}

	@Override
	public void setTotalTechnical(String totalTechnical) {
		_totalTechnical = totalTechnical;
	}

	@Override
	public String getTotalQaEmployee() {
		if (_totalQaEmployee == null) {
			return StringPool.BLANK;
		}
		else {
			return _totalQaEmployee;
		}
	}

	@Override
	public void setTotalQaEmployee(String totalQaEmployee) {
		_totalQaEmployee = totalQaEmployee;
	}

	@Override
	public String getTotalSquareMeter() {
		if (_totalSquareMeter == null) {
			return StringPool.BLANK;
		}
		else {
			return _totalSquareMeter;
		}
	}

	@Override
	public void setTotalSquareMeter(String totalSquareMeter) {
		_totalSquareMeter = totalSquareMeter;
	}

	@Override
	public String getWareHouseSquare() {
		if (_wareHouseSquare == null) {
			return StringPool.BLANK;
		}
		else {
			return _wareHouseSquare;
		}
	}

	@Override
	public void setWareHouseSquare(String wareHouseSquare) {
		_wareHouseSquare = wareHouseSquare;
	}

	@Override
	public String getOfficeSquare() {
		if (_officeSquare == null) {
			return StringPool.BLANK;
		}
		else {
			return _officeSquare;
		}
	}

	@Override
	public void setOfficeSquare(String officeSquare) {
		_officeSquare = officeSquare;
	}

	@Override
	public String getProductionSquare() {
		if (_productionSquare == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionSquare;
		}
	}

	@Override
	public void setProductionSquare(String productionSquare) {
		_productionSquare = productionSquare;
	}

	@Override
	public String getMachiningArea() {
		if (_machiningArea == null) {
			return StringPool.BLANK;
		}
		else {
			return _machiningArea;
		}
	}

	@Override
	public void setMachiningArea(String machiningArea) {
		_machiningArea = machiningArea;
	}

	@Override
	public String getWeldingArea() {
		if (_weldingArea == null) {
			return StringPool.BLANK;
		}
		else {
			return _weldingArea;
		}
	}

	@Override
	public void setWeldingArea(String weldingArea) {
		_weldingArea = weldingArea;
	}

	@Override
	public String getPaintingArea() {
		if (_paintingArea == null) {
			return StringPool.BLANK;
		}
		else {
			return _paintingArea;
		}
	}

	@Override
	public void setPaintingArea(String paintingArea) {
		_paintingArea = paintingArea;
	}

	@Override
	public String getProductionAssembleArea() {
		if (_productionAssembleArea == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionAssembleArea;
		}
	}

	@Override
	public void setProductionAssembleArea(String productionAssembleArea) {
		_productionAssembleArea = productionAssembleArea;
	}

	@Override
	public String getFinishProductArea() {
		if (_finishProductArea == null) {
			return StringPool.BLANK;
		}
		else {
			return _finishProductArea;
		}
	}

	@Override
	public void setFinishProductArea(String finishProductArea) {
		_finishProductArea = finishProductArea;
	}

	@Override
	public String getTestingArea() {
		if (_testingArea == null) {
			return StringPool.BLANK;
		}
		else {
			return _testingArea;
		}
	}

	@Override
	public void setTestingArea(String testingArea) {
		_testingArea = testingArea;
	}

	@Override
	public String getSelfEquipment() {
		if (_selfEquipment == null) {
			return StringPool.BLANK;
		}
		else {
			return _selfEquipment;
		}
	}

	@Override
	public void setSelfEquipment(String selfEquipment) {
		_selfEquipment = selfEquipment;
	}

	@Override
	public String getContractEquipment() {
		if (_contractEquipment == null) {
			return StringPool.BLANK;
		}
		else {
			return _contractEquipment;
		}
	}

	@Override
	public void setContractEquipment(String contractEquipment) {
		_contractEquipment = contractEquipment;
	}

	@Override
	public String getCircularNo() {
		if (_circularNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _circularNo;
		}
	}

	@Override
	public void setCircularNo(String circularNo) {
		_circularNo = circularNo;
	}

	@Override
	public Date getCircularDate() {
		return _circularDate;
	}

	@Override
	public void setCircularDate(Date circularDate) {
		_circularDate = circularDate;
	}

	@Override
	public String getCircularNo2() {
		if (_circularNo2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _circularNo2;
		}
	}

	@Override
	public void setCircularNo2(String circularNo2) {
		_circularNo2 = circularNo2;
	}

	@Override
	public Date getCircularDate2() {
		return _circularDate2;
	}

	@Override
	public void setCircularDate2(Date circularDate2) {
		_circularDate2 = circularDate2;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VRCOPReportRepository.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VRCOPReportRepository toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VRCOPReportRepository)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VRCOPReportRepositoryImpl vrcopReportRepositoryImpl = new VRCOPReportRepositoryImpl();

		vrcopReportRepositoryImpl.setId(getId());
		vrcopReportRepositoryImpl.setMtCore(getMtCore());
		vrcopReportRepositoryImpl.setApplicantProfileId(getApplicantProfileId());
		vrcopReportRepositoryImpl.setApplicantCode(getApplicantCode());
		vrcopReportRepositoryImpl.setApplicantName(getApplicantName());
		vrcopReportRepositoryImpl.setApplicantAddress(getApplicantAddress());
		vrcopReportRepositoryImpl.setOverseasManufacturerCode(getOverseasManufacturerCode());
		vrcopReportRepositoryImpl.setOverseasManufacturerName(getOverseasManufacturerName());
		vrcopReportRepositoryImpl.setOverseasManufacturerAddress(getOverseasManufacturerAddress());
		vrcopReportRepositoryImpl.setProductionPlantId(getProductionPlantId());
		vrcopReportRepositoryImpl.setProductionPlantCode(getProductionPlantCode());
		vrcopReportRepositoryImpl.setProductionPlantName(getProductionPlantName());
		vrcopReportRepositoryImpl.setProductionPlantAddress(getProductionPlantAddress());
		vrcopReportRepositoryImpl.setCopReportNo(getCopReportNo());
		vrcopReportRepositoryImpl.setCopReportStatus(getCopReportStatus());
		vrcopReportRepositoryImpl.setCopReportType(getCopReportType());
		vrcopReportRepositoryImpl.setCopReportMetadata(getCopReportMetadata());
		vrcopReportRepositoryImpl.setCopReportSignName(getCopReportSignName());
		vrcopReportRepositoryImpl.setCopReportSignTitle(getCopReportSignTitle());
		vrcopReportRepositoryImpl.setCopReportSignPlace(getCopReportSignPlace());
		vrcopReportRepositoryImpl.setCopReportDate(getCopReportDate());
		vrcopReportRepositoryImpl.setCopReportApprovedDate(getCopReportApprovedDate());
		vrcopReportRepositoryImpl.setCopReportExpiredDate(getCopReportExpiredDate());
		vrcopReportRepositoryImpl.setCOPFileEntryId(getCOPFileEntryId());
		vrcopReportRepositoryImpl.setModifyDate(getModifyDate());
		vrcopReportRepositoryImpl.setSyncDate(getSyncDate());
		vrcopReportRepositoryImpl.setImporterManufacturerCode(getImporterManufacturerCode());
		vrcopReportRepositoryImpl.setImporterManufacturerName(getImporterManufacturerName());
		vrcopReportRepositoryImpl.setImporterManufacturerAddress(getImporterManufacturerAddress());
		vrcopReportRepositoryImpl.setMarkupDomesticsManufacturer(getMarkupDomesticsManufacturer());
		vrcopReportRepositoryImpl.setMarkupImporter(getMarkupImporter());
		vrcopReportRepositoryImpl.setCopClassification(getCopClassification());
		vrcopReportRepositoryImpl.setProductClassificationDescription(getProductClassificationDescription());
		vrcopReportRepositoryImpl.setTotalPointA(getTotalPointA());
		vrcopReportRepositoryImpl.setTotalPointB(getTotalPointB());
		vrcopReportRepositoryImpl.setTotalPointC(getTotalPointC());
		vrcopReportRepositoryImpl.setCopNonConformity(getCopNonConformity());
		vrcopReportRepositoryImpl.setInspectionRecordNo(getInspectionRecordNo());
		vrcopReportRepositoryImpl.setInspectionRecordDate(getInspectionRecordDate());
		vrcopReportRepositoryImpl.setCorporationId(getCorporationId());
		vrcopReportRepositoryImpl.setInspectorId(getInspectorId());
		vrcopReportRepositoryImpl.setInspectionSite(getInspectionSite());
		vrcopReportRepositoryImpl.setInspectionDateFrom(getInspectionDateFrom());
		vrcopReportRepositoryImpl.setInspectionDateTo(getInspectionDateTo());
		vrcopReportRepositoryImpl.setSubInspector(getSubInspector());
		vrcopReportRepositoryImpl.setDescription(getDescription());
		vrcopReportRepositoryImpl.setApplicantRepresentative(getApplicantRepresentative());
		vrcopReportRepositoryImpl.setApplicantRepresentativeTitle(getApplicantRepresentativeTitle());
		vrcopReportRepositoryImpl.setInspectionRecordFileEntryId(getInspectionRecordFileEntryId());
		vrcopReportRepositoryImpl.setCopReportRefNo(getCopReportRefNo());
		vrcopReportRepositoryImpl.setCopReportRefDate(getCopReportRefDate());
		vrcopReportRepositoryImpl.setCopReportPreviousNo(getCopReportPreviousNo());
		vrcopReportRepositoryImpl.setCopReportPreviousDate(getCopReportPreviousDate());
		vrcopReportRepositoryImpl.setExpiredStatus(getExpiredStatus());
		vrcopReportRepositoryImpl.setDossierId(getDossierId());
		vrcopReportRepositoryImpl.setDossierIdCTN(getDossierIdCTN());
		vrcopReportRepositoryImpl.setDossierNo(getDossierNo());
		vrcopReportRepositoryImpl.setApplicantEmail(getApplicantEmail());
		vrcopReportRepositoryImpl.setApplicantPhone(getApplicantPhone());
		vrcopReportRepositoryImpl.setApplicantTelNo(getApplicantTelNo());
		vrcopReportRepositoryImpl.setApplicantFax(getApplicantFax());
		vrcopReportRepositoryImpl.setApplicantContactName(getApplicantContactName());
		vrcopReportRepositoryImpl.setApplicantContactEmail(getApplicantContactEmail());
		vrcopReportRepositoryImpl.setApplicantContactPhone(getApplicantContactPhone());
		vrcopReportRepositoryImpl.setApplicantContactTelNo(getApplicantContactTelNo());
		vrcopReportRepositoryImpl.setApplicantBusinessType(getApplicantBusinessType());
		vrcopReportRepositoryImpl.setMarkupDesigner(getMarkupDesigner());
		vrcopReportRepositoryImpl.setMarkupOverseasManufacturer(getMarkupOverseasManufacturer());
		vrcopReportRepositoryImpl.setMarkupMaintainer(getMarkupMaintainer());
		vrcopReportRepositoryImpl.setImporterDomesticSite(getImporterDomesticSite());
		vrcopReportRepositoryImpl.setSiteOfNationality(getSiteOfNationality());
		vrcopReportRepositoryImpl.setSiteOfNationalityCode(getSiteOfNationalityCode());
		vrcopReportRepositoryImpl.setSiteOfRegion(getSiteOfRegion());
		vrcopReportRepositoryImpl.setSiteOfRegionCode(getSiteOfRegionCode());
		vrcopReportRepositoryImpl.setSiteOfCity(getSiteOfCity());
		vrcopReportRepositoryImpl.setSiteOfCityCode(getSiteOfCityCode());
		vrcopReportRepositoryImpl.setManufacturerRepresentative(getManufacturerRepresentative());
		vrcopReportRepositoryImpl.setManufacturerRepresentativeTitle(getManufacturerRepresentativeTitle());
		vrcopReportRepositoryImpl.setManufacturerEmail(getManufacturerEmail());
		vrcopReportRepositoryImpl.setManufacturerPhone(getManufacturerPhone());
		vrcopReportRepositoryImpl.setManufacturerFax(getManufacturerFax());
		vrcopReportRepositoryImpl.setProductionPlantEmail(getProductionPlantEmail());
		vrcopReportRepositoryImpl.setProductionPlantWebsite(getProductionPlantWebsite());
		vrcopReportRepositoryImpl.setProductionPlantRepresentative(getProductionPlantRepresentative());
		vrcopReportRepositoryImpl.setProductionPlantRepresentativeTitle(getProductionPlantRepresentativeTitle());
		vrcopReportRepositoryImpl.setCorporationName(getCorporationName());
		vrcopReportRepositoryImpl.setInspectorContactCode(getInspectorContactCode());
		vrcopReportRepositoryImpl.setInspectorName(getInspectorName());
		vrcopReportRepositoryImpl.setInspectoRendorSementDate(getInspectoRendorSementDate());
		vrcopReportRepositoryImpl.setInspectorDeadline(getInspectorDeadline());
		vrcopReportRepositoryImpl.setResolvedStatus(getResolvedStatus());
		vrcopReportRepositoryImpl.setNumberOfNonConformity(getNumberOfNonConformity());
		vrcopReportRepositoryImpl.setNumberOfResolved(getNumberOfResolved());
		vrcopReportRepositoryImpl.setObservationDescription(getObservationDescription());
		vrcopReportRepositoryImpl.setInspectionAuditCycle(getInspectionAuditCycle());
		vrcopReportRepositoryImpl.setInspectionNote(getInspectionNote());
		vrcopReportRepositoryImpl.setProductionConformityChecking(getProductionConformityChecking());
		vrcopReportRepositoryImpl.setProductionStampChecking(getProductionStampChecking());
		vrcopReportRepositoryImpl.setTestingEquipmentChecking(getTestingEquipmentChecking());
		vrcopReportRepositoryImpl.setProductionPlantClassification(getProductionPlantClassification());
		vrcopReportRepositoryImpl.setActualCapacity(getActualCapacity());
		vrcopReportRepositoryImpl.setMaxCapacity(getMaxCapacity());
		vrcopReportRepositoryImpl.setAverageCapacity(getAverageCapacity());
		vrcopReportRepositoryImpl.setTotalEmployee(getTotalEmployee());
		vrcopReportRepositoryImpl.setTotalWorker(getTotalWorker());
		vrcopReportRepositoryImpl.setTotalManager(getTotalManager());
		vrcopReportRepositoryImpl.setTotalTechnical(getTotalTechnical());
		vrcopReportRepositoryImpl.setTotalQaEmployee(getTotalQaEmployee());
		vrcopReportRepositoryImpl.setTotalSquareMeter(getTotalSquareMeter());
		vrcopReportRepositoryImpl.setWareHouseSquare(getWareHouseSquare());
		vrcopReportRepositoryImpl.setOfficeSquare(getOfficeSquare());
		vrcopReportRepositoryImpl.setProductionSquare(getProductionSquare());
		vrcopReportRepositoryImpl.setMachiningArea(getMachiningArea());
		vrcopReportRepositoryImpl.setWeldingArea(getWeldingArea());
		vrcopReportRepositoryImpl.setPaintingArea(getPaintingArea());
		vrcopReportRepositoryImpl.setProductionAssembleArea(getProductionAssembleArea());
		vrcopReportRepositoryImpl.setFinishProductArea(getFinishProductArea());
		vrcopReportRepositoryImpl.setTestingArea(getTestingArea());
		vrcopReportRepositoryImpl.setSelfEquipment(getSelfEquipment());
		vrcopReportRepositoryImpl.setContractEquipment(getContractEquipment());
		vrcopReportRepositoryImpl.setCircularNo(getCircularNo());
		vrcopReportRepositoryImpl.setCircularDate(getCircularDate());
		vrcopReportRepositoryImpl.setCircularNo2(getCircularNo2());
		vrcopReportRepositoryImpl.setCircularDate2(getCircularDate2());

		vrcopReportRepositoryImpl.resetOriginalValues();

		return vrcopReportRepositoryImpl;
	}

	@Override
	public int compareTo(VRCOPReportRepository vrcopReportRepository) {
		int value = 0;

		value = DateUtil.compareTo(getModifyDate(),
				vrcopReportRepository.getModifyDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VRCOPReportRepository)) {
			return false;
		}

		VRCOPReportRepository vrcopReportRepository = (VRCOPReportRepository)obj;

		long primaryKey = vrcopReportRepository.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VRCOPReportRepositoryModelImpl vrcopReportRepositoryModelImpl = this;

		vrcopReportRepositoryModelImpl._originalMtCore = vrcopReportRepositoryModelImpl._mtCore;

		vrcopReportRepositoryModelImpl._setOriginalMtCore = false;

		vrcopReportRepositoryModelImpl._originalApplicantProfileId = vrcopReportRepositoryModelImpl._applicantProfileId;

		vrcopReportRepositoryModelImpl._setOriginalApplicantProfileId = false;

		vrcopReportRepositoryModelImpl._originalProductionPlantCode = vrcopReportRepositoryModelImpl._productionPlantCode;

		vrcopReportRepositoryModelImpl._originalProductionPlantName = vrcopReportRepositoryModelImpl._productionPlantName;

		vrcopReportRepositoryModelImpl._originalProductionPlantAddress = vrcopReportRepositoryModelImpl._productionPlantAddress;

		vrcopReportRepositoryModelImpl._originalCopReportNo = vrcopReportRepositoryModelImpl._copReportNo;

		vrcopReportRepositoryModelImpl._originalCopReportStatus = vrcopReportRepositoryModelImpl._copReportStatus;

		vrcopReportRepositoryModelImpl._originalCopClassification = vrcopReportRepositoryModelImpl._copClassification;

		vrcopReportRepositoryModelImpl._originalDossierId = vrcopReportRepositoryModelImpl._dossierId;

		vrcopReportRepositoryModelImpl._setOriginalDossierId = false;

		vrcopReportRepositoryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VRCOPReportRepository> toCacheModel() {
		VRCOPReportRepositoryCacheModel vrcopReportRepositoryCacheModel = new VRCOPReportRepositoryCacheModel();

		vrcopReportRepositoryCacheModel.id = getId();

		vrcopReportRepositoryCacheModel.mtCore = getMtCore();

		vrcopReportRepositoryCacheModel.applicantProfileId = getApplicantProfileId();

		vrcopReportRepositoryCacheModel.applicantCode = getApplicantCode();

		String applicantCode = vrcopReportRepositoryCacheModel.applicantCode;

		if ((applicantCode != null) && (applicantCode.length() == 0)) {
			vrcopReportRepositoryCacheModel.applicantCode = null;
		}

		vrcopReportRepositoryCacheModel.applicantName = getApplicantName();

		String applicantName = vrcopReportRepositoryCacheModel.applicantName;

		if ((applicantName != null) && (applicantName.length() == 0)) {
			vrcopReportRepositoryCacheModel.applicantName = null;
		}

		vrcopReportRepositoryCacheModel.applicantAddress = getApplicantAddress();

		String applicantAddress = vrcopReportRepositoryCacheModel.applicantAddress;

		if ((applicantAddress != null) && (applicantAddress.length() == 0)) {
			vrcopReportRepositoryCacheModel.applicantAddress = null;
		}

		vrcopReportRepositoryCacheModel.overseasManufacturerCode = getOverseasManufacturerCode();

		String overseasManufacturerCode = vrcopReportRepositoryCacheModel.overseasManufacturerCode;

		if ((overseasManufacturerCode != null) &&
				(overseasManufacturerCode.length() == 0)) {
			vrcopReportRepositoryCacheModel.overseasManufacturerCode = null;
		}

		vrcopReportRepositoryCacheModel.overseasManufacturerName = getOverseasManufacturerName();

		String overseasManufacturerName = vrcopReportRepositoryCacheModel.overseasManufacturerName;

		if ((overseasManufacturerName != null) &&
				(overseasManufacturerName.length() == 0)) {
			vrcopReportRepositoryCacheModel.overseasManufacturerName = null;
		}

		vrcopReportRepositoryCacheModel.overseasManufacturerAddress = getOverseasManufacturerAddress();

		String overseasManufacturerAddress = vrcopReportRepositoryCacheModel.overseasManufacturerAddress;

		if ((overseasManufacturerAddress != null) &&
				(overseasManufacturerAddress.length() == 0)) {
			vrcopReportRepositoryCacheModel.overseasManufacturerAddress = null;
		}

		vrcopReportRepositoryCacheModel.productionPlantId = getProductionPlantId();

		vrcopReportRepositoryCacheModel.productionPlantCode = getProductionPlantCode();

		String productionPlantCode = vrcopReportRepositoryCacheModel.productionPlantCode;

		if ((productionPlantCode != null) &&
				(productionPlantCode.length() == 0)) {
			vrcopReportRepositoryCacheModel.productionPlantCode = null;
		}

		vrcopReportRepositoryCacheModel.productionPlantName = getProductionPlantName();

		String productionPlantName = vrcopReportRepositoryCacheModel.productionPlantName;

		if ((productionPlantName != null) &&
				(productionPlantName.length() == 0)) {
			vrcopReportRepositoryCacheModel.productionPlantName = null;
		}

		vrcopReportRepositoryCacheModel.productionPlantAddress = getProductionPlantAddress();

		String productionPlantAddress = vrcopReportRepositoryCacheModel.productionPlantAddress;

		if ((productionPlantAddress != null) &&
				(productionPlantAddress.length() == 0)) {
			vrcopReportRepositoryCacheModel.productionPlantAddress = null;
		}

		vrcopReportRepositoryCacheModel.copReportNo = getCopReportNo();

		String copReportNo = vrcopReportRepositoryCacheModel.copReportNo;

		if ((copReportNo != null) && (copReportNo.length() == 0)) {
			vrcopReportRepositoryCacheModel.copReportNo = null;
		}

		vrcopReportRepositoryCacheModel.copReportStatus = getCopReportStatus();

		String copReportStatus = vrcopReportRepositoryCacheModel.copReportStatus;

		if ((copReportStatus != null) && (copReportStatus.length() == 0)) {
			vrcopReportRepositoryCacheModel.copReportStatus = null;
		}

		vrcopReportRepositoryCacheModel.copReportType = getCopReportType();

		String copReportType = vrcopReportRepositoryCacheModel.copReportType;

		if ((copReportType != null) && (copReportType.length() == 0)) {
			vrcopReportRepositoryCacheModel.copReportType = null;
		}

		vrcopReportRepositoryCacheModel.copReportMetadata = getCopReportMetadata();

		String copReportMetadata = vrcopReportRepositoryCacheModel.copReportMetadata;

		if ((copReportMetadata != null) && (copReportMetadata.length() == 0)) {
			vrcopReportRepositoryCacheModel.copReportMetadata = null;
		}

		vrcopReportRepositoryCacheModel.copReportSignName = getCopReportSignName();

		String copReportSignName = vrcopReportRepositoryCacheModel.copReportSignName;

		if ((copReportSignName != null) && (copReportSignName.length() == 0)) {
			vrcopReportRepositoryCacheModel.copReportSignName = null;
		}

		vrcopReportRepositoryCacheModel.copReportSignTitle = getCopReportSignTitle();

		String copReportSignTitle = vrcopReportRepositoryCacheModel.copReportSignTitle;

		if ((copReportSignTitle != null) && (copReportSignTitle.length() == 0)) {
			vrcopReportRepositoryCacheModel.copReportSignTitle = null;
		}

		vrcopReportRepositoryCacheModel.copReportSignPlace = getCopReportSignPlace();

		String copReportSignPlace = vrcopReportRepositoryCacheModel.copReportSignPlace;

		if ((copReportSignPlace != null) && (copReportSignPlace.length() == 0)) {
			vrcopReportRepositoryCacheModel.copReportSignPlace = null;
		}

		Date copReportDate = getCopReportDate();

		if (copReportDate != null) {
			vrcopReportRepositoryCacheModel.copReportDate = copReportDate.getTime();
		}
		else {
			vrcopReportRepositoryCacheModel.copReportDate = Long.MIN_VALUE;
		}

		Date copReportApprovedDate = getCopReportApprovedDate();

		if (copReportApprovedDate != null) {
			vrcopReportRepositoryCacheModel.copReportApprovedDate = copReportApprovedDate.getTime();
		}
		else {
			vrcopReportRepositoryCacheModel.copReportApprovedDate = Long.MIN_VALUE;
		}

		Date copReportExpiredDate = getCopReportExpiredDate();

		if (copReportExpiredDate != null) {
			vrcopReportRepositoryCacheModel.copReportExpiredDate = copReportExpiredDate.getTime();
		}
		else {
			vrcopReportRepositoryCacheModel.copReportExpiredDate = Long.MIN_VALUE;
		}

		vrcopReportRepositoryCacheModel.COPFileEntryId = getCOPFileEntryId();

		Date modifyDate = getModifyDate();

		if (modifyDate != null) {
			vrcopReportRepositoryCacheModel.modifyDate = modifyDate.getTime();
		}
		else {
			vrcopReportRepositoryCacheModel.modifyDate = Long.MIN_VALUE;
		}

		Date syncDate = getSyncDate();

		if (syncDate != null) {
			vrcopReportRepositoryCacheModel.syncDate = syncDate.getTime();
		}
		else {
			vrcopReportRepositoryCacheModel.syncDate = Long.MIN_VALUE;
		}

		vrcopReportRepositoryCacheModel.importerManufacturerCode = getImporterManufacturerCode();

		String importerManufacturerCode = vrcopReportRepositoryCacheModel.importerManufacturerCode;

		if ((importerManufacturerCode != null) &&
				(importerManufacturerCode.length() == 0)) {
			vrcopReportRepositoryCacheModel.importerManufacturerCode = null;
		}

		vrcopReportRepositoryCacheModel.importerManufacturerName = getImporterManufacturerName();

		String importerManufacturerName = vrcopReportRepositoryCacheModel.importerManufacturerName;

		if ((importerManufacturerName != null) &&
				(importerManufacturerName.length() == 0)) {
			vrcopReportRepositoryCacheModel.importerManufacturerName = null;
		}

		vrcopReportRepositoryCacheModel.importerManufacturerAddress = getImporterManufacturerAddress();

		String importerManufacturerAddress = vrcopReportRepositoryCacheModel.importerManufacturerAddress;

		if ((importerManufacturerAddress != null) &&
				(importerManufacturerAddress.length() == 0)) {
			vrcopReportRepositoryCacheModel.importerManufacturerAddress = null;
		}

		vrcopReportRepositoryCacheModel.markupDomesticsManufacturer = getMarkupDomesticsManufacturer();

		String markupDomesticsManufacturer = vrcopReportRepositoryCacheModel.markupDomesticsManufacturer;

		if ((markupDomesticsManufacturer != null) &&
				(markupDomesticsManufacturer.length() == 0)) {
			vrcopReportRepositoryCacheModel.markupDomesticsManufacturer = null;
		}

		vrcopReportRepositoryCacheModel.markupImporter = getMarkupImporter();

		String markupImporter = vrcopReportRepositoryCacheModel.markupImporter;

		if ((markupImporter != null) && (markupImporter.length() == 0)) {
			vrcopReportRepositoryCacheModel.markupImporter = null;
		}

		vrcopReportRepositoryCacheModel.copClassification = getCopClassification();

		String copClassification = vrcopReportRepositoryCacheModel.copClassification;

		if ((copClassification != null) && (copClassification.length() == 0)) {
			vrcopReportRepositoryCacheModel.copClassification = null;
		}

		vrcopReportRepositoryCacheModel.productClassificationDescription = getProductClassificationDescription();

		String productClassificationDescription = vrcopReportRepositoryCacheModel.productClassificationDescription;

		if ((productClassificationDescription != null) &&
				(productClassificationDescription.length() == 0)) {
			vrcopReportRepositoryCacheModel.productClassificationDescription = null;
		}

		vrcopReportRepositoryCacheModel.totalPointA = getTotalPointA();

		vrcopReportRepositoryCacheModel.totalPointB = getTotalPointB();

		vrcopReportRepositoryCacheModel.totalPointC = getTotalPointC();

		vrcopReportRepositoryCacheModel.copNonConformity = getCopNonConformity();

		String copNonConformity = vrcopReportRepositoryCacheModel.copNonConformity;

		if ((copNonConformity != null) && (copNonConformity.length() == 0)) {
			vrcopReportRepositoryCacheModel.copNonConformity = null;
		}

		vrcopReportRepositoryCacheModel.inspectionRecordNo = getInspectionRecordNo();

		String inspectionRecordNo = vrcopReportRepositoryCacheModel.inspectionRecordNo;

		if ((inspectionRecordNo != null) && (inspectionRecordNo.length() == 0)) {
			vrcopReportRepositoryCacheModel.inspectionRecordNo = null;
		}

		Date inspectionRecordDate = getInspectionRecordDate();

		if (inspectionRecordDate != null) {
			vrcopReportRepositoryCacheModel.inspectionRecordDate = inspectionRecordDate.getTime();
		}
		else {
			vrcopReportRepositoryCacheModel.inspectionRecordDate = Long.MIN_VALUE;
		}

		vrcopReportRepositoryCacheModel.corporationId = getCorporationId();

		vrcopReportRepositoryCacheModel.inspectorId = getInspectorId();

		vrcopReportRepositoryCacheModel.inspectionSite = getInspectionSite();

		String inspectionSite = vrcopReportRepositoryCacheModel.inspectionSite;

		if ((inspectionSite != null) && (inspectionSite.length() == 0)) {
			vrcopReportRepositoryCacheModel.inspectionSite = null;
		}

		Date inspectionDateFrom = getInspectionDateFrom();

		if (inspectionDateFrom != null) {
			vrcopReportRepositoryCacheModel.inspectionDateFrom = inspectionDateFrom.getTime();
		}
		else {
			vrcopReportRepositoryCacheModel.inspectionDateFrom = Long.MIN_VALUE;
		}

		Date inspectionDateTo = getInspectionDateTo();

		if (inspectionDateTo != null) {
			vrcopReportRepositoryCacheModel.inspectionDateTo = inspectionDateTo.getTime();
		}
		else {
			vrcopReportRepositoryCacheModel.inspectionDateTo = Long.MIN_VALUE;
		}

		vrcopReportRepositoryCacheModel.subInspector = getSubInspector();

		String subInspector = vrcopReportRepositoryCacheModel.subInspector;

		if ((subInspector != null) && (subInspector.length() == 0)) {
			vrcopReportRepositoryCacheModel.subInspector = null;
		}

		vrcopReportRepositoryCacheModel.description = getDescription();

		String description = vrcopReportRepositoryCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			vrcopReportRepositoryCacheModel.description = null;
		}

		vrcopReportRepositoryCacheModel.applicantRepresentative = getApplicantRepresentative();

		String applicantRepresentative = vrcopReportRepositoryCacheModel.applicantRepresentative;

		if ((applicantRepresentative != null) &&
				(applicantRepresentative.length() == 0)) {
			vrcopReportRepositoryCacheModel.applicantRepresentative = null;
		}

		vrcopReportRepositoryCacheModel.applicantRepresentativeTitle = getApplicantRepresentativeTitle();

		String applicantRepresentativeTitle = vrcopReportRepositoryCacheModel.applicantRepresentativeTitle;

		if ((applicantRepresentativeTitle != null) &&
				(applicantRepresentativeTitle.length() == 0)) {
			vrcopReportRepositoryCacheModel.applicantRepresentativeTitle = null;
		}

		vrcopReportRepositoryCacheModel.inspectionRecordFileEntryId = getInspectionRecordFileEntryId();

		vrcopReportRepositoryCacheModel.copReportRefNo = getCopReportRefNo();

		String copReportRefNo = vrcopReportRepositoryCacheModel.copReportRefNo;

		if ((copReportRefNo != null) && (copReportRefNo.length() == 0)) {
			vrcopReportRepositoryCacheModel.copReportRefNo = null;
		}

		Date copReportRefDate = getCopReportRefDate();

		if (copReportRefDate != null) {
			vrcopReportRepositoryCacheModel.copReportRefDate = copReportRefDate.getTime();
		}
		else {
			vrcopReportRepositoryCacheModel.copReportRefDate = Long.MIN_VALUE;
		}

		vrcopReportRepositoryCacheModel.copReportPreviousNo = getCopReportPreviousNo();

		String copReportPreviousNo = vrcopReportRepositoryCacheModel.copReportPreviousNo;

		if ((copReportPreviousNo != null) &&
				(copReportPreviousNo.length() == 0)) {
			vrcopReportRepositoryCacheModel.copReportPreviousNo = null;
		}

		Date copReportPreviousDate = getCopReportPreviousDate();

		if (copReportPreviousDate != null) {
			vrcopReportRepositoryCacheModel.copReportPreviousDate = copReportPreviousDate.getTime();
		}
		else {
			vrcopReportRepositoryCacheModel.copReportPreviousDate = Long.MIN_VALUE;
		}

		vrcopReportRepositoryCacheModel.expiredStatus = getExpiredStatus();

		String expiredStatus = vrcopReportRepositoryCacheModel.expiredStatus;

		if ((expiredStatus != null) && (expiredStatus.length() == 0)) {
			vrcopReportRepositoryCacheModel.expiredStatus = null;
		}

		vrcopReportRepositoryCacheModel.dossierId = getDossierId();

		vrcopReportRepositoryCacheModel.dossierIdCTN = getDossierIdCTN();

		String dossierIdCTN = vrcopReportRepositoryCacheModel.dossierIdCTN;

		if ((dossierIdCTN != null) && (dossierIdCTN.length() == 0)) {
			vrcopReportRepositoryCacheModel.dossierIdCTN = null;
		}

		vrcopReportRepositoryCacheModel.dossierNo = getDossierNo();

		String dossierNo = vrcopReportRepositoryCacheModel.dossierNo;

		if ((dossierNo != null) && (dossierNo.length() == 0)) {
			vrcopReportRepositoryCacheModel.dossierNo = null;
		}

		vrcopReportRepositoryCacheModel.applicantEmail = getApplicantEmail();

		String applicantEmail = vrcopReportRepositoryCacheModel.applicantEmail;

		if ((applicantEmail != null) && (applicantEmail.length() == 0)) {
			vrcopReportRepositoryCacheModel.applicantEmail = null;
		}

		vrcopReportRepositoryCacheModel.applicantPhone = getApplicantPhone();

		String applicantPhone = vrcopReportRepositoryCacheModel.applicantPhone;

		if ((applicantPhone != null) && (applicantPhone.length() == 0)) {
			vrcopReportRepositoryCacheModel.applicantPhone = null;
		}

		vrcopReportRepositoryCacheModel.applicantTelNo = getApplicantTelNo();

		String applicantTelNo = vrcopReportRepositoryCacheModel.applicantTelNo;

		if ((applicantTelNo != null) && (applicantTelNo.length() == 0)) {
			vrcopReportRepositoryCacheModel.applicantTelNo = null;
		}

		vrcopReportRepositoryCacheModel.applicantFax = getApplicantFax();

		String applicantFax = vrcopReportRepositoryCacheModel.applicantFax;

		if ((applicantFax != null) && (applicantFax.length() == 0)) {
			vrcopReportRepositoryCacheModel.applicantFax = null;
		}

		vrcopReportRepositoryCacheModel.applicantContactName = getApplicantContactName();

		String applicantContactName = vrcopReportRepositoryCacheModel.applicantContactName;

		if ((applicantContactName != null) &&
				(applicantContactName.length() == 0)) {
			vrcopReportRepositoryCacheModel.applicantContactName = null;
		}

		vrcopReportRepositoryCacheModel.applicantContactEmail = getApplicantContactEmail();

		String applicantContactEmail = vrcopReportRepositoryCacheModel.applicantContactEmail;

		if ((applicantContactEmail != null) &&
				(applicantContactEmail.length() == 0)) {
			vrcopReportRepositoryCacheModel.applicantContactEmail = null;
		}

		vrcopReportRepositoryCacheModel.applicantContactPhone = getApplicantContactPhone();

		String applicantContactPhone = vrcopReportRepositoryCacheModel.applicantContactPhone;

		if ((applicantContactPhone != null) &&
				(applicantContactPhone.length() == 0)) {
			vrcopReportRepositoryCacheModel.applicantContactPhone = null;
		}

		vrcopReportRepositoryCacheModel.applicantContactTelNo = getApplicantContactTelNo();

		String applicantContactTelNo = vrcopReportRepositoryCacheModel.applicantContactTelNo;

		if ((applicantContactTelNo != null) &&
				(applicantContactTelNo.length() == 0)) {
			vrcopReportRepositoryCacheModel.applicantContactTelNo = null;
		}

		vrcopReportRepositoryCacheModel.applicantBusinessType = getApplicantBusinessType();

		String applicantBusinessType = vrcopReportRepositoryCacheModel.applicantBusinessType;

		if ((applicantBusinessType != null) &&
				(applicantBusinessType.length() == 0)) {
			vrcopReportRepositoryCacheModel.applicantBusinessType = null;
		}

		vrcopReportRepositoryCacheModel.markupDesigner = getMarkupDesigner();

		String markupDesigner = vrcopReportRepositoryCacheModel.markupDesigner;

		if ((markupDesigner != null) && (markupDesigner.length() == 0)) {
			vrcopReportRepositoryCacheModel.markupDesigner = null;
		}

		vrcopReportRepositoryCacheModel.markupOverseasManufacturer = getMarkupOverseasManufacturer();

		String markupOverseasManufacturer = vrcopReportRepositoryCacheModel.markupOverseasManufacturer;

		if ((markupOverseasManufacturer != null) &&
				(markupOverseasManufacturer.length() == 0)) {
			vrcopReportRepositoryCacheModel.markupOverseasManufacturer = null;
		}

		vrcopReportRepositoryCacheModel.markupMaintainer = getMarkupMaintainer();

		String markupMaintainer = vrcopReportRepositoryCacheModel.markupMaintainer;

		if ((markupMaintainer != null) && (markupMaintainer.length() == 0)) {
			vrcopReportRepositoryCacheModel.markupMaintainer = null;
		}

		vrcopReportRepositoryCacheModel.importerDomesticSite = getImporterDomesticSite();

		String importerDomesticSite = vrcopReportRepositoryCacheModel.importerDomesticSite;

		if ((importerDomesticSite != null) &&
				(importerDomesticSite.length() == 0)) {
			vrcopReportRepositoryCacheModel.importerDomesticSite = null;
		}

		vrcopReportRepositoryCacheModel.siteOfNationality = getSiteOfNationality();

		String siteOfNationality = vrcopReportRepositoryCacheModel.siteOfNationality;

		if ((siteOfNationality != null) && (siteOfNationality.length() == 0)) {
			vrcopReportRepositoryCacheModel.siteOfNationality = null;
		}

		vrcopReportRepositoryCacheModel.siteOfNationalityCode = getSiteOfNationalityCode();

		String siteOfNationalityCode = vrcopReportRepositoryCacheModel.siteOfNationalityCode;

		if ((siteOfNationalityCode != null) &&
				(siteOfNationalityCode.length() == 0)) {
			vrcopReportRepositoryCacheModel.siteOfNationalityCode = null;
		}

		vrcopReportRepositoryCacheModel.siteOfRegion = getSiteOfRegion();

		String siteOfRegion = vrcopReportRepositoryCacheModel.siteOfRegion;

		if ((siteOfRegion != null) && (siteOfRegion.length() == 0)) {
			vrcopReportRepositoryCacheModel.siteOfRegion = null;
		}

		vrcopReportRepositoryCacheModel.siteOfRegionCode = getSiteOfRegionCode();

		String siteOfRegionCode = vrcopReportRepositoryCacheModel.siteOfRegionCode;

		if ((siteOfRegionCode != null) && (siteOfRegionCode.length() == 0)) {
			vrcopReportRepositoryCacheModel.siteOfRegionCode = null;
		}

		vrcopReportRepositoryCacheModel.siteOfCity = getSiteOfCity();

		String siteOfCity = vrcopReportRepositoryCacheModel.siteOfCity;

		if ((siteOfCity != null) && (siteOfCity.length() == 0)) {
			vrcopReportRepositoryCacheModel.siteOfCity = null;
		}

		vrcopReportRepositoryCacheModel.siteOfCityCode = getSiteOfCityCode();

		String siteOfCityCode = vrcopReportRepositoryCacheModel.siteOfCityCode;

		if ((siteOfCityCode != null) && (siteOfCityCode.length() == 0)) {
			vrcopReportRepositoryCacheModel.siteOfCityCode = null;
		}

		vrcopReportRepositoryCacheModel.manufacturerRepresentative = getManufacturerRepresentative();

		String manufacturerRepresentative = vrcopReportRepositoryCacheModel.manufacturerRepresentative;

		if ((manufacturerRepresentative != null) &&
				(manufacturerRepresentative.length() == 0)) {
			vrcopReportRepositoryCacheModel.manufacturerRepresentative = null;
		}

		vrcopReportRepositoryCacheModel.manufacturerRepresentativeTitle = getManufacturerRepresentativeTitle();

		String manufacturerRepresentativeTitle = vrcopReportRepositoryCacheModel.manufacturerRepresentativeTitle;

		if ((manufacturerRepresentativeTitle != null) &&
				(manufacturerRepresentativeTitle.length() == 0)) {
			vrcopReportRepositoryCacheModel.manufacturerRepresentativeTitle = null;
		}

		vrcopReportRepositoryCacheModel.manufacturerEmail = getManufacturerEmail();

		String manufacturerEmail = vrcopReportRepositoryCacheModel.manufacturerEmail;

		if ((manufacturerEmail != null) && (manufacturerEmail.length() == 0)) {
			vrcopReportRepositoryCacheModel.manufacturerEmail = null;
		}

		vrcopReportRepositoryCacheModel.manufacturerPhone = getManufacturerPhone();

		String manufacturerPhone = vrcopReportRepositoryCacheModel.manufacturerPhone;

		if ((manufacturerPhone != null) && (manufacturerPhone.length() == 0)) {
			vrcopReportRepositoryCacheModel.manufacturerPhone = null;
		}

		vrcopReportRepositoryCacheModel.manufacturerFax = getManufacturerFax();

		String manufacturerFax = vrcopReportRepositoryCacheModel.manufacturerFax;

		if ((manufacturerFax != null) && (manufacturerFax.length() == 0)) {
			vrcopReportRepositoryCacheModel.manufacturerFax = null;
		}

		vrcopReportRepositoryCacheModel.productionPlantEmail = getProductionPlantEmail();

		String productionPlantEmail = vrcopReportRepositoryCacheModel.productionPlantEmail;

		if ((productionPlantEmail != null) &&
				(productionPlantEmail.length() == 0)) {
			vrcopReportRepositoryCacheModel.productionPlantEmail = null;
		}

		vrcopReportRepositoryCacheModel.productionPlantWebsite = getProductionPlantWebsite();

		String productionPlantWebsite = vrcopReportRepositoryCacheModel.productionPlantWebsite;

		if ((productionPlantWebsite != null) &&
				(productionPlantWebsite.length() == 0)) {
			vrcopReportRepositoryCacheModel.productionPlantWebsite = null;
		}

		vrcopReportRepositoryCacheModel.productionPlantRepresentative = getProductionPlantRepresentative();

		String productionPlantRepresentative = vrcopReportRepositoryCacheModel.productionPlantRepresentative;

		if ((productionPlantRepresentative != null) &&
				(productionPlantRepresentative.length() == 0)) {
			vrcopReportRepositoryCacheModel.productionPlantRepresentative = null;
		}

		vrcopReportRepositoryCacheModel.productionPlantRepresentativeTitle = getProductionPlantRepresentativeTitle();

		String productionPlantRepresentativeTitle = vrcopReportRepositoryCacheModel.productionPlantRepresentativeTitle;

		if ((productionPlantRepresentativeTitle != null) &&
				(productionPlantRepresentativeTitle.length() == 0)) {
			vrcopReportRepositoryCacheModel.productionPlantRepresentativeTitle = null;
		}

		vrcopReportRepositoryCacheModel.corporationName = getCorporationName();

		String corporationName = vrcopReportRepositoryCacheModel.corporationName;

		if ((corporationName != null) && (corporationName.length() == 0)) {
			vrcopReportRepositoryCacheModel.corporationName = null;
		}

		vrcopReportRepositoryCacheModel.inspectorContactCode = getInspectorContactCode();

		String inspectorContactCode = vrcopReportRepositoryCacheModel.inspectorContactCode;

		if ((inspectorContactCode != null) &&
				(inspectorContactCode.length() == 0)) {
			vrcopReportRepositoryCacheModel.inspectorContactCode = null;
		}

		vrcopReportRepositoryCacheModel.inspectorName = getInspectorName();

		String inspectorName = vrcopReportRepositoryCacheModel.inspectorName;

		if ((inspectorName != null) && (inspectorName.length() == 0)) {
			vrcopReportRepositoryCacheModel.inspectorName = null;
		}

		Date inspectoRendorSementDate = getInspectoRendorSementDate();

		if (inspectoRendorSementDate != null) {
			vrcopReportRepositoryCacheModel.inspectoRendorSementDate = inspectoRendorSementDate.getTime();
		}
		else {
			vrcopReportRepositoryCacheModel.inspectoRendorSementDate = Long.MIN_VALUE;
		}

		Date inspectorDeadline = getInspectorDeadline();

		if (inspectorDeadline != null) {
			vrcopReportRepositoryCacheModel.inspectorDeadline = inspectorDeadline.getTime();
		}
		else {
			vrcopReportRepositoryCacheModel.inspectorDeadline = Long.MIN_VALUE;
		}

		vrcopReportRepositoryCacheModel.resolvedStatus = getResolvedStatus();

		String resolvedStatus = vrcopReportRepositoryCacheModel.resolvedStatus;

		if ((resolvedStatus != null) && (resolvedStatus.length() == 0)) {
			vrcopReportRepositoryCacheModel.resolvedStatus = null;
		}

		vrcopReportRepositoryCacheModel.numberOfNonConformity = getNumberOfNonConformity();

		vrcopReportRepositoryCacheModel.numberOfResolved = getNumberOfResolved();

		vrcopReportRepositoryCacheModel.observationDescription = getObservationDescription();

		String observationDescription = vrcopReportRepositoryCacheModel.observationDescription;

		if ((observationDescription != null) &&
				(observationDescription.length() == 0)) {
			vrcopReportRepositoryCacheModel.observationDescription = null;
		}

		vrcopReportRepositoryCacheModel.inspectionAuditCycle = getInspectionAuditCycle();

		String inspectionAuditCycle = vrcopReportRepositoryCacheModel.inspectionAuditCycle;

		if ((inspectionAuditCycle != null) &&
				(inspectionAuditCycle.length() == 0)) {
			vrcopReportRepositoryCacheModel.inspectionAuditCycle = null;
		}

		vrcopReportRepositoryCacheModel.inspectionNote = getInspectionNote();

		String inspectionNote = vrcopReportRepositoryCacheModel.inspectionNote;

		if ((inspectionNote != null) && (inspectionNote.length() == 0)) {
			vrcopReportRepositoryCacheModel.inspectionNote = null;
		}

		vrcopReportRepositoryCacheModel.productionConformityChecking = getProductionConformityChecking();

		String productionConformityChecking = vrcopReportRepositoryCacheModel.productionConformityChecking;

		if ((productionConformityChecking != null) &&
				(productionConformityChecking.length() == 0)) {
			vrcopReportRepositoryCacheModel.productionConformityChecking = null;
		}

		vrcopReportRepositoryCacheModel.productionStampChecking = getProductionStampChecking();

		String productionStampChecking = vrcopReportRepositoryCacheModel.productionStampChecking;

		if ((productionStampChecking != null) &&
				(productionStampChecking.length() == 0)) {
			vrcopReportRepositoryCacheModel.productionStampChecking = null;
		}

		vrcopReportRepositoryCacheModel.testingEquipmentChecking = getTestingEquipmentChecking();

		String testingEquipmentChecking = vrcopReportRepositoryCacheModel.testingEquipmentChecking;

		if ((testingEquipmentChecking != null) &&
				(testingEquipmentChecking.length() == 0)) {
			vrcopReportRepositoryCacheModel.testingEquipmentChecking = null;
		}

		vrcopReportRepositoryCacheModel.productionPlantClassification = getProductionPlantClassification();

		String productionPlantClassification = vrcopReportRepositoryCacheModel.productionPlantClassification;

		if ((productionPlantClassification != null) &&
				(productionPlantClassification.length() == 0)) {
			vrcopReportRepositoryCacheModel.productionPlantClassification = null;
		}

		vrcopReportRepositoryCacheModel.actualCapacity = getActualCapacity();

		String actualCapacity = vrcopReportRepositoryCacheModel.actualCapacity;

		if ((actualCapacity != null) && (actualCapacity.length() == 0)) {
			vrcopReportRepositoryCacheModel.actualCapacity = null;
		}

		vrcopReportRepositoryCacheModel.maxCapacity = getMaxCapacity();

		String maxCapacity = vrcopReportRepositoryCacheModel.maxCapacity;

		if ((maxCapacity != null) && (maxCapacity.length() == 0)) {
			vrcopReportRepositoryCacheModel.maxCapacity = null;
		}

		vrcopReportRepositoryCacheModel.averageCapacity = getAverageCapacity();

		String averageCapacity = vrcopReportRepositoryCacheModel.averageCapacity;

		if ((averageCapacity != null) && (averageCapacity.length() == 0)) {
			vrcopReportRepositoryCacheModel.averageCapacity = null;
		}

		vrcopReportRepositoryCacheModel.totalEmployee = getTotalEmployee();

		String totalEmployee = vrcopReportRepositoryCacheModel.totalEmployee;

		if ((totalEmployee != null) && (totalEmployee.length() == 0)) {
			vrcopReportRepositoryCacheModel.totalEmployee = null;
		}

		vrcopReportRepositoryCacheModel.totalWorker = getTotalWorker();

		String totalWorker = vrcopReportRepositoryCacheModel.totalWorker;

		if ((totalWorker != null) && (totalWorker.length() == 0)) {
			vrcopReportRepositoryCacheModel.totalWorker = null;
		}

		vrcopReportRepositoryCacheModel.totalManager = getTotalManager();

		String totalManager = vrcopReportRepositoryCacheModel.totalManager;

		if ((totalManager != null) && (totalManager.length() == 0)) {
			vrcopReportRepositoryCacheModel.totalManager = null;
		}

		vrcopReportRepositoryCacheModel.totalTechnical = getTotalTechnical();

		String totalTechnical = vrcopReportRepositoryCacheModel.totalTechnical;

		if ((totalTechnical != null) && (totalTechnical.length() == 0)) {
			vrcopReportRepositoryCacheModel.totalTechnical = null;
		}

		vrcopReportRepositoryCacheModel.totalQaEmployee = getTotalQaEmployee();

		String totalQaEmployee = vrcopReportRepositoryCacheModel.totalQaEmployee;

		if ((totalQaEmployee != null) && (totalQaEmployee.length() == 0)) {
			vrcopReportRepositoryCacheModel.totalQaEmployee = null;
		}

		vrcopReportRepositoryCacheModel.totalSquareMeter = getTotalSquareMeter();

		String totalSquareMeter = vrcopReportRepositoryCacheModel.totalSquareMeter;

		if ((totalSquareMeter != null) && (totalSquareMeter.length() == 0)) {
			vrcopReportRepositoryCacheModel.totalSquareMeter = null;
		}

		vrcopReportRepositoryCacheModel.wareHouseSquare = getWareHouseSquare();

		String wareHouseSquare = vrcopReportRepositoryCacheModel.wareHouseSquare;

		if ((wareHouseSquare != null) && (wareHouseSquare.length() == 0)) {
			vrcopReportRepositoryCacheModel.wareHouseSquare = null;
		}

		vrcopReportRepositoryCacheModel.officeSquare = getOfficeSquare();

		String officeSquare = vrcopReportRepositoryCacheModel.officeSquare;

		if ((officeSquare != null) && (officeSquare.length() == 0)) {
			vrcopReportRepositoryCacheModel.officeSquare = null;
		}

		vrcopReportRepositoryCacheModel.productionSquare = getProductionSquare();

		String productionSquare = vrcopReportRepositoryCacheModel.productionSquare;

		if ((productionSquare != null) && (productionSquare.length() == 0)) {
			vrcopReportRepositoryCacheModel.productionSquare = null;
		}

		vrcopReportRepositoryCacheModel.machiningArea = getMachiningArea();

		String machiningArea = vrcopReportRepositoryCacheModel.machiningArea;

		if ((machiningArea != null) && (machiningArea.length() == 0)) {
			vrcopReportRepositoryCacheModel.machiningArea = null;
		}

		vrcopReportRepositoryCacheModel.weldingArea = getWeldingArea();

		String weldingArea = vrcopReportRepositoryCacheModel.weldingArea;

		if ((weldingArea != null) && (weldingArea.length() == 0)) {
			vrcopReportRepositoryCacheModel.weldingArea = null;
		}

		vrcopReportRepositoryCacheModel.paintingArea = getPaintingArea();

		String paintingArea = vrcopReportRepositoryCacheModel.paintingArea;

		if ((paintingArea != null) && (paintingArea.length() == 0)) {
			vrcopReportRepositoryCacheModel.paintingArea = null;
		}

		vrcopReportRepositoryCacheModel.productionAssembleArea = getProductionAssembleArea();

		String productionAssembleArea = vrcopReportRepositoryCacheModel.productionAssembleArea;

		if ((productionAssembleArea != null) &&
				(productionAssembleArea.length() == 0)) {
			vrcopReportRepositoryCacheModel.productionAssembleArea = null;
		}

		vrcopReportRepositoryCacheModel.finishProductArea = getFinishProductArea();

		String finishProductArea = vrcopReportRepositoryCacheModel.finishProductArea;

		if ((finishProductArea != null) && (finishProductArea.length() == 0)) {
			vrcopReportRepositoryCacheModel.finishProductArea = null;
		}

		vrcopReportRepositoryCacheModel.testingArea = getTestingArea();

		String testingArea = vrcopReportRepositoryCacheModel.testingArea;

		if ((testingArea != null) && (testingArea.length() == 0)) {
			vrcopReportRepositoryCacheModel.testingArea = null;
		}

		vrcopReportRepositoryCacheModel.selfEquipment = getSelfEquipment();

		String selfEquipment = vrcopReportRepositoryCacheModel.selfEquipment;

		if ((selfEquipment != null) && (selfEquipment.length() == 0)) {
			vrcopReportRepositoryCacheModel.selfEquipment = null;
		}

		vrcopReportRepositoryCacheModel.contractEquipment = getContractEquipment();

		String contractEquipment = vrcopReportRepositoryCacheModel.contractEquipment;

		if ((contractEquipment != null) && (contractEquipment.length() == 0)) {
			vrcopReportRepositoryCacheModel.contractEquipment = null;
		}

		vrcopReportRepositoryCacheModel.circularNo = getCircularNo();

		String circularNo = vrcopReportRepositoryCacheModel.circularNo;

		if ((circularNo != null) && (circularNo.length() == 0)) {
			vrcopReportRepositoryCacheModel.circularNo = null;
		}

		Date circularDate = getCircularDate();

		if (circularDate != null) {
			vrcopReportRepositoryCacheModel.circularDate = circularDate.getTime();
		}
		else {
			vrcopReportRepositoryCacheModel.circularDate = Long.MIN_VALUE;
		}

		vrcopReportRepositoryCacheModel.circularNo2 = getCircularNo2();

		String circularNo2 = vrcopReportRepositoryCacheModel.circularNo2;

		if ((circularNo2 != null) && (circularNo2.length() == 0)) {
			vrcopReportRepositoryCacheModel.circularNo2 = null;
		}

		Date circularDate2 = getCircularDate2();

		if (circularDate2 != null) {
			vrcopReportRepositoryCacheModel.circularDate2 = circularDate2.getTime();
		}
		else {
			vrcopReportRepositoryCacheModel.circularDate2 = Long.MIN_VALUE;
		}

		return vrcopReportRepositoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(249);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", mtCore=");
		sb.append(getMtCore());
		sb.append(", applicantProfileId=");
		sb.append(getApplicantProfileId());
		sb.append(", applicantCode=");
		sb.append(getApplicantCode());
		sb.append(", applicantName=");
		sb.append(getApplicantName());
		sb.append(", applicantAddress=");
		sb.append(getApplicantAddress());
		sb.append(", overseasManufacturerCode=");
		sb.append(getOverseasManufacturerCode());
		sb.append(", overseasManufacturerName=");
		sb.append(getOverseasManufacturerName());
		sb.append(", overseasManufacturerAddress=");
		sb.append(getOverseasManufacturerAddress());
		sb.append(", productionPlantId=");
		sb.append(getProductionPlantId());
		sb.append(", productionPlantCode=");
		sb.append(getProductionPlantCode());
		sb.append(", productionPlantName=");
		sb.append(getProductionPlantName());
		sb.append(", productionPlantAddress=");
		sb.append(getProductionPlantAddress());
		sb.append(", copReportNo=");
		sb.append(getCopReportNo());
		sb.append(", copReportStatus=");
		sb.append(getCopReportStatus());
		sb.append(", copReportType=");
		sb.append(getCopReportType());
		sb.append(", copReportMetadata=");
		sb.append(getCopReportMetadata());
		sb.append(", copReportSignName=");
		sb.append(getCopReportSignName());
		sb.append(", copReportSignTitle=");
		sb.append(getCopReportSignTitle());
		sb.append(", copReportSignPlace=");
		sb.append(getCopReportSignPlace());
		sb.append(", copReportDate=");
		sb.append(getCopReportDate());
		sb.append(", copReportApprovedDate=");
		sb.append(getCopReportApprovedDate());
		sb.append(", copReportExpiredDate=");
		sb.append(getCopReportExpiredDate());
		sb.append(", COPFileEntryId=");
		sb.append(getCOPFileEntryId());
		sb.append(", modifyDate=");
		sb.append(getModifyDate());
		sb.append(", syncDate=");
		sb.append(getSyncDate());
		sb.append(", importerManufacturerCode=");
		sb.append(getImporterManufacturerCode());
		sb.append(", importerManufacturerName=");
		sb.append(getImporterManufacturerName());
		sb.append(", importerManufacturerAddress=");
		sb.append(getImporterManufacturerAddress());
		sb.append(", markupDomesticsManufacturer=");
		sb.append(getMarkupDomesticsManufacturer());
		sb.append(", markupImporter=");
		sb.append(getMarkupImporter());
		sb.append(", copClassification=");
		sb.append(getCopClassification());
		sb.append(", productClassificationDescription=");
		sb.append(getProductClassificationDescription());
		sb.append(", totalPointA=");
		sb.append(getTotalPointA());
		sb.append(", totalPointB=");
		sb.append(getTotalPointB());
		sb.append(", totalPointC=");
		sb.append(getTotalPointC());
		sb.append(", copNonConformity=");
		sb.append(getCopNonConformity());
		sb.append(", inspectionRecordNo=");
		sb.append(getInspectionRecordNo());
		sb.append(", inspectionRecordDate=");
		sb.append(getInspectionRecordDate());
		sb.append(", corporationId=");
		sb.append(getCorporationId());
		sb.append(", inspectorId=");
		sb.append(getInspectorId());
		sb.append(", inspectionSite=");
		sb.append(getInspectionSite());
		sb.append(", inspectionDateFrom=");
		sb.append(getInspectionDateFrom());
		sb.append(", inspectionDateTo=");
		sb.append(getInspectionDateTo());
		sb.append(", subInspector=");
		sb.append(getSubInspector());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", applicantRepresentative=");
		sb.append(getApplicantRepresentative());
		sb.append(", applicantRepresentativeTitle=");
		sb.append(getApplicantRepresentativeTitle());
		sb.append(", inspectionRecordFileEntryId=");
		sb.append(getInspectionRecordFileEntryId());
		sb.append(", copReportRefNo=");
		sb.append(getCopReportRefNo());
		sb.append(", copReportRefDate=");
		sb.append(getCopReportRefDate());
		sb.append(", copReportPreviousNo=");
		sb.append(getCopReportPreviousNo());
		sb.append(", copReportPreviousDate=");
		sb.append(getCopReportPreviousDate());
		sb.append(", expiredStatus=");
		sb.append(getExpiredStatus());
		sb.append(", dossierId=");
		sb.append(getDossierId());
		sb.append(", dossierIdCTN=");
		sb.append(getDossierIdCTN());
		sb.append(", dossierNo=");
		sb.append(getDossierNo());
		sb.append(", applicantEmail=");
		sb.append(getApplicantEmail());
		sb.append(", applicantPhone=");
		sb.append(getApplicantPhone());
		sb.append(", applicantTelNo=");
		sb.append(getApplicantTelNo());
		sb.append(", applicantFax=");
		sb.append(getApplicantFax());
		sb.append(", applicantContactName=");
		sb.append(getApplicantContactName());
		sb.append(", applicantContactEmail=");
		sb.append(getApplicantContactEmail());
		sb.append(", applicantContactPhone=");
		sb.append(getApplicantContactPhone());
		sb.append(", applicantContactTelNo=");
		sb.append(getApplicantContactTelNo());
		sb.append(", applicantBusinessType=");
		sb.append(getApplicantBusinessType());
		sb.append(", markupDesigner=");
		sb.append(getMarkupDesigner());
		sb.append(", markupOverseasManufacturer=");
		sb.append(getMarkupOverseasManufacturer());
		sb.append(", markupMaintainer=");
		sb.append(getMarkupMaintainer());
		sb.append(", importerDomesticSite=");
		sb.append(getImporterDomesticSite());
		sb.append(", siteOfNationality=");
		sb.append(getSiteOfNationality());
		sb.append(", siteOfNationalityCode=");
		sb.append(getSiteOfNationalityCode());
		sb.append(", siteOfRegion=");
		sb.append(getSiteOfRegion());
		sb.append(", siteOfRegionCode=");
		sb.append(getSiteOfRegionCode());
		sb.append(", siteOfCity=");
		sb.append(getSiteOfCity());
		sb.append(", siteOfCityCode=");
		sb.append(getSiteOfCityCode());
		sb.append(", manufacturerRepresentative=");
		sb.append(getManufacturerRepresentative());
		sb.append(", manufacturerRepresentativeTitle=");
		sb.append(getManufacturerRepresentativeTitle());
		sb.append(", manufacturerEmail=");
		sb.append(getManufacturerEmail());
		sb.append(", manufacturerPhone=");
		sb.append(getManufacturerPhone());
		sb.append(", manufacturerFax=");
		sb.append(getManufacturerFax());
		sb.append(", productionPlantEmail=");
		sb.append(getProductionPlantEmail());
		sb.append(", productionPlantWebsite=");
		sb.append(getProductionPlantWebsite());
		sb.append(", productionPlantRepresentative=");
		sb.append(getProductionPlantRepresentative());
		sb.append(", productionPlantRepresentativeTitle=");
		sb.append(getProductionPlantRepresentativeTitle());
		sb.append(", corporationName=");
		sb.append(getCorporationName());
		sb.append(", inspectorContactCode=");
		sb.append(getInspectorContactCode());
		sb.append(", inspectorName=");
		sb.append(getInspectorName());
		sb.append(", inspectoRendorSementDate=");
		sb.append(getInspectoRendorSementDate());
		sb.append(", inspectorDeadline=");
		sb.append(getInspectorDeadline());
		sb.append(", resolvedStatus=");
		sb.append(getResolvedStatus());
		sb.append(", numberOfNonConformity=");
		sb.append(getNumberOfNonConformity());
		sb.append(", numberOfResolved=");
		sb.append(getNumberOfResolved());
		sb.append(", observationDescription=");
		sb.append(getObservationDescription());
		sb.append(", inspectionAuditCycle=");
		sb.append(getInspectionAuditCycle());
		sb.append(", inspectionNote=");
		sb.append(getInspectionNote());
		sb.append(", productionConformityChecking=");
		sb.append(getProductionConformityChecking());
		sb.append(", productionStampChecking=");
		sb.append(getProductionStampChecking());
		sb.append(", testingEquipmentChecking=");
		sb.append(getTestingEquipmentChecking());
		sb.append(", productionPlantClassification=");
		sb.append(getProductionPlantClassification());
		sb.append(", actualCapacity=");
		sb.append(getActualCapacity());
		sb.append(", maxCapacity=");
		sb.append(getMaxCapacity());
		sb.append(", averageCapacity=");
		sb.append(getAverageCapacity());
		sb.append(", totalEmployee=");
		sb.append(getTotalEmployee());
		sb.append(", totalWorker=");
		sb.append(getTotalWorker());
		sb.append(", totalManager=");
		sb.append(getTotalManager());
		sb.append(", totalTechnical=");
		sb.append(getTotalTechnical());
		sb.append(", totalQaEmployee=");
		sb.append(getTotalQaEmployee());
		sb.append(", totalSquareMeter=");
		sb.append(getTotalSquareMeter());
		sb.append(", wareHouseSquare=");
		sb.append(getWareHouseSquare());
		sb.append(", officeSquare=");
		sb.append(getOfficeSquare());
		sb.append(", productionSquare=");
		sb.append(getProductionSquare());
		sb.append(", machiningArea=");
		sb.append(getMachiningArea());
		sb.append(", weldingArea=");
		sb.append(getWeldingArea());
		sb.append(", paintingArea=");
		sb.append(getPaintingArea());
		sb.append(", productionAssembleArea=");
		sb.append(getProductionAssembleArea());
		sb.append(", finishProductArea=");
		sb.append(getFinishProductArea());
		sb.append(", testingArea=");
		sb.append(getTestingArea());
		sb.append(", selfEquipment=");
		sb.append(getSelfEquipment());
		sb.append(", contractEquipment=");
		sb.append(getContractEquipment());
		sb.append(", circularNo=");
		sb.append(getCircularNo());
		sb.append(", circularDate=");
		sb.append(getCircularDate());
		sb.append(", circularNo2=");
		sb.append(getCircularNo2());
		sb.append(", circularDate2=");
		sb.append(getCircularDate2());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(376);

		sb.append("<model><model-name>");
		sb.append("com.fds.vr.business.model.VRCOPReportRepository");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mtCore</column-name><column-value><![CDATA[");
		sb.append(getMtCore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantProfileId</column-name><column-value><![CDATA[");
		sb.append(getApplicantProfileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantCode</column-name><column-value><![CDATA[");
		sb.append(getApplicantCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantName</column-name><column-value><![CDATA[");
		sb.append(getApplicantName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantAddress</column-name><column-value><![CDATA[");
		sb.append(getApplicantAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>overseasManufacturerCode</column-name><column-value><![CDATA[");
		sb.append(getOverseasManufacturerCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>overseasManufacturerName</column-name><column-value><![CDATA[");
		sb.append(getOverseasManufacturerName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>overseasManufacturerAddress</column-name><column-value><![CDATA[");
		sb.append(getOverseasManufacturerAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantId</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantCode</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantName</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantAddress</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportNo</column-name><column-value><![CDATA[");
		sb.append(getCopReportNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportStatus</column-name><column-value><![CDATA[");
		sb.append(getCopReportStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportType</column-name><column-value><![CDATA[");
		sb.append(getCopReportType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportMetadata</column-name><column-value><![CDATA[");
		sb.append(getCopReportMetadata());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportSignName</column-name><column-value><![CDATA[");
		sb.append(getCopReportSignName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportSignTitle</column-name><column-value><![CDATA[");
		sb.append(getCopReportSignTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportSignPlace</column-name><column-value><![CDATA[");
		sb.append(getCopReportSignPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportDate</column-name><column-value><![CDATA[");
		sb.append(getCopReportDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportApprovedDate</column-name><column-value><![CDATA[");
		sb.append(getCopReportApprovedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportExpiredDate</column-name><column-value><![CDATA[");
		sb.append(getCopReportExpiredDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>COPFileEntryId</column-name><column-value><![CDATA[");
		sb.append(getCOPFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifyDate</column-name><column-value><![CDATA[");
		sb.append(getModifyDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncDate</column-name><column-value><![CDATA[");
		sb.append(getSyncDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importerManufacturerCode</column-name><column-value><![CDATA[");
		sb.append(getImporterManufacturerCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importerManufacturerName</column-name><column-value><![CDATA[");
		sb.append(getImporterManufacturerName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importerManufacturerAddress</column-name><column-value><![CDATA[");
		sb.append(getImporterManufacturerAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupDomesticsManufacturer</column-name><column-value><![CDATA[");
		sb.append(getMarkupDomesticsManufacturer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupImporter</column-name><column-value><![CDATA[");
		sb.append(getMarkupImporter());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copClassification</column-name><column-value><![CDATA[");
		sb.append(getCopClassification());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productClassificationDescription</column-name><column-value><![CDATA[");
		sb.append(getProductClassificationDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalPointA</column-name><column-value><![CDATA[");
		sb.append(getTotalPointA());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalPointB</column-name><column-value><![CDATA[");
		sb.append(getTotalPointB());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalPointC</column-name><column-value><![CDATA[");
		sb.append(getTotalPointC());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copNonConformity</column-name><column-value><![CDATA[");
		sb.append(getCopNonConformity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionRecordNo</column-name><column-value><![CDATA[");
		sb.append(getInspectionRecordNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionRecordDate</column-name><column-value><![CDATA[");
		sb.append(getInspectionRecordDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>corporationId</column-name><column-value><![CDATA[");
		sb.append(getCorporationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorId</column-name><column-value><![CDATA[");
		sb.append(getInspectorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionSite</column-name><column-value><![CDATA[");
		sb.append(getInspectionSite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionDateFrom</column-name><column-value><![CDATA[");
		sb.append(getInspectionDateFrom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionDateTo</column-name><column-value><![CDATA[");
		sb.append(getInspectionDateTo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subInspector</column-name><column-value><![CDATA[");
		sb.append(getSubInspector());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantRepresentative</column-name><column-value><![CDATA[");
		sb.append(getApplicantRepresentative());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantRepresentativeTitle</column-name><column-value><![CDATA[");
		sb.append(getApplicantRepresentativeTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionRecordFileEntryId</column-name><column-value><![CDATA[");
		sb.append(getInspectionRecordFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportRefNo</column-name><column-value><![CDATA[");
		sb.append(getCopReportRefNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportRefDate</column-name><column-value><![CDATA[");
		sb.append(getCopReportRefDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportPreviousNo</column-name><column-value><![CDATA[");
		sb.append(getCopReportPreviousNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportPreviousDate</column-name><column-value><![CDATA[");
		sb.append(getCopReportPreviousDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expiredStatus</column-name><column-value><![CDATA[");
		sb.append(getExpiredStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierId</column-name><column-value><![CDATA[");
		sb.append(getDossierId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierIdCTN</column-name><column-value><![CDATA[");
		sb.append(getDossierIdCTN());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierNo</column-name><column-value><![CDATA[");
		sb.append(getDossierNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantEmail</column-name><column-value><![CDATA[");
		sb.append(getApplicantEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantPhone</column-name><column-value><![CDATA[");
		sb.append(getApplicantPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantTelNo</column-name><column-value><![CDATA[");
		sb.append(getApplicantTelNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantFax</column-name><column-value><![CDATA[");
		sb.append(getApplicantFax());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantContactName</column-name><column-value><![CDATA[");
		sb.append(getApplicantContactName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantContactEmail</column-name><column-value><![CDATA[");
		sb.append(getApplicantContactEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantContactPhone</column-name><column-value><![CDATA[");
		sb.append(getApplicantContactPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantContactTelNo</column-name><column-value><![CDATA[");
		sb.append(getApplicantContactTelNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantBusinessType</column-name><column-value><![CDATA[");
		sb.append(getApplicantBusinessType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupDesigner</column-name><column-value><![CDATA[");
		sb.append(getMarkupDesigner());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupOverseasManufacturer</column-name><column-value><![CDATA[");
		sb.append(getMarkupOverseasManufacturer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupMaintainer</column-name><column-value><![CDATA[");
		sb.append(getMarkupMaintainer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importerDomesticSite</column-name><column-value><![CDATA[");
		sb.append(getImporterDomesticSite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>siteOfNationality</column-name><column-value><![CDATA[");
		sb.append(getSiteOfNationality());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>siteOfNationalityCode</column-name><column-value><![CDATA[");
		sb.append(getSiteOfNationalityCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>siteOfRegion</column-name><column-value><![CDATA[");
		sb.append(getSiteOfRegion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>siteOfRegionCode</column-name><column-value><![CDATA[");
		sb.append(getSiteOfRegionCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>siteOfCity</column-name><column-value><![CDATA[");
		sb.append(getSiteOfCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>siteOfCityCode</column-name><column-value><![CDATA[");
		sb.append(getSiteOfCityCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manufacturerRepresentative</column-name><column-value><![CDATA[");
		sb.append(getManufacturerRepresentative());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manufacturerRepresentativeTitle</column-name><column-value><![CDATA[");
		sb.append(getManufacturerRepresentativeTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manufacturerEmail</column-name><column-value><![CDATA[");
		sb.append(getManufacturerEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manufacturerPhone</column-name><column-value><![CDATA[");
		sb.append(getManufacturerPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manufacturerFax</column-name><column-value><![CDATA[");
		sb.append(getManufacturerFax());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantEmail</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantWebsite</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantWebsite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantRepresentative</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantRepresentative());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantRepresentativeTitle</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantRepresentativeTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>corporationName</column-name><column-value><![CDATA[");
		sb.append(getCorporationName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorContactCode</column-name><column-value><![CDATA[");
		sb.append(getInspectorContactCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorName</column-name><column-value><![CDATA[");
		sb.append(getInspectorName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectoRendorSementDate</column-name><column-value><![CDATA[");
		sb.append(getInspectoRendorSementDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorDeadline</column-name><column-value><![CDATA[");
		sb.append(getInspectorDeadline());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resolvedStatus</column-name><column-value><![CDATA[");
		sb.append(getResolvedStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberOfNonConformity</column-name><column-value><![CDATA[");
		sb.append(getNumberOfNonConformity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberOfResolved</column-name><column-value><![CDATA[");
		sb.append(getNumberOfResolved());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>observationDescription</column-name><column-value><![CDATA[");
		sb.append(getObservationDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionAuditCycle</column-name><column-value><![CDATA[");
		sb.append(getInspectionAuditCycle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionNote</column-name><column-value><![CDATA[");
		sb.append(getInspectionNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionConformityChecking</column-name><column-value><![CDATA[");
		sb.append(getProductionConformityChecking());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionStampChecking</column-name><column-value><![CDATA[");
		sb.append(getProductionStampChecking());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>testingEquipmentChecking</column-name><column-value><![CDATA[");
		sb.append(getTestingEquipmentChecking());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantClassification</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantClassification());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actualCapacity</column-name><column-value><![CDATA[");
		sb.append(getActualCapacity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maxCapacity</column-name><column-value><![CDATA[");
		sb.append(getMaxCapacity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>averageCapacity</column-name><column-value><![CDATA[");
		sb.append(getAverageCapacity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalEmployee</column-name><column-value><![CDATA[");
		sb.append(getTotalEmployee());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalWorker</column-name><column-value><![CDATA[");
		sb.append(getTotalWorker());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalManager</column-name><column-value><![CDATA[");
		sb.append(getTotalManager());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalTechnical</column-name><column-value><![CDATA[");
		sb.append(getTotalTechnical());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalQaEmployee</column-name><column-value><![CDATA[");
		sb.append(getTotalQaEmployee());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalSquareMeter</column-name><column-value><![CDATA[");
		sb.append(getTotalSquareMeter());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>wareHouseSquare</column-name><column-value><![CDATA[");
		sb.append(getWareHouseSquare());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>officeSquare</column-name><column-value><![CDATA[");
		sb.append(getOfficeSquare());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionSquare</column-name><column-value><![CDATA[");
		sb.append(getProductionSquare());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>machiningArea</column-name><column-value><![CDATA[");
		sb.append(getMachiningArea());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>weldingArea</column-name><column-value><![CDATA[");
		sb.append(getWeldingArea());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paintingArea</column-name><column-value><![CDATA[");
		sb.append(getPaintingArea());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionAssembleArea</column-name><column-value><![CDATA[");
		sb.append(getProductionAssembleArea());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>finishProductArea</column-name><column-value><![CDATA[");
		sb.append(getFinishProductArea());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>testingArea</column-name><column-value><![CDATA[");
		sb.append(getTestingArea());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>selfEquipment</column-name><column-value><![CDATA[");
		sb.append(getSelfEquipment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractEquipment</column-name><column-value><![CDATA[");
		sb.append(getContractEquipment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>circularNo</column-name><column-value><![CDATA[");
		sb.append(getCircularNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>circularDate</column-name><column-value><![CDATA[");
		sb.append(getCircularDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>circularNo2</column-name><column-value><![CDATA[");
		sb.append(getCircularNo2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>circularDate2</column-name><column-value><![CDATA[");
		sb.append(getCircularDate2());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VRCOPReportRepository.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VRCOPReportRepository.class
		};
	private long _id;
	private long _mtCore;
	private long _originalMtCore;
	private boolean _setOriginalMtCore;
	private long _applicantProfileId;
	private long _originalApplicantProfileId;
	private boolean _setOriginalApplicantProfileId;
	private String _applicantCode;
	private String _applicantName;
	private String _applicantAddress;
	private String _overseasManufacturerCode;
	private String _overseasManufacturerName;
	private String _overseasManufacturerAddress;
	private long _productionPlantId;
	private String _productionPlantCode;
	private String _originalProductionPlantCode;
	private String _productionPlantName;
	private String _originalProductionPlantName;
	private String _productionPlantAddress;
	private String _originalProductionPlantAddress;
	private String _copReportNo;
	private String _originalCopReportNo;
	private String _copReportStatus;
	private String _originalCopReportStatus;
	private String _copReportType;
	private String _copReportMetadata;
	private String _copReportSignName;
	private String _copReportSignTitle;
	private String _copReportSignPlace;
	private Date _copReportDate;
	private Date _copReportApprovedDate;
	private Date _copReportExpiredDate;
	private long _COPFileEntryId;
	private Date _modifyDate;
	private Date _syncDate;
	private String _importerManufacturerCode;
	private String _importerManufacturerName;
	private String _importerManufacturerAddress;
	private String _markupDomesticsManufacturer;
	private String _markupImporter;
	private String _copClassification;
	private String _originalCopClassification;
	private String _productClassificationDescription;
	private int _totalPointA;
	private int _totalPointB;
	private int _totalPointC;
	private String _copNonConformity;
	private String _inspectionRecordNo;
	private Date _inspectionRecordDate;
	private long _corporationId;
	private long _inspectorId;
	private String _inspectionSite;
	private Date _inspectionDateFrom;
	private Date _inspectionDateTo;
	private String _subInspector;
	private String _description;
	private String _applicantRepresentative;
	private String _applicantRepresentativeTitle;
	private long _inspectionRecordFileEntryId;
	private String _copReportRefNo;
	private Date _copReportRefDate;
	private String _copReportPreviousNo;
	private Date _copReportPreviousDate;
	private String _expiredStatus;
	private long _dossierId;
	private long _originalDossierId;
	private boolean _setOriginalDossierId;
	private String _dossierIdCTN;
	private String _dossierNo;
	private String _applicantEmail;
	private String _applicantPhone;
	private String _applicantTelNo;
	private String _applicantFax;
	private String _applicantContactName;
	private String _applicantContactEmail;
	private String _applicantContactPhone;
	private String _applicantContactTelNo;
	private String _applicantBusinessType;
	private String _markupDesigner;
	private String _markupOverseasManufacturer;
	private String _markupMaintainer;
	private String _importerDomesticSite;
	private String _siteOfNationality;
	private String _siteOfNationalityCode;
	private String _siteOfRegion;
	private String _siteOfRegionCode;
	private String _siteOfCity;
	private String _siteOfCityCode;
	private String _manufacturerRepresentative;
	private String _manufacturerRepresentativeTitle;
	private String _manufacturerEmail;
	private String _manufacturerPhone;
	private String _manufacturerFax;
	private String _productionPlantEmail;
	private String _productionPlantWebsite;
	private String _productionPlantRepresentative;
	private String _productionPlantRepresentativeTitle;
	private String _corporationName;
	private String _inspectorContactCode;
	private String _inspectorName;
	private Date _inspectoRendorSementDate;
	private Date _inspectorDeadline;
	private String _resolvedStatus;
	private int _numberOfNonConformity;
	private int _numberOfResolved;
	private String _observationDescription;
	private String _inspectionAuditCycle;
	private String _inspectionNote;
	private String _productionConformityChecking;
	private String _productionStampChecking;
	private String _testingEquipmentChecking;
	private String _productionPlantClassification;
	private String _actualCapacity;
	private String _maxCapacity;
	private String _averageCapacity;
	private String _totalEmployee;
	private String _totalWorker;
	private String _totalManager;
	private String _totalTechnical;
	private String _totalQaEmployee;
	private String _totalSquareMeter;
	private String _wareHouseSquare;
	private String _officeSquare;
	private String _productionSquare;
	private String _machiningArea;
	private String _weldingArea;
	private String _paintingArea;
	private String _productionAssembleArea;
	private String _finishProductArea;
	private String _testingArea;
	private String _selfEquipment;
	private String _contractEquipment;
	private String _circularNo;
	private Date _circularDate;
	private String _circularNo2;
	private Date _circularDate2;
	private long _columnBitmask;
	private VRCOPReportRepository _escapedModel;
}