/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.business.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.business.model.VRProductionPlantEquipmentMarkup;
import com.fds.vr.business.model.VRProductionPlantEquipmentMarkupModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VRProductionPlantEquipmentMarkup service. Represents a row in the &quot;vr_productionplantequipmentmarkup&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VRProductionPlantEquipmentMarkupModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VRProductionPlantEquipmentMarkupImpl}.
 * </p>
 *
 * @author LamTV
 * @see VRProductionPlantEquipmentMarkupImpl
 * @see VRProductionPlantEquipmentMarkup
 * @see VRProductionPlantEquipmentMarkupModel
 * @generated
 */
@ProviderType
public class VRProductionPlantEquipmentMarkupModelImpl extends BaseModelImpl<VRProductionPlantEquipmentMarkup>
	implements VRProductionPlantEquipmentMarkupModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vr production plant equipment markup model instance should use the {@link VRProductionPlantEquipmentMarkup} interface instead.
	 */
	public static final String TABLE_NAME = "vr_productionplantequipmentmarkup";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "productClassificationCode", Types.VARCHAR },
			{ "productionPlantEquipmentId", Types.BIGINT },
			{ "status", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("productClassificationCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionPlantEquipmentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table vr_productionplantequipmentmarkup (id LONG not null primary key,productClassificationCode VARCHAR(75) null,productionPlantEquipmentId LONG,status INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table vr_productionplantequipmentmarkup";
	public static final String ORDER_BY_JPQL = " ORDER BY vrProductionPlantEquipmentMarkup.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_productionplantequipmentmarkup.id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fds.vr.business.model.VRProductionPlantEquipmentMarkup"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fds.vr.business.model.VRProductionPlantEquipmentMarkup"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fds.vr.business.model.VRProductionPlantEquipmentMarkup"),
			true);
	public static final long PRODUCTIONPLANTEQUIPMENTID_COLUMN_BITMASK = 1L;
	public static final long ID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.fds.vr.service.util.ServiceProps.get(
				"lock.expiration.time.com.fds.vr.business.model.VRProductionPlantEquipmentMarkup"));

	public VRProductionPlantEquipmentMarkupModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VRProductionPlantEquipmentMarkup.class;
	}

	@Override
	public String getModelClassName() {
		return VRProductionPlantEquipmentMarkup.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("productClassificationCode",
			getProductClassificationCode());
		attributes.put("productionPlantEquipmentId",
			getProductionPlantEquipmentId());
		attributes.put("status", getStatus());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String productClassificationCode = (String)attributes.get(
				"productClassificationCode");

		if (productClassificationCode != null) {
			setProductClassificationCode(productClassificationCode);
		}

		Long productionPlantEquipmentId = (Long)attributes.get(
				"productionPlantEquipmentId");

		if (productionPlantEquipmentId != null) {
			setProductionPlantEquipmentId(productionPlantEquipmentId);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public String getProductClassificationCode() {
		if (_productClassificationCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _productClassificationCode;
		}
	}

	@Override
	public void setProductClassificationCode(String productClassificationCode) {
		_productClassificationCode = productClassificationCode;
	}

	@Override
	public long getProductionPlantEquipmentId() {
		return _productionPlantEquipmentId;
	}

	@Override
	public void setProductionPlantEquipmentId(long productionPlantEquipmentId) {
		_columnBitmask |= PRODUCTIONPLANTEQUIPMENTID_COLUMN_BITMASK;

		if (!_setOriginalProductionPlantEquipmentId) {
			_setOriginalProductionPlantEquipmentId = true;

			_originalProductionPlantEquipmentId = _productionPlantEquipmentId;
		}

		_productionPlantEquipmentId = productionPlantEquipmentId;
	}

	public long getOriginalProductionPlantEquipmentId() {
		return _originalProductionPlantEquipmentId;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VRProductionPlantEquipmentMarkup.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VRProductionPlantEquipmentMarkup toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VRProductionPlantEquipmentMarkup)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VRProductionPlantEquipmentMarkupImpl vrProductionPlantEquipmentMarkupImpl =
			new VRProductionPlantEquipmentMarkupImpl();

		vrProductionPlantEquipmentMarkupImpl.setId(getId());
		vrProductionPlantEquipmentMarkupImpl.setProductClassificationCode(getProductClassificationCode());
		vrProductionPlantEquipmentMarkupImpl.setProductionPlantEquipmentId(getProductionPlantEquipmentId());
		vrProductionPlantEquipmentMarkupImpl.setStatus(getStatus());

		vrProductionPlantEquipmentMarkupImpl.resetOriginalValues();

		return vrProductionPlantEquipmentMarkupImpl;
	}

	@Override
	public int compareTo(
		VRProductionPlantEquipmentMarkup vrProductionPlantEquipmentMarkup) {
		long primaryKey = vrProductionPlantEquipmentMarkup.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VRProductionPlantEquipmentMarkup)) {
			return false;
		}

		VRProductionPlantEquipmentMarkup vrProductionPlantEquipmentMarkup = (VRProductionPlantEquipmentMarkup)obj;

		long primaryKey = vrProductionPlantEquipmentMarkup.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VRProductionPlantEquipmentMarkupModelImpl vrProductionPlantEquipmentMarkupModelImpl =
			this;

		vrProductionPlantEquipmentMarkupModelImpl._originalProductionPlantEquipmentId = vrProductionPlantEquipmentMarkupModelImpl._productionPlantEquipmentId;

		vrProductionPlantEquipmentMarkupModelImpl._setOriginalProductionPlantEquipmentId = false;

		vrProductionPlantEquipmentMarkupModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VRProductionPlantEquipmentMarkup> toCacheModel() {
		VRProductionPlantEquipmentMarkupCacheModel vrProductionPlantEquipmentMarkupCacheModel =
			new VRProductionPlantEquipmentMarkupCacheModel();

		vrProductionPlantEquipmentMarkupCacheModel.id = getId();

		vrProductionPlantEquipmentMarkupCacheModel.productClassificationCode = getProductClassificationCode();

		String productClassificationCode = vrProductionPlantEquipmentMarkupCacheModel.productClassificationCode;

		if ((productClassificationCode != null) &&
				(productClassificationCode.length() == 0)) {
			vrProductionPlantEquipmentMarkupCacheModel.productClassificationCode = null;
		}

		vrProductionPlantEquipmentMarkupCacheModel.productionPlantEquipmentId = getProductionPlantEquipmentId();

		vrProductionPlantEquipmentMarkupCacheModel.status = getStatus();

		return vrProductionPlantEquipmentMarkupCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", productClassificationCode=");
		sb.append(getProductClassificationCode());
		sb.append(", productionPlantEquipmentId=");
		sb.append(getProductionPlantEquipmentId());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.fds.vr.business.model.VRProductionPlantEquipmentMarkup");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productClassificationCode</column-name><column-value><![CDATA[");
		sb.append(getProductClassificationCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantEquipmentId</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantEquipmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VRProductionPlantEquipmentMarkup.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VRProductionPlantEquipmentMarkup.class
		};
	private long _id;
	private String _productClassificationCode;
	private long _productionPlantEquipmentId;
	private long _originalProductionPlantEquipmentId;
	private boolean _setOriginalProductionPlantEquipmentId;
	private int _status;
	private long _columnBitmask;
	private VRProductionPlantEquipmentMarkup _escapedModel;
}