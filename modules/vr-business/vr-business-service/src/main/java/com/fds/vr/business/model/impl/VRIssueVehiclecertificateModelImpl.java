/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.business.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.business.model.VRIssueVehiclecertificate;
import com.fds.vr.business.model.VRIssueVehiclecertificateModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VRIssueVehiclecertificate service. Represents a row in the &quot;vr_issue_vehiclecertificate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VRIssueVehiclecertificateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VRIssueVehiclecertificateImpl}.
 * </p>
 *
 * @author LamTV
 * @see VRIssueVehiclecertificateImpl
 * @see VRIssueVehiclecertificate
 * @see VRIssueVehiclecertificateModel
 * @generated
 */
@ProviderType
public class VRIssueVehiclecertificateModelImpl extends BaseModelImpl<VRIssueVehiclecertificate>
	implements VRIssueVehiclecertificateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vr issue vehiclecertificate model instance should use the {@link VRIssueVehiclecertificate} interface instead.
	 */
	public static final String TABLE_NAME = "vr_issue_vehiclecertificate";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "mtCore", Types.BIGINT },
			{ "issueId", Types.BIGINT },
			{ "dossierId", Types.BIGINT },
			{ "certificateId", Types.BIGINT },
			{ "vehiclePrice", Types.BIGINT },
			{ "totalQuantity", Types.BIGINT },
			{ "unitPrice", Types.BIGINT },
			{ "totalProduct", Types.INTEGER },
			{ "certificateRecordNo", Types.VARCHAR },
			{ "productionExamReportNo", Types.VARCHAR },
			{ "certificateRecordDate", Types.TIMESTAMP },
			{ "modifyDate", Types.TIMESTAMP },
			{ "syncDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mtCore", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("issueId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dossierId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("certificateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("vehiclePrice", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("totalQuantity", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("unitPrice", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("totalProduct", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("certificateRecordNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionExamReportNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certificateRecordDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifyDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("syncDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table vr_issue_vehiclecertificate (id LONG not null primary key,mtCore LONG,issueId LONG,dossierId LONG,certificateId LONG,vehiclePrice LONG,totalQuantity LONG,unitPrice LONG,totalProduct INTEGER,certificateRecordNo VARCHAR(75) null,productionExamReportNo VARCHAR(75) null,certificateRecordDate DATE null,modifyDate DATE null,syncDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table vr_issue_vehiclecertificate";
	public static final String ORDER_BY_JPQL = " ORDER BY vrIssueVehiclecertificate.modifyDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_issue_vehiclecertificate.modifyDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fds.vr.business.model.VRIssueVehiclecertificate"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fds.vr.business.model.VRIssueVehiclecertificate"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fds.vr.business.model.VRIssueVehiclecertificate"),
			true);
	public static final long CERTIFICATEID_COLUMN_BITMASK = 1L;
	public static final long DOSSIERID_COLUMN_BITMASK = 2L;
	public static final long ISSUEID_COLUMN_BITMASK = 4L;
	public static final long MTCORE_COLUMN_BITMASK = 8L;
	public static final long MODIFYDATE_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.fds.vr.service.util.ServiceProps.get(
				"lock.expiration.time.com.fds.vr.business.model.VRIssueVehiclecertificate"));

	public VRIssueVehiclecertificateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VRIssueVehiclecertificate.class;
	}

	@Override
	public String getModelClassName() {
		return VRIssueVehiclecertificate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("mtCore", getMtCore());
		attributes.put("issueId", getIssueId());
		attributes.put("dossierId", getDossierId());
		attributes.put("certificateId", getCertificateId());
		attributes.put("vehiclePrice", getVehiclePrice());
		attributes.put("totalQuantity", getTotalQuantity());
		attributes.put("unitPrice", getUnitPrice());
		attributes.put("totalProduct", getTotalProduct());
		attributes.put("certificateRecordNo", getCertificateRecordNo());
		attributes.put("productionExamReportNo", getProductionExamReportNo());
		attributes.put("certificateRecordDate", getCertificateRecordDate());
		attributes.put("modifyDate", getModifyDate());
		attributes.put("syncDate", getSyncDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long mtCore = (Long)attributes.get("mtCore");

		if (mtCore != null) {
			setMtCore(mtCore);
		}

		Long issueId = (Long)attributes.get("issueId");

		if (issueId != null) {
			setIssueId(issueId);
		}

		Long dossierId = (Long)attributes.get("dossierId");

		if (dossierId != null) {
			setDossierId(dossierId);
		}

		Long certificateId = (Long)attributes.get("certificateId");

		if (certificateId != null) {
			setCertificateId(certificateId);
		}

		Long vehiclePrice = (Long)attributes.get("vehiclePrice");

		if (vehiclePrice != null) {
			setVehiclePrice(vehiclePrice);
		}

		Long totalQuantity = (Long)attributes.get("totalQuantity");

		if (totalQuantity != null) {
			setTotalQuantity(totalQuantity);
		}

		Long unitPrice = (Long)attributes.get("unitPrice");

		if (unitPrice != null) {
			setUnitPrice(unitPrice);
		}

		Integer totalProduct = (Integer)attributes.get("totalProduct");

		if (totalProduct != null) {
			setTotalProduct(totalProduct);
		}

		String certificateRecordNo = (String)attributes.get(
				"certificateRecordNo");

		if (certificateRecordNo != null) {
			setCertificateRecordNo(certificateRecordNo);
		}

		String productionExamReportNo = (String)attributes.get(
				"productionExamReportNo");

		if (productionExamReportNo != null) {
			setProductionExamReportNo(productionExamReportNo);
		}

		Date certificateRecordDate = (Date)attributes.get(
				"certificateRecordDate");

		if (certificateRecordDate != null) {
			setCertificateRecordDate(certificateRecordDate);
		}

		Date modifyDate = (Date)attributes.get("modifyDate");

		if (modifyDate != null) {
			setModifyDate(modifyDate);
		}

		Date syncDate = (Date)attributes.get("syncDate");

		if (syncDate != null) {
			setSyncDate(syncDate);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getMtCore() {
		return _mtCore;
	}

	@Override
	public void setMtCore(long mtCore) {
		_columnBitmask |= MTCORE_COLUMN_BITMASK;

		if (!_setOriginalMtCore) {
			_setOriginalMtCore = true;

			_originalMtCore = _mtCore;
		}

		_mtCore = mtCore;
	}

	public long getOriginalMtCore() {
		return _originalMtCore;
	}

	@Override
	public long getIssueId() {
		return _issueId;
	}

	@Override
	public void setIssueId(long issueId) {
		_columnBitmask |= ISSUEID_COLUMN_BITMASK;

		if (!_setOriginalIssueId) {
			_setOriginalIssueId = true;

			_originalIssueId = _issueId;
		}

		_issueId = issueId;
	}

	public long getOriginalIssueId() {
		return _originalIssueId;
	}

	@Override
	public long getDossierId() {
		return _dossierId;
	}

	@Override
	public void setDossierId(long dossierId) {
		_columnBitmask |= DOSSIERID_COLUMN_BITMASK;

		if (!_setOriginalDossierId) {
			_setOriginalDossierId = true;

			_originalDossierId = _dossierId;
		}

		_dossierId = dossierId;
	}

	public long getOriginalDossierId() {
		return _originalDossierId;
	}

	@Override
	public long getCertificateId() {
		return _certificateId;
	}

	@Override
	public void setCertificateId(long certificateId) {
		_columnBitmask |= CERTIFICATEID_COLUMN_BITMASK;

		if (!_setOriginalCertificateId) {
			_setOriginalCertificateId = true;

			_originalCertificateId = _certificateId;
		}

		_certificateId = certificateId;
	}

	public long getOriginalCertificateId() {
		return _originalCertificateId;
	}

	@Override
	public long getVehiclePrice() {
		return _vehiclePrice;
	}

	@Override
	public void setVehiclePrice(long vehiclePrice) {
		_vehiclePrice = vehiclePrice;
	}

	@Override
	public long getTotalQuantity() {
		return _totalQuantity;
	}

	@Override
	public void setTotalQuantity(long totalQuantity) {
		_totalQuantity = totalQuantity;
	}

	@Override
	public long getUnitPrice() {
		return _unitPrice;
	}

	@Override
	public void setUnitPrice(long unitPrice) {
		_unitPrice = unitPrice;
	}

	@Override
	public int getTotalProduct() {
		return _totalProduct;
	}

	@Override
	public void setTotalProduct(int totalProduct) {
		_totalProduct = totalProduct;
	}

	@Override
	public String getCertificateRecordNo() {
		if (_certificateRecordNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _certificateRecordNo;
		}
	}

	@Override
	public void setCertificateRecordNo(String certificateRecordNo) {
		_certificateRecordNo = certificateRecordNo;
	}

	@Override
	public String getProductionExamReportNo() {
		if (_productionExamReportNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionExamReportNo;
		}
	}

	@Override
	public void setProductionExamReportNo(String productionExamReportNo) {
		_productionExamReportNo = productionExamReportNo;
	}

	@Override
	public Date getCertificateRecordDate() {
		return _certificateRecordDate;
	}

	@Override
	public void setCertificateRecordDate(Date certificateRecordDate) {
		_certificateRecordDate = certificateRecordDate;
	}

	@Override
	public Date getModifyDate() {
		return _modifyDate;
	}

	@Override
	public void setModifyDate(Date modifyDate) {
		_columnBitmask = -1L;

		_modifyDate = modifyDate;
	}

	@Override
	public Date getSyncDate() {
		return _syncDate;
	}

	@Override
	public void setSyncDate(Date syncDate) {
		_syncDate = syncDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VRIssueVehiclecertificate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VRIssueVehiclecertificate toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VRIssueVehiclecertificate)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VRIssueVehiclecertificateImpl vrIssueVehiclecertificateImpl = new VRIssueVehiclecertificateImpl();

		vrIssueVehiclecertificateImpl.setId(getId());
		vrIssueVehiclecertificateImpl.setMtCore(getMtCore());
		vrIssueVehiclecertificateImpl.setIssueId(getIssueId());
		vrIssueVehiclecertificateImpl.setDossierId(getDossierId());
		vrIssueVehiclecertificateImpl.setCertificateId(getCertificateId());
		vrIssueVehiclecertificateImpl.setVehiclePrice(getVehiclePrice());
		vrIssueVehiclecertificateImpl.setTotalQuantity(getTotalQuantity());
		vrIssueVehiclecertificateImpl.setUnitPrice(getUnitPrice());
		vrIssueVehiclecertificateImpl.setTotalProduct(getTotalProduct());
		vrIssueVehiclecertificateImpl.setCertificateRecordNo(getCertificateRecordNo());
		vrIssueVehiclecertificateImpl.setProductionExamReportNo(getProductionExamReportNo());
		vrIssueVehiclecertificateImpl.setCertificateRecordDate(getCertificateRecordDate());
		vrIssueVehiclecertificateImpl.setModifyDate(getModifyDate());
		vrIssueVehiclecertificateImpl.setSyncDate(getSyncDate());

		vrIssueVehiclecertificateImpl.resetOriginalValues();

		return vrIssueVehiclecertificateImpl;
	}

	@Override
	public int compareTo(VRIssueVehiclecertificate vrIssueVehiclecertificate) {
		int value = 0;

		value = DateUtil.compareTo(getModifyDate(),
				vrIssueVehiclecertificate.getModifyDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VRIssueVehiclecertificate)) {
			return false;
		}

		VRIssueVehiclecertificate vrIssueVehiclecertificate = (VRIssueVehiclecertificate)obj;

		long primaryKey = vrIssueVehiclecertificate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VRIssueVehiclecertificateModelImpl vrIssueVehiclecertificateModelImpl = this;

		vrIssueVehiclecertificateModelImpl._originalMtCore = vrIssueVehiclecertificateModelImpl._mtCore;

		vrIssueVehiclecertificateModelImpl._setOriginalMtCore = false;

		vrIssueVehiclecertificateModelImpl._originalIssueId = vrIssueVehiclecertificateModelImpl._issueId;

		vrIssueVehiclecertificateModelImpl._setOriginalIssueId = false;

		vrIssueVehiclecertificateModelImpl._originalDossierId = vrIssueVehiclecertificateModelImpl._dossierId;

		vrIssueVehiclecertificateModelImpl._setOriginalDossierId = false;

		vrIssueVehiclecertificateModelImpl._originalCertificateId = vrIssueVehiclecertificateModelImpl._certificateId;

		vrIssueVehiclecertificateModelImpl._setOriginalCertificateId = false;

		vrIssueVehiclecertificateModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VRIssueVehiclecertificate> toCacheModel() {
		VRIssueVehiclecertificateCacheModel vrIssueVehiclecertificateCacheModel = new VRIssueVehiclecertificateCacheModel();

		vrIssueVehiclecertificateCacheModel.id = getId();

		vrIssueVehiclecertificateCacheModel.mtCore = getMtCore();

		vrIssueVehiclecertificateCacheModel.issueId = getIssueId();

		vrIssueVehiclecertificateCacheModel.dossierId = getDossierId();

		vrIssueVehiclecertificateCacheModel.certificateId = getCertificateId();

		vrIssueVehiclecertificateCacheModel.vehiclePrice = getVehiclePrice();

		vrIssueVehiclecertificateCacheModel.totalQuantity = getTotalQuantity();

		vrIssueVehiclecertificateCacheModel.unitPrice = getUnitPrice();

		vrIssueVehiclecertificateCacheModel.totalProduct = getTotalProduct();

		vrIssueVehiclecertificateCacheModel.certificateRecordNo = getCertificateRecordNo();

		String certificateRecordNo = vrIssueVehiclecertificateCacheModel.certificateRecordNo;

		if ((certificateRecordNo != null) &&
				(certificateRecordNo.length() == 0)) {
			vrIssueVehiclecertificateCacheModel.certificateRecordNo = null;
		}

		vrIssueVehiclecertificateCacheModel.productionExamReportNo = getProductionExamReportNo();

		String productionExamReportNo = vrIssueVehiclecertificateCacheModel.productionExamReportNo;

		if ((productionExamReportNo != null) &&
				(productionExamReportNo.length() == 0)) {
			vrIssueVehiclecertificateCacheModel.productionExamReportNo = null;
		}

		Date certificateRecordDate = getCertificateRecordDate();

		if (certificateRecordDate != null) {
			vrIssueVehiclecertificateCacheModel.certificateRecordDate = certificateRecordDate.getTime();
		}
		else {
			vrIssueVehiclecertificateCacheModel.certificateRecordDate = Long.MIN_VALUE;
		}

		Date modifyDate = getModifyDate();

		if (modifyDate != null) {
			vrIssueVehiclecertificateCacheModel.modifyDate = modifyDate.getTime();
		}
		else {
			vrIssueVehiclecertificateCacheModel.modifyDate = Long.MIN_VALUE;
		}

		Date syncDate = getSyncDate();

		if (syncDate != null) {
			vrIssueVehiclecertificateCacheModel.syncDate = syncDate.getTime();
		}
		else {
			vrIssueVehiclecertificateCacheModel.syncDate = Long.MIN_VALUE;
		}

		return vrIssueVehiclecertificateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", mtCore=");
		sb.append(getMtCore());
		sb.append(", issueId=");
		sb.append(getIssueId());
		sb.append(", dossierId=");
		sb.append(getDossierId());
		sb.append(", certificateId=");
		sb.append(getCertificateId());
		sb.append(", vehiclePrice=");
		sb.append(getVehiclePrice());
		sb.append(", totalQuantity=");
		sb.append(getTotalQuantity());
		sb.append(", unitPrice=");
		sb.append(getUnitPrice());
		sb.append(", totalProduct=");
		sb.append(getTotalProduct());
		sb.append(", certificateRecordNo=");
		sb.append(getCertificateRecordNo());
		sb.append(", productionExamReportNo=");
		sb.append(getProductionExamReportNo());
		sb.append(", certificateRecordDate=");
		sb.append(getCertificateRecordDate());
		sb.append(", modifyDate=");
		sb.append(getModifyDate());
		sb.append(", syncDate=");
		sb.append(getSyncDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.fds.vr.business.model.VRIssueVehiclecertificate");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mtCore</column-name><column-value><![CDATA[");
		sb.append(getMtCore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issueId</column-name><column-value><![CDATA[");
		sb.append(getIssueId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierId</column-name><column-value><![CDATA[");
		sb.append(getDossierId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateId</column-name><column-value><![CDATA[");
		sb.append(getCertificateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehiclePrice</column-name><column-value><![CDATA[");
		sb.append(getVehiclePrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalQuantity</column-name><column-value><![CDATA[");
		sb.append(getTotalQuantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitPrice</column-name><column-value><![CDATA[");
		sb.append(getUnitPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalProduct</column-name><column-value><![CDATA[");
		sb.append(getTotalProduct());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateRecordNo</column-name><column-value><![CDATA[");
		sb.append(getCertificateRecordNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionExamReportNo</column-name><column-value><![CDATA[");
		sb.append(getProductionExamReportNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateRecordDate</column-name><column-value><![CDATA[");
		sb.append(getCertificateRecordDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifyDate</column-name><column-value><![CDATA[");
		sb.append(getModifyDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncDate</column-name><column-value><![CDATA[");
		sb.append(getSyncDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VRIssueVehiclecertificate.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VRIssueVehiclecertificate.class
		};
	private long _id;
	private long _mtCore;
	private long _originalMtCore;
	private boolean _setOriginalMtCore;
	private long _issueId;
	private long _originalIssueId;
	private boolean _setOriginalIssueId;
	private long _dossierId;
	private long _originalDossierId;
	private boolean _setOriginalDossierId;
	private long _certificateId;
	private long _originalCertificateId;
	private boolean _setOriginalCertificateId;
	private long _vehiclePrice;
	private long _totalQuantity;
	private long _unitPrice;
	private int _totalProduct;
	private String _certificateRecordNo;
	private String _productionExamReportNo;
	private Date _certificateRecordDate;
	private Date _modifyDate;
	private Date _syncDate;
	private long _columnBitmask;
	private VRIssueVehiclecertificate _escapedModel;
}