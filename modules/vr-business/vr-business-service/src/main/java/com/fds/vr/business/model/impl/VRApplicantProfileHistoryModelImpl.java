/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.business.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.business.model.VRApplicantProfileHistory;
import com.fds.vr.business.model.VRApplicantProfileHistoryModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VRApplicantProfileHistory service. Represents a row in the &quot;vr_applicantprofilehistory&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VRApplicantProfileHistoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VRApplicantProfileHistoryImpl}.
 * </p>
 *
 * @author LamTV
 * @see VRApplicantProfileHistoryImpl
 * @see VRApplicantProfileHistory
 * @see VRApplicantProfileHistoryModel
 * @generated
 */
@ProviderType
public class VRApplicantProfileHistoryModelImpl extends BaseModelImpl<VRApplicantProfileHistory>
	implements VRApplicantProfileHistoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vr applicant profile history model instance should use the {@link VRApplicantProfileHistory} interface instead.
	 */
	public static final String TABLE_NAME = "vr_applicantprofilehistory";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "mtCore", Types.BIGINT },
			{ "mappingMA_CTY", Types.VARCHAR },
			{ "mappingTEN_CTY", Types.VARCHAR },
			{ "mappingDIA_CHI_CTY", Types.VARCHAR },
			{ "mappingNote", Types.VARCHAR },
			{ "mappingStatus", Types.VARCHAR },
			{ "applicantCode", Types.VARCHAR },
			{ "applicantName", Types.VARCHAR },
			{ "applicantAddress", Types.VARCHAR },
			{ "applicantRepresentative", Types.VARCHAR },
			{ "applicantRepresentativeTitle", Types.VARCHAR },
			{ "applicantPhone", Types.VARCHAR },
			{ "applicantEmail", Types.VARCHAR },
			{ "applicantFax", Types.VARCHAR },
			{ "applicantContactName", Types.VARCHAR },
			{ "applicantContactEmail", Types.VARCHAR },
			{ "applicantContactPhone", Types.VARCHAR },
			{ "applicantNationality", Types.VARCHAR },
			{ "applicantRegion", Types.VARCHAR },
			{ "applicantCity", Types.VARCHAR },
			{ "markupCorporation", Types.VARCHAR },
			{ "corporationId", Types.VARCHAR },
			{ "markupDesigner", Types.VARCHAR },
			{ "markupOverseasManufacturer", Types.VARCHAR },
			{ "markupDomesticsManufacturer", Types.VARCHAR },
			{ "markupImporter", Types.VARCHAR },
			{ "markupComponentXCG", Types.VARCHAR },
			{ "markupComponentXMY", Types.VARCHAR },
			{ "markupComponentXCD", Types.VARCHAR },
			{ "markupComponentXDD", Types.VARCHAR },
			{ "markupComponentXCN", Types.VARCHAR },
			{ "markupComponentXCH", Types.VARCHAR },
			{ "markupXCG", Types.VARCHAR },
			{ "markupXMY", Types.VARCHAR },
			{ "markupXCD", Types.VARCHAR },
			{ "markupXDD", Types.VARCHAR },
			{ "markupXCN", Types.VARCHAR },
			{ "markupXCH", Types.VARCHAR },
			{ "issueTypeXCG", Types.VARCHAR },
			{ "issueTypeXMY", Types.VARCHAR },
			{ "issueTypeXCD", Types.VARCHAR },
			{ "issueTypeXDD", Types.VARCHAR },
			{ "issueTypeXCN", Types.VARCHAR },
			{ "issueTypeXCH", Types.VARCHAR },
			{ "issueTypeDescription", Types.VARCHAR },
			{ "applicantCeremonyDate", Types.VARCHAR },
			{ "applicantOperationPeriod", Types.VARCHAR },
			{ "applicantBusinessType", Types.VARCHAR },
			{ "applicantMetadata", Types.VARCHAR },
			{ "applicantStatus", Types.VARCHAR },
			{ "modifyDate", Types.TIMESTAMP },
			{ "syncDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mtCore", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mappingMA_CTY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mappingTEN_CTY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mappingDIA_CHI_CTY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mappingNote", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mappingStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantRepresentative", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantRepresentativeTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantPhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantFax", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantContactName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantContactEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantContactPhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantNationality", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantRegion", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantCity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("markupCorporation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("corporationId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("markupDesigner", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("markupOverseasManufacturer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("markupDomesticsManufacturer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("markupImporter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("markupComponentXCG", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("markupComponentXMY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("markupComponentXCD", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("markupComponentXDD", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("markupComponentXCN", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("markupComponentXCH", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("markupXCG", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("markupXMY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("markupXCD", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("markupXDD", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("markupXCN", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("markupXCH", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("issueTypeXCG", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("issueTypeXMY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("issueTypeXCD", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("issueTypeXDD", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("issueTypeXCN", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("issueTypeXCH", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("issueTypeDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantCeremonyDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantOperationPeriod", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantBusinessType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantMetadata", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modifyDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("syncDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table vr_applicantprofilehistory (id LONG not null primary key,mtCore LONG,mappingMA_CTY VARCHAR(75) null,mappingTEN_CTY VARCHAR(75) null,mappingDIA_CHI_CTY VARCHAR(75) null,mappingNote VARCHAR(75) null,mappingStatus VARCHAR(75) null,applicantCode VARCHAR(75) null,applicantName VARCHAR(75) null,applicantAddress VARCHAR(75) null,applicantRepresentative VARCHAR(75) null,applicantRepresentativeTitle VARCHAR(75) null,applicantPhone VARCHAR(75) null,applicantEmail VARCHAR(75) null,applicantFax VARCHAR(75) null,applicantContactName VARCHAR(75) null,applicantContactEmail VARCHAR(75) null,applicantContactPhone VARCHAR(75) null,applicantNationality VARCHAR(75) null,applicantRegion VARCHAR(75) null,applicantCity VARCHAR(75) null,markupCorporation VARCHAR(75) null,corporationId VARCHAR(75) null,markupDesigner VARCHAR(75) null,markupOverseasManufacturer VARCHAR(75) null,markupDomesticsManufacturer VARCHAR(75) null,markupImporter VARCHAR(75) null,markupComponentXCG VARCHAR(75) null,markupComponentXMY VARCHAR(75) null,markupComponentXCD VARCHAR(75) null,markupComponentXDD VARCHAR(75) null,markupComponentXCN VARCHAR(75) null,markupComponentXCH VARCHAR(75) null,markupXCG VARCHAR(75) null,markupXMY VARCHAR(75) null,markupXCD VARCHAR(75) null,markupXDD VARCHAR(75) null,markupXCN VARCHAR(75) null,markupXCH VARCHAR(75) null,issueTypeXCG VARCHAR(75) null,issueTypeXMY VARCHAR(75) null,issueTypeXCD VARCHAR(75) null,issueTypeXDD VARCHAR(75) null,issueTypeXCN VARCHAR(75) null,issueTypeXCH VARCHAR(75) null,issueTypeDescription VARCHAR(75) null,applicantCeremonyDate VARCHAR(75) null,applicantOperationPeriod VARCHAR(75) null,applicantBusinessType VARCHAR(75) null,applicantMetadata VARCHAR(75) null,applicantStatus VARCHAR(75) null,modifyDate DATE null,syncDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table vr_applicantprofilehistory";
	public static final String ORDER_BY_JPQL = " ORDER BY vrApplicantProfileHistory.modifyDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_applicantprofilehistory.modifyDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fds.vr.business.model.VRApplicantProfileHistory"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fds.vr.business.model.VRApplicantProfileHistory"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fds.vr.business.model.VRApplicantProfileHistory"),
			true);
	public static final long APPLICANTCITY_COLUMN_BITMASK = 1L;
	public static final long APPLICANTCODE_COLUMN_BITMASK = 2L;
	public static final long APPLICANTREGION_COLUMN_BITMASK = 4L;
	public static final long APPLICANTSTATUS_COLUMN_BITMASK = 8L;
	public static final long MAPPINGMA_CTY_COLUMN_BITMASK = 16L;
	public static final long MAPPINGSTATUS_COLUMN_BITMASK = 32L;
	public static final long MAPPINGTEN_CTY_COLUMN_BITMASK = 64L;
	public static final long MTCORE_COLUMN_BITMASK = 128L;
	public static final long MODIFYDATE_COLUMN_BITMASK = 256L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.fds.vr.service.util.ServiceProps.get(
				"lock.expiration.time.com.fds.vr.business.model.VRApplicantProfileHistory"));

	public VRApplicantProfileHistoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VRApplicantProfileHistory.class;
	}

	@Override
	public String getModelClassName() {
		return VRApplicantProfileHistory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("mtCore", getMtCore());
		attributes.put("mappingMA_CTY", getMappingMA_CTY());
		attributes.put("mappingTEN_CTY", getMappingTEN_CTY());
		attributes.put("mappingDIA_CHI_CTY", getMappingDIA_CHI_CTY());
		attributes.put("mappingNote", getMappingNote());
		attributes.put("mappingStatus", getMappingStatus());
		attributes.put("applicantCode", getApplicantCode());
		attributes.put("applicantName", getApplicantName());
		attributes.put("applicantAddress", getApplicantAddress());
		attributes.put("applicantRepresentative", getApplicantRepresentative());
		attributes.put("applicantRepresentativeTitle",
			getApplicantRepresentativeTitle());
		attributes.put("applicantPhone", getApplicantPhone());
		attributes.put("applicantEmail", getApplicantEmail());
		attributes.put("applicantFax", getApplicantFax());
		attributes.put("applicantContactName", getApplicantContactName());
		attributes.put("applicantContactEmail", getApplicantContactEmail());
		attributes.put("applicantContactPhone", getApplicantContactPhone());
		attributes.put("applicantNationality", getApplicantNationality());
		attributes.put("applicantRegion", getApplicantRegion());
		attributes.put("applicantCity", getApplicantCity());
		attributes.put("markupCorporation", getMarkupCorporation());
		attributes.put("corporationId", getCorporationId());
		attributes.put("markupDesigner", getMarkupDesigner());
		attributes.put("markupOverseasManufacturer",
			getMarkupOverseasManufacturer());
		attributes.put("markupDomesticsManufacturer",
			getMarkupDomesticsManufacturer());
		attributes.put("markupImporter", getMarkupImporter());
		attributes.put("markupComponentXCG", getMarkupComponentXCG());
		attributes.put("markupComponentXMY", getMarkupComponentXMY());
		attributes.put("markupComponentXCD", getMarkupComponentXCD());
		attributes.put("markupComponentXDD", getMarkupComponentXDD());
		attributes.put("markupComponentXCN", getMarkupComponentXCN());
		attributes.put("markupComponentXCH", getMarkupComponentXCH());
		attributes.put("markupXCG", getMarkupXCG());
		attributes.put("markupXMY", getMarkupXMY());
		attributes.put("markupXCD", getMarkupXCD());
		attributes.put("markupXDD", getMarkupXDD());
		attributes.put("markupXCN", getMarkupXCN());
		attributes.put("markupXCH", getMarkupXCH());
		attributes.put("issueTypeXCG", getIssueTypeXCG());
		attributes.put("issueTypeXMY", getIssueTypeXMY());
		attributes.put("issueTypeXCD", getIssueTypeXCD());
		attributes.put("issueTypeXDD", getIssueTypeXDD());
		attributes.put("issueTypeXCN", getIssueTypeXCN());
		attributes.put("issueTypeXCH", getIssueTypeXCH());
		attributes.put("issueTypeDescription", getIssueTypeDescription());
		attributes.put("applicantCeremonyDate", getApplicantCeremonyDate());
		attributes.put("applicantOperationPeriod", getApplicantOperationPeriod());
		attributes.put("applicantBusinessType", getApplicantBusinessType());
		attributes.put("applicantMetadata", getApplicantMetadata());
		attributes.put("applicantStatus", getApplicantStatus());
		attributes.put("modifyDate", getModifyDate());
		attributes.put("syncDate", getSyncDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long mtCore = (Long)attributes.get("mtCore");

		if (mtCore != null) {
			setMtCore(mtCore);
		}

		String mappingMA_CTY = (String)attributes.get("mappingMA_CTY");

		if (mappingMA_CTY != null) {
			setMappingMA_CTY(mappingMA_CTY);
		}

		String mappingTEN_CTY = (String)attributes.get("mappingTEN_CTY");

		if (mappingTEN_CTY != null) {
			setMappingTEN_CTY(mappingTEN_CTY);
		}

		String mappingDIA_CHI_CTY = (String)attributes.get("mappingDIA_CHI_CTY");

		if (mappingDIA_CHI_CTY != null) {
			setMappingDIA_CHI_CTY(mappingDIA_CHI_CTY);
		}

		String mappingNote = (String)attributes.get("mappingNote");

		if (mappingNote != null) {
			setMappingNote(mappingNote);
		}

		String mappingStatus = (String)attributes.get("mappingStatus");

		if (mappingStatus != null) {
			setMappingStatus(mappingStatus);
		}

		String applicantCode = (String)attributes.get("applicantCode");

		if (applicantCode != null) {
			setApplicantCode(applicantCode);
		}

		String applicantName = (String)attributes.get("applicantName");

		if (applicantName != null) {
			setApplicantName(applicantName);
		}

		String applicantAddress = (String)attributes.get("applicantAddress");

		if (applicantAddress != null) {
			setApplicantAddress(applicantAddress);
		}

		String applicantRepresentative = (String)attributes.get(
				"applicantRepresentative");

		if (applicantRepresentative != null) {
			setApplicantRepresentative(applicantRepresentative);
		}

		String applicantRepresentativeTitle = (String)attributes.get(
				"applicantRepresentativeTitle");

		if (applicantRepresentativeTitle != null) {
			setApplicantRepresentativeTitle(applicantRepresentativeTitle);
		}

		String applicantPhone = (String)attributes.get("applicantPhone");

		if (applicantPhone != null) {
			setApplicantPhone(applicantPhone);
		}

		String applicantEmail = (String)attributes.get("applicantEmail");

		if (applicantEmail != null) {
			setApplicantEmail(applicantEmail);
		}

		String applicantFax = (String)attributes.get("applicantFax");

		if (applicantFax != null) {
			setApplicantFax(applicantFax);
		}

		String applicantContactName = (String)attributes.get(
				"applicantContactName");

		if (applicantContactName != null) {
			setApplicantContactName(applicantContactName);
		}

		String applicantContactEmail = (String)attributes.get(
				"applicantContactEmail");

		if (applicantContactEmail != null) {
			setApplicantContactEmail(applicantContactEmail);
		}

		String applicantContactPhone = (String)attributes.get(
				"applicantContactPhone");

		if (applicantContactPhone != null) {
			setApplicantContactPhone(applicantContactPhone);
		}

		String applicantNationality = (String)attributes.get(
				"applicantNationality");

		if (applicantNationality != null) {
			setApplicantNationality(applicantNationality);
		}

		String applicantRegion = (String)attributes.get("applicantRegion");

		if (applicantRegion != null) {
			setApplicantRegion(applicantRegion);
		}

		String applicantCity = (String)attributes.get("applicantCity");

		if (applicantCity != null) {
			setApplicantCity(applicantCity);
		}

		String markupCorporation = (String)attributes.get("markupCorporation");

		if (markupCorporation != null) {
			setMarkupCorporation(markupCorporation);
		}

		String corporationId = (String)attributes.get("corporationId");

		if (corporationId != null) {
			setCorporationId(corporationId);
		}

		String markupDesigner = (String)attributes.get("markupDesigner");

		if (markupDesigner != null) {
			setMarkupDesigner(markupDesigner);
		}

		String markupOverseasManufacturer = (String)attributes.get(
				"markupOverseasManufacturer");

		if (markupOverseasManufacturer != null) {
			setMarkupOverseasManufacturer(markupOverseasManufacturer);
		}

		String markupDomesticsManufacturer = (String)attributes.get(
				"markupDomesticsManufacturer");

		if (markupDomesticsManufacturer != null) {
			setMarkupDomesticsManufacturer(markupDomesticsManufacturer);
		}

		String markupImporter = (String)attributes.get("markupImporter");

		if (markupImporter != null) {
			setMarkupImporter(markupImporter);
		}

		String markupComponentXCG = (String)attributes.get("markupComponentXCG");

		if (markupComponentXCG != null) {
			setMarkupComponentXCG(markupComponentXCG);
		}

		String markupComponentXMY = (String)attributes.get("markupComponentXMY");

		if (markupComponentXMY != null) {
			setMarkupComponentXMY(markupComponentXMY);
		}

		String markupComponentXCD = (String)attributes.get("markupComponentXCD");

		if (markupComponentXCD != null) {
			setMarkupComponentXCD(markupComponentXCD);
		}

		String markupComponentXDD = (String)attributes.get("markupComponentXDD");

		if (markupComponentXDD != null) {
			setMarkupComponentXDD(markupComponentXDD);
		}

		String markupComponentXCN = (String)attributes.get("markupComponentXCN");

		if (markupComponentXCN != null) {
			setMarkupComponentXCN(markupComponentXCN);
		}

		String markupComponentXCH = (String)attributes.get("markupComponentXCH");

		if (markupComponentXCH != null) {
			setMarkupComponentXCH(markupComponentXCH);
		}

		String markupXCG = (String)attributes.get("markupXCG");

		if (markupXCG != null) {
			setMarkupXCG(markupXCG);
		}

		String markupXMY = (String)attributes.get("markupXMY");

		if (markupXMY != null) {
			setMarkupXMY(markupXMY);
		}

		String markupXCD = (String)attributes.get("markupXCD");

		if (markupXCD != null) {
			setMarkupXCD(markupXCD);
		}

		String markupXDD = (String)attributes.get("markupXDD");

		if (markupXDD != null) {
			setMarkupXDD(markupXDD);
		}

		String markupXCN = (String)attributes.get("markupXCN");

		if (markupXCN != null) {
			setMarkupXCN(markupXCN);
		}

		String markupXCH = (String)attributes.get("markupXCH");

		if (markupXCH != null) {
			setMarkupXCH(markupXCH);
		}

		String issueTypeXCG = (String)attributes.get("issueTypeXCG");

		if (issueTypeXCG != null) {
			setIssueTypeXCG(issueTypeXCG);
		}

		String issueTypeXMY = (String)attributes.get("issueTypeXMY");

		if (issueTypeXMY != null) {
			setIssueTypeXMY(issueTypeXMY);
		}

		String issueTypeXCD = (String)attributes.get("issueTypeXCD");

		if (issueTypeXCD != null) {
			setIssueTypeXCD(issueTypeXCD);
		}

		String issueTypeXDD = (String)attributes.get("issueTypeXDD");

		if (issueTypeXDD != null) {
			setIssueTypeXDD(issueTypeXDD);
		}

		String issueTypeXCN = (String)attributes.get("issueTypeXCN");

		if (issueTypeXCN != null) {
			setIssueTypeXCN(issueTypeXCN);
		}

		String issueTypeXCH = (String)attributes.get("issueTypeXCH");

		if (issueTypeXCH != null) {
			setIssueTypeXCH(issueTypeXCH);
		}

		String issueTypeDescription = (String)attributes.get(
				"issueTypeDescription");

		if (issueTypeDescription != null) {
			setIssueTypeDescription(issueTypeDescription);
		}

		String applicantCeremonyDate = (String)attributes.get(
				"applicantCeremonyDate");

		if (applicantCeremonyDate != null) {
			setApplicantCeremonyDate(applicantCeremonyDate);
		}

		String applicantOperationPeriod = (String)attributes.get(
				"applicantOperationPeriod");

		if (applicantOperationPeriod != null) {
			setApplicantOperationPeriod(applicantOperationPeriod);
		}

		String applicantBusinessType = (String)attributes.get(
				"applicantBusinessType");

		if (applicantBusinessType != null) {
			setApplicantBusinessType(applicantBusinessType);
		}

		String applicantMetadata = (String)attributes.get("applicantMetadata");

		if (applicantMetadata != null) {
			setApplicantMetadata(applicantMetadata);
		}

		String applicantStatus = (String)attributes.get("applicantStatus");

		if (applicantStatus != null) {
			setApplicantStatus(applicantStatus);
		}

		Date modifyDate = (Date)attributes.get("modifyDate");

		if (modifyDate != null) {
			setModifyDate(modifyDate);
		}

		Date syncDate = (Date)attributes.get("syncDate");

		if (syncDate != null) {
			setSyncDate(syncDate);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getMtCore() {
		return _mtCore;
	}

	@Override
	public void setMtCore(long mtCore) {
		_columnBitmask |= MTCORE_COLUMN_BITMASK;

		if (!_setOriginalMtCore) {
			_setOriginalMtCore = true;

			_originalMtCore = _mtCore;
		}

		_mtCore = mtCore;
	}

	public long getOriginalMtCore() {
		return _originalMtCore;
	}

	@Override
	public String getMappingMA_CTY() {
		if (_mappingMA_CTY == null) {
			return StringPool.BLANK;
		}
		else {
			return _mappingMA_CTY;
		}
	}

	@Override
	public void setMappingMA_CTY(String mappingMA_CTY) {
		_columnBitmask |= MAPPINGMA_CTY_COLUMN_BITMASK;

		if (_originalMappingMA_CTY == null) {
			_originalMappingMA_CTY = _mappingMA_CTY;
		}

		_mappingMA_CTY = mappingMA_CTY;
	}

	public String getOriginalMappingMA_CTY() {
		return GetterUtil.getString(_originalMappingMA_CTY);
	}

	@Override
	public String getMappingTEN_CTY() {
		if (_mappingTEN_CTY == null) {
			return StringPool.BLANK;
		}
		else {
			return _mappingTEN_CTY;
		}
	}

	@Override
	public void setMappingTEN_CTY(String mappingTEN_CTY) {
		_columnBitmask |= MAPPINGTEN_CTY_COLUMN_BITMASK;

		if (_originalMappingTEN_CTY == null) {
			_originalMappingTEN_CTY = _mappingTEN_CTY;
		}

		_mappingTEN_CTY = mappingTEN_CTY;
	}

	public String getOriginalMappingTEN_CTY() {
		return GetterUtil.getString(_originalMappingTEN_CTY);
	}

	@Override
	public String getMappingDIA_CHI_CTY() {
		if (_mappingDIA_CHI_CTY == null) {
			return StringPool.BLANK;
		}
		else {
			return _mappingDIA_CHI_CTY;
		}
	}

	@Override
	public void setMappingDIA_CHI_CTY(String mappingDIA_CHI_CTY) {
		_mappingDIA_CHI_CTY = mappingDIA_CHI_CTY;
	}

	@Override
	public String getMappingNote() {
		if (_mappingNote == null) {
			return StringPool.BLANK;
		}
		else {
			return _mappingNote;
		}
	}

	@Override
	public void setMappingNote(String mappingNote) {
		_mappingNote = mappingNote;
	}

	@Override
	public String getMappingStatus() {
		if (_mappingStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _mappingStatus;
		}
	}

	@Override
	public void setMappingStatus(String mappingStatus) {
		_columnBitmask |= MAPPINGSTATUS_COLUMN_BITMASK;

		if (_originalMappingStatus == null) {
			_originalMappingStatus = _mappingStatus;
		}

		_mappingStatus = mappingStatus;
	}

	public String getOriginalMappingStatus() {
		return GetterUtil.getString(_originalMappingStatus);
	}

	@Override
	public String getApplicantCode() {
		if (_applicantCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantCode;
		}
	}

	@Override
	public void setApplicantCode(String applicantCode) {
		_columnBitmask |= APPLICANTCODE_COLUMN_BITMASK;

		if (_originalApplicantCode == null) {
			_originalApplicantCode = _applicantCode;
		}

		_applicantCode = applicantCode;
	}

	public String getOriginalApplicantCode() {
		return GetterUtil.getString(_originalApplicantCode);
	}

	@Override
	public String getApplicantName() {
		if (_applicantName == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantName;
		}
	}

	@Override
	public void setApplicantName(String applicantName) {
		_applicantName = applicantName;
	}

	@Override
	public String getApplicantAddress() {
		if (_applicantAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantAddress;
		}
	}

	@Override
	public void setApplicantAddress(String applicantAddress) {
		_applicantAddress = applicantAddress;
	}

	@Override
	public String getApplicantRepresentative() {
		if (_applicantRepresentative == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantRepresentative;
		}
	}

	@Override
	public void setApplicantRepresentative(String applicantRepresentative) {
		_applicantRepresentative = applicantRepresentative;
	}

	@Override
	public String getApplicantRepresentativeTitle() {
		if (_applicantRepresentativeTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantRepresentativeTitle;
		}
	}

	@Override
	public void setApplicantRepresentativeTitle(
		String applicantRepresentativeTitle) {
		_applicantRepresentativeTitle = applicantRepresentativeTitle;
	}

	@Override
	public String getApplicantPhone() {
		if (_applicantPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantPhone;
		}
	}

	@Override
	public void setApplicantPhone(String applicantPhone) {
		_applicantPhone = applicantPhone;
	}

	@Override
	public String getApplicantEmail() {
		if (_applicantEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantEmail;
		}
	}

	@Override
	public void setApplicantEmail(String applicantEmail) {
		_applicantEmail = applicantEmail;
	}

	@Override
	public String getApplicantFax() {
		if (_applicantFax == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantFax;
		}
	}

	@Override
	public void setApplicantFax(String applicantFax) {
		_applicantFax = applicantFax;
	}

	@Override
	public String getApplicantContactName() {
		if (_applicantContactName == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantContactName;
		}
	}

	@Override
	public void setApplicantContactName(String applicantContactName) {
		_applicantContactName = applicantContactName;
	}

	@Override
	public String getApplicantContactEmail() {
		if (_applicantContactEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantContactEmail;
		}
	}

	@Override
	public void setApplicantContactEmail(String applicantContactEmail) {
		_applicantContactEmail = applicantContactEmail;
	}

	@Override
	public String getApplicantContactPhone() {
		if (_applicantContactPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantContactPhone;
		}
	}

	@Override
	public void setApplicantContactPhone(String applicantContactPhone) {
		_applicantContactPhone = applicantContactPhone;
	}

	@Override
	public String getApplicantNationality() {
		if (_applicantNationality == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantNationality;
		}
	}

	@Override
	public void setApplicantNationality(String applicantNationality) {
		_applicantNationality = applicantNationality;
	}

	@Override
	public String getApplicantRegion() {
		if (_applicantRegion == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantRegion;
		}
	}

	@Override
	public void setApplicantRegion(String applicantRegion) {
		_columnBitmask |= APPLICANTREGION_COLUMN_BITMASK;

		if (_originalApplicantRegion == null) {
			_originalApplicantRegion = _applicantRegion;
		}

		_applicantRegion = applicantRegion;
	}

	public String getOriginalApplicantRegion() {
		return GetterUtil.getString(_originalApplicantRegion);
	}

	@Override
	public String getApplicantCity() {
		if (_applicantCity == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantCity;
		}
	}

	@Override
	public void setApplicantCity(String applicantCity) {
		_columnBitmask |= APPLICANTCITY_COLUMN_BITMASK;

		if (_originalApplicantCity == null) {
			_originalApplicantCity = _applicantCity;
		}

		_applicantCity = applicantCity;
	}

	public String getOriginalApplicantCity() {
		return GetterUtil.getString(_originalApplicantCity);
	}

	@Override
	public String getMarkupCorporation() {
		if (_markupCorporation == null) {
			return StringPool.BLANK;
		}
		else {
			return _markupCorporation;
		}
	}

	@Override
	public void setMarkupCorporation(String markupCorporation) {
		_markupCorporation = markupCorporation;
	}

	@Override
	public String getCorporationId() {
		if (_corporationId == null) {
			return StringPool.BLANK;
		}
		else {
			return _corporationId;
		}
	}

	@Override
	public void setCorporationId(String corporationId) {
		_corporationId = corporationId;
	}

	@Override
	public String getMarkupDesigner() {
		if (_markupDesigner == null) {
			return StringPool.BLANK;
		}
		else {
			return _markupDesigner;
		}
	}

	@Override
	public void setMarkupDesigner(String markupDesigner) {
		_markupDesigner = markupDesigner;
	}

	@Override
	public String getMarkupOverseasManufacturer() {
		if (_markupOverseasManufacturer == null) {
			return StringPool.BLANK;
		}
		else {
			return _markupOverseasManufacturer;
		}
	}

	@Override
	public void setMarkupOverseasManufacturer(String markupOverseasManufacturer) {
		_markupOverseasManufacturer = markupOverseasManufacturer;
	}

	@Override
	public String getMarkupDomesticsManufacturer() {
		if (_markupDomesticsManufacturer == null) {
			return StringPool.BLANK;
		}
		else {
			return _markupDomesticsManufacturer;
		}
	}

	@Override
	public void setMarkupDomesticsManufacturer(
		String markupDomesticsManufacturer) {
		_markupDomesticsManufacturer = markupDomesticsManufacturer;
	}

	@Override
	public String getMarkupImporter() {
		if (_markupImporter == null) {
			return StringPool.BLANK;
		}
		else {
			return _markupImporter;
		}
	}

	@Override
	public void setMarkupImporter(String markupImporter) {
		_markupImporter = markupImporter;
	}

	@Override
	public String getMarkupComponentXCG() {
		if (_markupComponentXCG == null) {
			return StringPool.BLANK;
		}
		else {
			return _markupComponentXCG;
		}
	}

	@Override
	public void setMarkupComponentXCG(String markupComponentXCG) {
		_markupComponentXCG = markupComponentXCG;
	}

	@Override
	public String getMarkupComponentXMY() {
		if (_markupComponentXMY == null) {
			return StringPool.BLANK;
		}
		else {
			return _markupComponentXMY;
		}
	}

	@Override
	public void setMarkupComponentXMY(String markupComponentXMY) {
		_markupComponentXMY = markupComponentXMY;
	}

	@Override
	public String getMarkupComponentXCD() {
		if (_markupComponentXCD == null) {
			return StringPool.BLANK;
		}
		else {
			return _markupComponentXCD;
		}
	}

	@Override
	public void setMarkupComponentXCD(String markupComponentXCD) {
		_markupComponentXCD = markupComponentXCD;
	}

	@Override
	public String getMarkupComponentXDD() {
		if (_markupComponentXDD == null) {
			return StringPool.BLANK;
		}
		else {
			return _markupComponentXDD;
		}
	}

	@Override
	public void setMarkupComponentXDD(String markupComponentXDD) {
		_markupComponentXDD = markupComponentXDD;
	}

	@Override
	public String getMarkupComponentXCN() {
		if (_markupComponentXCN == null) {
			return StringPool.BLANK;
		}
		else {
			return _markupComponentXCN;
		}
	}

	@Override
	public void setMarkupComponentXCN(String markupComponentXCN) {
		_markupComponentXCN = markupComponentXCN;
	}

	@Override
	public String getMarkupComponentXCH() {
		if (_markupComponentXCH == null) {
			return StringPool.BLANK;
		}
		else {
			return _markupComponentXCH;
		}
	}

	@Override
	public void setMarkupComponentXCH(String markupComponentXCH) {
		_markupComponentXCH = markupComponentXCH;
	}

	@Override
	public String getMarkupXCG() {
		if (_markupXCG == null) {
			return StringPool.BLANK;
		}
		else {
			return _markupXCG;
		}
	}

	@Override
	public void setMarkupXCG(String markupXCG) {
		_markupXCG = markupXCG;
	}

	@Override
	public String getMarkupXMY() {
		if (_markupXMY == null) {
			return StringPool.BLANK;
		}
		else {
			return _markupXMY;
		}
	}

	@Override
	public void setMarkupXMY(String markupXMY) {
		_markupXMY = markupXMY;
	}

	@Override
	public String getMarkupXCD() {
		if (_markupXCD == null) {
			return StringPool.BLANK;
		}
		else {
			return _markupXCD;
		}
	}

	@Override
	public void setMarkupXCD(String markupXCD) {
		_markupXCD = markupXCD;
	}

	@Override
	public String getMarkupXDD() {
		if (_markupXDD == null) {
			return StringPool.BLANK;
		}
		else {
			return _markupXDD;
		}
	}

	@Override
	public void setMarkupXDD(String markupXDD) {
		_markupXDD = markupXDD;
	}

	@Override
	public String getMarkupXCN() {
		if (_markupXCN == null) {
			return StringPool.BLANK;
		}
		else {
			return _markupXCN;
		}
	}

	@Override
	public void setMarkupXCN(String markupXCN) {
		_markupXCN = markupXCN;
	}

	@Override
	public String getMarkupXCH() {
		if (_markupXCH == null) {
			return StringPool.BLANK;
		}
		else {
			return _markupXCH;
		}
	}

	@Override
	public void setMarkupXCH(String markupXCH) {
		_markupXCH = markupXCH;
	}

	@Override
	public String getIssueTypeXCG() {
		if (_issueTypeXCG == null) {
			return StringPool.BLANK;
		}
		else {
			return _issueTypeXCG;
		}
	}

	@Override
	public void setIssueTypeXCG(String issueTypeXCG) {
		_issueTypeXCG = issueTypeXCG;
	}

	@Override
	public String getIssueTypeXMY() {
		if (_issueTypeXMY == null) {
			return StringPool.BLANK;
		}
		else {
			return _issueTypeXMY;
		}
	}

	@Override
	public void setIssueTypeXMY(String issueTypeXMY) {
		_issueTypeXMY = issueTypeXMY;
	}

	@Override
	public String getIssueTypeXCD() {
		if (_issueTypeXCD == null) {
			return StringPool.BLANK;
		}
		else {
			return _issueTypeXCD;
		}
	}

	@Override
	public void setIssueTypeXCD(String issueTypeXCD) {
		_issueTypeXCD = issueTypeXCD;
	}

	@Override
	public String getIssueTypeXDD() {
		if (_issueTypeXDD == null) {
			return StringPool.BLANK;
		}
		else {
			return _issueTypeXDD;
		}
	}

	@Override
	public void setIssueTypeXDD(String issueTypeXDD) {
		_issueTypeXDD = issueTypeXDD;
	}

	@Override
	public String getIssueTypeXCN() {
		if (_issueTypeXCN == null) {
			return StringPool.BLANK;
		}
		else {
			return _issueTypeXCN;
		}
	}

	@Override
	public void setIssueTypeXCN(String issueTypeXCN) {
		_issueTypeXCN = issueTypeXCN;
	}

	@Override
	public String getIssueTypeXCH() {
		if (_issueTypeXCH == null) {
			return StringPool.BLANK;
		}
		else {
			return _issueTypeXCH;
		}
	}

	@Override
	public void setIssueTypeXCH(String issueTypeXCH) {
		_issueTypeXCH = issueTypeXCH;
	}

	@Override
	public String getIssueTypeDescription() {
		if (_issueTypeDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _issueTypeDescription;
		}
	}

	@Override
	public void setIssueTypeDescription(String issueTypeDescription) {
		_issueTypeDescription = issueTypeDescription;
	}

	@Override
	public String getApplicantCeremonyDate() {
		if (_applicantCeremonyDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantCeremonyDate;
		}
	}

	@Override
	public void setApplicantCeremonyDate(String applicantCeremonyDate) {
		_applicantCeremonyDate = applicantCeremonyDate;
	}

	@Override
	public String getApplicantOperationPeriod() {
		if (_applicantOperationPeriod == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantOperationPeriod;
		}
	}

	@Override
	public void setApplicantOperationPeriod(String applicantOperationPeriod) {
		_applicantOperationPeriod = applicantOperationPeriod;
	}

	@Override
	public String getApplicantBusinessType() {
		if (_applicantBusinessType == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantBusinessType;
		}
	}

	@Override
	public void setApplicantBusinessType(String applicantBusinessType) {
		_applicantBusinessType = applicantBusinessType;
	}

	@Override
	public String getApplicantMetadata() {
		if (_applicantMetadata == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantMetadata;
		}
	}

	@Override
	public void setApplicantMetadata(String applicantMetadata) {
		_applicantMetadata = applicantMetadata;
	}

	@Override
	public String getApplicantStatus() {
		if (_applicantStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantStatus;
		}
	}

	@Override
	public void setApplicantStatus(String applicantStatus) {
		_columnBitmask |= APPLICANTSTATUS_COLUMN_BITMASK;

		if (_originalApplicantStatus == null) {
			_originalApplicantStatus = _applicantStatus;
		}

		_applicantStatus = applicantStatus;
	}

	public String getOriginalApplicantStatus() {
		return GetterUtil.getString(_originalApplicantStatus);
	}

	@Override
	public Date getModifyDate() {
		return _modifyDate;
	}

	@Override
	public void setModifyDate(Date modifyDate) {
		_columnBitmask = -1L;

		_modifyDate = modifyDate;
	}

	@Override
	public Date getSyncDate() {
		return _syncDate;
	}

	@Override
	public void setSyncDate(Date syncDate) {
		_syncDate = syncDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VRApplicantProfileHistory.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VRApplicantProfileHistory toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VRApplicantProfileHistory)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VRApplicantProfileHistoryImpl vrApplicantProfileHistoryImpl = new VRApplicantProfileHistoryImpl();

		vrApplicantProfileHistoryImpl.setId(getId());
		vrApplicantProfileHistoryImpl.setMtCore(getMtCore());
		vrApplicantProfileHistoryImpl.setMappingMA_CTY(getMappingMA_CTY());
		vrApplicantProfileHistoryImpl.setMappingTEN_CTY(getMappingTEN_CTY());
		vrApplicantProfileHistoryImpl.setMappingDIA_CHI_CTY(getMappingDIA_CHI_CTY());
		vrApplicantProfileHistoryImpl.setMappingNote(getMappingNote());
		vrApplicantProfileHistoryImpl.setMappingStatus(getMappingStatus());
		vrApplicantProfileHistoryImpl.setApplicantCode(getApplicantCode());
		vrApplicantProfileHistoryImpl.setApplicantName(getApplicantName());
		vrApplicantProfileHistoryImpl.setApplicantAddress(getApplicantAddress());
		vrApplicantProfileHistoryImpl.setApplicantRepresentative(getApplicantRepresentative());
		vrApplicantProfileHistoryImpl.setApplicantRepresentativeTitle(getApplicantRepresentativeTitle());
		vrApplicantProfileHistoryImpl.setApplicantPhone(getApplicantPhone());
		vrApplicantProfileHistoryImpl.setApplicantEmail(getApplicantEmail());
		vrApplicantProfileHistoryImpl.setApplicantFax(getApplicantFax());
		vrApplicantProfileHistoryImpl.setApplicantContactName(getApplicantContactName());
		vrApplicantProfileHistoryImpl.setApplicantContactEmail(getApplicantContactEmail());
		vrApplicantProfileHistoryImpl.setApplicantContactPhone(getApplicantContactPhone());
		vrApplicantProfileHistoryImpl.setApplicantNationality(getApplicantNationality());
		vrApplicantProfileHistoryImpl.setApplicantRegion(getApplicantRegion());
		vrApplicantProfileHistoryImpl.setApplicantCity(getApplicantCity());
		vrApplicantProfileHistoryImpl.setMarkupCorporation(getMarkupCorporation());
		vrApplicantProfileHistoryImpl.setCorporationId(getCorporationId());
		vrApplicantProfileHistoryImpl.setMarkupDesigner(getMarkupDesigner());
		vrApplicantProfileHistoryImpl.setMarkupOverseasManufacturer(getMarkupOverseasManufacturer());
		vrApplicantProfileHistoryImpl.setMarkupDomesticsManufacturer(getMarkupDomesticsManufacturer());
		vrApplicantProfileHistoryImpl.setMarkupImporter(getMarkupImporter());
		vrApplicantProfileHistoryImpl.setMarkupComponentXCG(getMarkupComponentXCG());
		vrApplicantProfileHistoryImpl.setMarkupComponentXMY(getMarkupComponentXMY());
		vrApplicantProfileHistoryImpl.setMarkupComponentXCD(getMarkupComponentXCD());
		vrApplicantProfileHistoryImpl.setMarkupComponentXDD(getMarkupComponentXDD());
		vrApplicantProfileHistoryImpl.setMarkupComponentXCN(getMarkupComponentXCN());
		vrApplicantProfileHistoryImpl.setMarkupComponentXCH(getMarkupComponentXCH());
		vrApplicantProfileHistoryImpl.setMarkupXCG(getMarkupXCG());
		vrApplicantProfileHistoryImpl.setMarkupXMY(getMarkupXMY());
		vrApplicantProfileHistoryImpl.setMarkupXCD(getMarkupXCD());
		vrApplicantProfileHistoryImpl.setMarkupXDD(getMarkupXDD());
		vrApplicantProfileHistoryImpl.setMarkupXCN(getMarkupXCN());
		vrApplicantProfileHistoryImpl.setMarkupXCH(getMarkupXCH());
		vrApplicantProfileHistoryImpl.setIssueTypeXCG(getIssueTypeXCG());
		vrApplicantProfileHistoryImpl.setIssueTypeXMY(getIssueTypeXMY());
		vrApplicantProfileHistoryImpl.setIssueTypeXCD(getIssueTypeXCD());
		vrApplicantProfileHistoryImpl.setIssueTypeXDD(getIssueTypeXDD());
		vrApplicantProfileHistoryImpl.setIssueTypeXCN(getIssueTypeXCN());
		vrApplicantProfileHistoryImpl.setIssueTypeXCH(getIssueTypeXCH());
		vrApplicantProfileHistoryImpl.setIssueTypeDescription(getIssueTypeDescription());
		vrApplicantProfileHistoryImpl.setApplicantCeremonyDate(getApplicantCeremonyDate());
		vrApplicantProfileHistoryImpl.setApplicantOperationPeriod(getApplicantOperationPeriod());
		vrApplicantProfileHistoryImpl.setApplicantBusinessType(getApplicantBusinessType());
		vrApplicantProfileHistoryImpl.setApplicantMetadata(getApplicantMetadata());
		vrApplicantProfileHistoryImpl.setApplicantStatus(getApplicantStatus());
		vrApplicantProfileHistoryImpl.setModifyDate(getModifyDate());
		vrApplicantProfileHistoryImpl.setSyncDate(getSyncDate());

		vrApplicantProfileHistoryImpl.resetOriginalValues();

		return vrApplicantProfileHistoryImpl;
	}

	@Override
	public int compareTo(VRApplicantProfileHistory vrApplicantProfileHistory) {
		int value = 0;

		value = DateUtil.compareTo(getModifyDate(),
				vrApplicantProfileHistory.getModifyDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VRApplicantProfileHistory)) {
			return false;
		}

		VRApplicantProfileHistory vrApplicantProfileHistory = (VRApplicantProfileHistory)obj;

		long primaryKey = vrApplicantProfileHistory.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VRApplicantProfileHistoryModelImpl vrApplicantProfileHistoryModelImpl = this;

		vrApplicantProfileHistoryModelImpl._originalMtCore = vrApplicantProfileHistoryModelImpl._mtCore;

		vrApplicantProfileHistoryModelImpl._setOriginalMtCore = false;

		vrApplicantProfileHistoryModelImpl._originalMappingMA_CTY = vrApplicantProfileHistoryModelImpl._mappingMA_CTY;

		vrApplicantProfileHistoryModelImpl._originalMappingTEN_CTY = vrApplicantProfileHistoryModelImpl._mappingTEN_CTY;

		vrApplicantProfileHistoryModelImpl._originalMappingStatus = vrApplicantProfileHistoryModelImpl._mappingStatus;

		vrApplicantProfileHistoryModelImpl._originalApplicantCode = vrApplicantProfileHistoryModelImpl._applicantCode;

		vrApplicantProfileHistoryModelImpl._originalApplicantRegion = vrApplicantProfileHistoryModelImpl._applicantRegion;

		vrApplicantProfileHistoryModelImpl._originalApplicantCity = vrApplicantProfileHistoryModelImpl._applicantCity;

		vrApplicantProfileHistoryModelImpl._originalApplicantStatus = vrApplicantProfileHistoryModelImpl._applicantStatus;

		vrApplicantProfileHistoryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VRApplicantProfileHistory> toCacheModel() {
		VRApplicantProfileHistoryCacheModel vrApplicantProfileHistoryCacheModel = new VRApplicantProfileHistoryCacheModel();

		vrApplicantProfileHistoryCacheModel.id = getId();

		vrApplicantProfileHistoryCacheModel.mtCore = getMtCore();

		vrApplicantProfileHistoryCacheModel.mappingMA_CTY = getMappingMA_CTY();

		String mappingMA_CTY = vrApplicantProfileHistoryCacheModel.mappingMA_CTY;

		if ((mappingMA_CTY != null) && (mappingMA_CTY.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.mappingMA_CTY = null;
		}

		vrApplicantProfileHistoryCacheModel.mappingTEN_CTY = getMappingTEN_CTY();

		String mappingTEN_CTY = vrApplicantProfileHistoryCacheModel.mappingTEN_CTY;

		if ((mappingTEN_CTY != null) && (mappingTEN_CTY.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.mappingTEN_CTY = null;
		}

		vrApplicantProfileHistoryCacheModel.mappingDIA_CHI_CTY = getMappingDIA_CHI_CTY();

		String mappingDIA_CHI_CTY = vrApplicantProfileHistoryCacheModel.mappingDIA_CHI_CTY;

		if ((mappingDIA_CHI_CTY != null) && (mappingDIA_CHI_CTY.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.mappingDIA_CHI_CTY = null;
		}

		vrApplicantProfileHistoryCacheModel.mappingNote = getMappingNote();

		String mappingNote = vrApplicantProfileHistoryCacheModel.mappingNote;

		if ((mappingNote != null) && (mappingNote.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.mappingNote = null;
		}

		vrApplicantProfileHistoryCacheModel.mappingStatus = getMappingStatus();

		String mappingStatus = vrApplicantProfileHistoryCacheModel.mappingStatus;

		if ((mappingStatus != null) && (mappingStatus.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.mappingStatus = null;
		}

		vrApplicantProfileHistoryCacheModel.applicantCode = getApplicantCode();

		String applicantCode = vrApplicantProfileHistoryCacheModel.applicantCode;

		if ((applicantCode != null) && (applicantCode.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.applicantCode = null;
		}

		vrApplicantProfileHistoryCacheModel.applicantName = getApplicantName();

		String applicantName = vrApplicantProfileHistoryCacheModel.applicantName;

		if ((applicantName != null) && (applicantName.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.applicantName = null;
		}

		vrApplicantProfileHistoryCacheModel.applicantAddress = getApplicantAddress();

		String applicantAddress = vrApplicantProfileHistoryCacheModel.applicantAddress;

		if ((applicantAddress != null) && (applicantAddress.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.applicantAddress = null;
		}

		vrApplicantProfileHistoryCacheModel.applicantRepresentative = getApplicantRepresentative();

		String applicantRepresentative = vrApplicantProfileHistoryCacheModel.applicantRepresentative;

		if ((applicantRepresentative != null) &&
				(applicantRepresentative.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.applicantRepresentative = null;
		}

		vrApplicantProfileHistoryCacheModel.applicantRepresentativeTitle = getApplicantRepresentativeTitle();

		String applicantRepresentativeTitle = vrApplicantProfileHistoryCacheModel.applicantRepresentativeTitle;

		if ((applicantRepresentativeTitle != null) &&
				(applicantRepresentativeTitle.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.applicantRepresentativeTitle = null;
		}

		vrApplicantProfileHistoryCacheModel.applicantPhone = getApplicantPhone();

		String applicantPhone = vrApplicantProfileHistoryCacheModel.applicantPhone;

		if ((applicantPhone != null) && (applicantPhone.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.applicantPhone = null;
		}

		vrApplicantProfileHistoryCacheModel.applicantEmail = getApplicantEmail();

		String applicantEmail = vrApplicantProfileHistoryCacheModel.applicantEmail;

		if ((applicantEmail != null) && (applicantEmail.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.applicantEmail = null;
		}

		vrApplicantProfileHistoryCacheModel.applicantFax = getApplicantFax();

		String applicantFax = vrApplicantProfileHistoryCacheModel.applicantFax;

		if ((applicantFax != null) && (applicantFax.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.applicantFax = null;
		}

		vrApplicantProfileHistoryCacheModel.applicantContactName = getApplicantContactName();

		String applicantContactName = vrApplicantProfileHistoryCacheModel.applicantContactName;

		if ((applicantContactName != null) &&
				(applicantContactName.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.applicantContactName = null;
		}

		vrApplicantProfileHistoryCacheModel.applicantContactEmail = getApplicantContactEmail();

		String applicantContactEmail = vrApplicantProfileHistoryCacheModel.applicantContactEmail;

		if ((applicantContactEmail != null) &&
				(applicantContactEmail.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.applicantContactEmail = null;
		}

		vrApplicantProfileHistoryCacheModel.applicantContactPhone = getApplicantContactPhone();

		String applicantContactPhone = vrApplicantProfileHistoryCacheModel.applicantContactPhone;

		if ((applicantContactPhone != null) &&
				(applicantContactPhone.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.applicantContactPhone = null;
		}

		vrApplicantProfileHistoryCacheModel.applicantNationality = getApplicantNationality();

		String applicantNationality = vrApplicantProfileHistoryCacheModel.applicantNationality;

		if ((applicantNationality != null) &&
				(applicantNationality.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.applicantNationality = null;
		}

		vrApplicantProfileHistoryCacheModel.applicantRegion = getApplicantRegion();

		String applicantRegion = vrApplicantProfileHistoryCacheModel.applicantRegion;

		if ((applicantRegion != null) && (applicantRegion.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.applicantRegion = null;
		}

		vrApplicantProfileHistoryCacheModel.applicantCity = getApplicantCity();

		String applicantCity = vrApplicantProfileHistoryCacheModel.applicantCity;

		if ((applicantCity != null) && (applicantCity.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.applicantCity = null;
		}

		vrApplicantProfileHistoryCacheModel.markupCorporation = getMarkupCorporation();

		String markupCorporation = vrApplicantProfileHistoryCacheModel.markupCorporation;

		if ((markupCorporation != null) && (markupCorporation.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.markupCorporation = null;
		}

		vrApplicantProfileHistoryCacheModel.corporationId = getCorporationId();

		String corporationId = vrApplicantProfileHistoryCacheModel.corporationId;

		if ((corporationId != null) && (corporationId.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.corporationId = null;
		}

		vrApplicantProfileHistoryCacheModel.markupDesigner = getMarkupDesigner();

		String markupDesigner = vrApplicantProfileHistoryCacheModel.markupDesigner;

		if ((markupDesigner != null) && (markupDesigner.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.markupDesigner = null;
		}

		vrApplicantProfileHistoryCacheModel.markupOverseasManufacturer = getMarkupOverseasManufacturer();

		String markupOverseasManufacturer = vrApplicantProfileHistoryCacheModel.markupOverseasManufacturer;

		if ((markupOverseasManufacturer != null) &&
				(markupOverseasManufacturer.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.markupOverseasManufacturer = null;
		}

		vrApplicantProfileHistoryCacheModel.markupDomesticsManufacturer = getMarkupDomesticsManufacturer();

		String markupDomesticsManufacturer = vrApplicantProfileHistoryCacheModel.markupDomesticsManufacturer;

		if ((markupDomesticsManufacturer != null) &&
				(markupDomesticsManufacturer.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.markupDomesticsManufacturer = null;
		}

		vrApplicantProfileHistoryCacheModel.markupImporter = getMarkupImporter();

		String markupImporter = vrApplicantProfileHistoryCacheModel.markupImporter;

		if ((markupImporter != null) && (markupImporter.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.markupImporter = null;
		}

		vrApplicantProfileHistoryCacheModel.markupComponentXCG = getMarkupComponentXCG();

		String markupComponentXCG = vrApplicantProfileHistoryCacheModel.markupComponentXCG;

		if ((markupComponentXCG != null) && (markupComponentXCG.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.markupComponentXCG = null;
		}

		vrApplicantProfileHistoryCacheModel.markupComponentXMY = getMarkupComponentXMY();

		String markupComponentXMY = vrApplicantProfileHistoryCacheModel.markupComponentXMY;

		if ((markupComponentXMY != null) && (markupComponentXMY.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.markupComponentXMY = null;
		}

		vrApplicantProfileHistoryCacheModel.markupComponentXCD = getMarkupComponentXCD();

		String markupComponentXCD = vrApplicantProfileHistoryCacheModel.markupComponentXCD;

		if ((markupComponentXCD != null) && (markupComponentXCD.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.markupComponentXCD = null;
		}

		vrApplicantProfileHistoryCacheModel.markupComponentXDD = getMarkupComponentXDD();

		String markupComponentXDD = vrApplicantProfileHistoryCacheModel.markupComponentXDD;

		if ((markupComponentXDD != null) && (markupComponentXDD.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.markupComponentXDD = null;
		}

		vrApplicantProfileHistoryCacheModel.markupComponentXCN = getMarkupComponentXCN();

		String markupComponentXCN = vrApplicantProfileHistoryCacheModel.markupComponentXCN;

		if ((markupComponentXCN != null) && (markupComponentXCN.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.markupComponentXCN = null;
		}

		vrApplicantProfileHistoryCacheModel.markupComponentXCH = getMarkupComponentXCH();

		String markupComponentXCH = vrApplicantProfileHistoryCacheModel.markupComponentXCH;

		if ((markupComponentXCH != null) && (markupComponentXCH.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.markupComponentXCH = null;
		}

		vrApplicantProfileHistoryCacheModel.markupXCG = getMarkupXCG();

		String markupXCG = vrApplicantProfileHistoryCacheModel.markupXCG;

		if ((markupXCG != null) && (markupXCG.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.markupXCG = null;
		}

		vrApplicantProfileHistoryCacheModel.markupXMY = getMarkupXMY();

		String markupXMY = vrApplicantProfileHistoryCacheModel.markupXMY;

		if ((markupXMY != null) && (markupXMY.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.markupXMY = null;
		}

		vrApplicantProfileHistoryCacheModel.markupXCD = getMarkupXCD();

		String markupXCD = vrApplicantProfileHistoryCacheModel.markupXCD;

		if ((markupXCD != null) && (markupXCD.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.markupXCD = null;
		}

		vrApplicantProfileHistoryCacheModel.markupXDD = getMarkupXDD();

		String markupXDD = vrApplicantProfileHistoryCacheModel.markupXDD;

		if ((markupXDD != null) && (markupXDD.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.markupXDD = null;
		}

		vrApplicantProfileHistoryCacheModel.markupXCN = getMarkupXCN();

		String markupXCN = vrApplicantProfileHistoryCacheModel.markupXCN;

		if ((markupXCN != null) && (markupXCN.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.markupXCN = null;
		}

		vrApplicantProfileHistoryCacheModel.markupXCH = getMarkupXCH();

		String markupXCH = vrApplicantProfileHistoryCacheModel.markupXCH;

		if ((markupXCH != null) && (markupXCH.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.markupXCH = null;
		}

		vrApplicantProfileHistoryCacheModel.issueTypeXCG = getIssueTypeXCG();

		String issueTypeXCG = vrApplicantProfileHistoryCacheModel.issueTypeXCG;

		if ((issueTypeXCG != null) && (issueTypeXCG.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.issueTypeXCG = null;
		}

		vrApplicantProfileHistoryCacheModel.issueTypeXMY = getIssueTypeXMY();

		String issueTypeXMY = vrApplicantProfileHistoryCacheModel.issueTypeXMY;

		if ((issueTypeXMY != null) && (issueTypeXMY.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.issueTypeXMY = null;
		}

		vrApplicantProfileHistoryCacheModel.issueTypeXCD = getIssueTypeXCD();

		String issueTypeXCD = vrApplicantProfileHistoryCacheModel.issueTypeXCD;

		if ((issueTypeXCD != null) && (issueTypeXCD.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.issueTypeXCD = null;
		}

		vrApplicantProfileHistoryCacheModel.issueTypeXDD = getIssueTypeXDD();

		String issueTypeXDD = vrApplicantProfileHistoryCacheModel.issueTypeXDD;

		if ((issueTypeXDD != null) && (issueTypeXDD.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.issueTypeXDD = null;
		}

		vrApplicantProfileHistoryCacheModel.issueTypeXCN = getIssueTypeXCN();

		String issueTypeXCN = vrApplicantProfileHistoryCacheModel.issueTypeXCN;

		if ((issueTypeXCN != null) && (issueTypeXCN.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.issueTypeXCN = null;
		}

		vrApplicantProfileHistoryCacheModel.issueTypeXCH = getIssueTypeXCH();

		String issueTypeXCH = vrApplicantProfileHistoryCacheModel.issueTypeXCH;

		if ((issueTypeXCH != null) && (issueTypeXCH.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.issueTypeXCH = null;
		}

		vrApplicantProfileHistoryCacheModel.issueTypeDescription = getIssueTypeDescription();

		String issueTypeDescription = vrApplicantProfileHistoryCacheModel.issueTypeDescription;

		if ((issueTypeDescription != null) &&
				(issueTypeDescription.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.issueTypeDescription = null;
		}

		vrApplicantProfileHistoryCacheModel.applicantCeremonyDate = getApplicantCeremonyDate();

		String applicantCeremonyDate = vrApplicantProfileHistoryCacheModel.applicantCeremonyDate;

		if ((applicantCeremonyDate != null) &&
				(applicantCeremonyDate.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.applicantCeremonyDate = null;
		}

		vrApplicantProfileHistoryCacheModel.applicantOperationPeriod = getApplicantOperationPeriod();

		String applicantOperationPeriod = vrApplicantProfileHistoryCacheModel.applicantOperationPeriod;

		if ((applicantOperationPeriod != null) &&
				(applicantOperationPeriod.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.applicantOperationPeriod = null;
		}

		vrApplicantProfileHistoryCacheModel.applicantBusinessType = getApplicantBusinessType();

		String applicantBusinessType = vrApplicantProfileHistoryCacheModel.applicantBusinessType;

		if ((applicantBusinessType != null) &&
				(applicantBusinessType.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.applicantBusinessType = null;
		}

		vrApplicantProfileHistoryCacheModel.applicantMetadata = getApplicantMetadata();

		String applicantMetadata = vrApplicantProfileHistoryCacheModel.applicantMetadata;

		if ((applicantMetadata != null) && (applicantMetadata.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.applicantMetadata = null;
		}

		vrApplicantProfileHistoryCacheModel.applicantStatus = getApplicantStatus();

		String applicantStatus = vrApplicantProfileHistoryCacheModel.applicantStatus;

		if ((applicantStatus != null) && (applicantStatus.length() == 0)) {
			vrApplicantProfileHistoryCacheModel.applicantStatus = null;
		}

		Date modifyDate = getModifyDate();

		if (modifyDate != null) {
			vrApplicantProfileHistoryCacheModel.modifyDate = modifyDate.getTime();
		}
		else {
			vrApplicantProfileHistoryCacheModel.modifyDate = Long.MIN_VALUE;
		}

		Date syncDate = getSyncDate();

		if (syncDate != null) {
			vrApplicantProfileHistoryCacheModel.syncDate = syncDate.getTime();
		}
		else {
			vrApplicantProfileHistoryCacheModel.syncDate = Long.MIN_VALUE;
		}

		return vrApplicantProfileHistoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(107);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", mtCore=");
		sb.append(getMtCore());
		sb.append(", mappingMA_CTY=");
		sb.append(getMappingMA_CTY());
		sb.append(", mappingTEN_CTY=");
		sb.append(getMappingTEN_CTY());
		sb.append(", mappingDIA_CHI_CTY=");
		sb.append(getMappingDIA_CHI_CTY());
		sb.append(", mappingNote=");
		sb.append(getMappingNote());
		sb.append(", mappingStatus=");
		sb.append(getMappingStatus());
		sb.append(", applicantCode=");
		sb.append(getApplicantCode());
		sb.append(", applicantName=");
		sb.append(getApplicantName());
		sb.append(", applicantAddress=");
		sb.append(getApplicantAddress());
		sb.append(", applicantRepresentative=");
		sb.append(getApplicantRepresentative());
		sb.append(", applicantRepresentativeTitle=");
		sb.append(getApplicantRepresentativeTitle());
		sb.append(", applicantPhone=");
		sb.append(getApplicantPhone());
		sb.append(", applicantEmail=");
		sb.append(getApplicantEmail());
		sb.append(", applicantFax=");
		sb.append(getApplicantFax());
		sb.append(", applicantContactName=");
		sb.append(getApplicantContactName());
		sb.append(", applicantContactEmail=");
		sb.append(getApplicantContactEmail());
		sb.append(", applicantContactPhone=");
		sb.append(getApplicantContactPhone());
		sb.append(", applicantNationality=");
		sb.append(getApplicantNationality());
		sb.append(", applicantRegion=");
		sb.append(getApplicantRegion());
		sb.append(", applicantCity=");
		sb.append(getApplicantCity());
		sb.append(", markupCorporation=");
		sb.append(getMarkupCorporation());
		sb.append(", corporationId=");
		sb.append(getCorporationId());
		sb.append(", markupDesigner=");
		sb.append(getMarkupDesigner());
		sb.append(", markupOverseasManufacturer=");
		sb.append(getMarkupOverseasManufacturer());
		sb.append(", markupDomesticsManufacturer=");
		sb.append(getMarkupDomesticsManufacturer());
		sb.append(", markupImporter=");
		sb.append(getMarkupImporter());
		sb.append(", markupComponentXCG=");
		sb.append(getMarkupComponentXCG());
		sb.append(", markupComponentXMY=");
		sb.append(getMarkupComponentXMY());
		sb.append(", markupComponentXCD=");
		sb.append(getMarkupComponentXCD());
		sb.append(", markupComponentXDD=");
		sb.append(getMarkupComponentXDD());
		sb.append(", markupComponentXCN=");
		sb.append(getMarkupComponentXCN());
		sb.append(", markupComponentXCH=");
		sb.append(getMarkupComponentXCH());
		sb.append(", markupXCG=");
		sb.append(getMarkupXCG());
		sb.append(", markupXMY=");
		sb.append(getMarkupXMY());
		sb.append(", markupXCD=");
		sb.append(getMarkupXCD());
		sb.append(", markupXDD=");
		sb.append(getMarkupXDD());
		sb.append(", markupXCN=");
		sb.append(getMarkupXCN());
		sb.append(", markupXCH=");
		sb.append(getMarkupXCH());
		sb.append(", issueTypeXCG=");
		sb.append(getIssueTypeXCG());
		sb.append(", issueTypeXMY=");
		sb.append(getIssueTypeXMY());
		sb.append(", issueTypeXCD=");
		sb.append(getIssueTypeXCD());
		sb.append(", issueTypeXDD=");
		sb.append(getIssueTypeXDD());
		sb.append(", issueTypeXCN=");
		sb.append(getIssueTypeXCN());
		sb.append(", issueTypeXCH=");
		sb.append(getIssueTypeXCH());
		sb.append(", issueTypeDescription=");
		sb.append(getIssueTypeDescription());
		sb.append(", applicantCeremonyDate=");
		sb.append(getApplicantCeremonyDate());
		sb.append(", applicantOperationPeriod=");
		sb.append(getApplicantOperationPeriod());
		sb.append(", applicantBusinessType=");
		sb.append(getApplicantBusinessType());
		sb.append(", applicantMetadata=");
		sb.append(getApplicantMetadata());
		sb.append(", applicantStatus=");
		sb.append(getApplicantStatus());
		sb.append(", modifyDate=");
		sb.append(getModifyDate());
		sb.append(", syncDate=");
		sb.append(getSyncDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(163);

		sb.append("<model><model-name>");
		sb.append("com.fds.vr.business.model.VRApplicantProfileHistory");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mtCore</column-name><column-value><![CDATA[");
		sb.append(getMtCore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mappingMA_CTY</column-name><column-value><![CDATA[");
		sb.append(getMappingMA_CTY());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mappingTEN_CTY</column-name><column-value><![CDATA[");
		sb.append(getMappingTEN_CTY());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mappingDIA_CHI_CTY</column-name><column-value><![CDATA[");
		sb.append(getMappingDIA_CHI_CTY());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mappingNote</column-name><column-value><![CDATA[");
		sb.append(getMappingNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mappingStatus</column-name><column-value><![CDATA[");
		sb.append(getMappingStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantCode</column-name><column-value><![CDATA[");
		sb.append(getApplicantCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantName</column-name><column-value><![CDATA[");
		sb.append(getApplicantName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantAddress</column-name><column-value><![CDATA[");
		sb.append(getApplicantAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantRepresentative</column-name><column-value><![CDATA[");
		sb.append(getApplicantRepresentative());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantRepresentativeTitle</column-name><column-value><![CDATA[");
		sb.append(getApplicantRepresentativeTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantPhone</column-name><column-value><![CDATA[");
		sb.append(getApplicantPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantEmail</column-name><column-value><![CDATA[");
		sb.append(getApplicantEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantFax</column-name><column-value><![CDATA[");
		sb.append(getApplicantFax());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantContactName</column-name><column-value><![CDATA[");
		sb.append(getApplicantContactName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantContactEmail</column-name><column-value><![CDATA[");
		sb.append(getApplicantContactEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantContactPhone</column-name><column-value><![CDATA[");
		sb.append(getApplicantContactPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantNationality</column-name><column-value><![CDATA[");
		sb.append(getApplicantNationality());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantRegion</column-name><column-value><![CDATA[");
		sb.append(getApplicantRegion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantCity</column-name><column-value><![CDATA[");
		sb.append(getApplicantCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupCorporation</column-name><column-value><![CDATA[");
		sb.append(getMarkupCorporation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>corporationId</column-name><column-value><![CDATA[");
		sb.append(getCorporationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupDesigner</column-name><column-value><![CDATA[");
		sb.append(getMarkupDesigner());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupOverseasManufacturer</column-name><column-value><![CDATA[");
		sb.append(getMarkupOverseasManufacturer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupDomesticsManufacturer</column-name><column-value><![CDATA[");
		sb.append(getMarkupDomesticsManufacturer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupImporter</column-name><column-value><![CDATA[");
		sb.append(getMarkupImporter());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupComponentXCG</column-name><column-value><![CDATA[");
		sb.append(getMarkupComponentXCG());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupComponentXMY</column-name><column-value><![CDATA[");
		sb.append(getMarkupComponentXMY());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupComponentXCD</column-name><column-value><![CDATA[");
		sb.append(getMarkupComponentXCD());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupComponentXDD</column-name><column-value><![CDATA[");
		sb.append(getMarkupComponentXDD());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupComponentXCN</column-name><column-value><![CDATA[");
		sb.append(getMarkupComponentXCN());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupComponentXCH</column-name><column-value><![CDATA[");
		sb.append(getMarkupComponentXCH());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupXCG</column-name><column-value><![CDATA[");
		sb.append(getMarkupXCG());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupXMY</column-name><column-value><![CDATA[");
		sb.append(getMarkupXMY());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupXCD</column-name><column-value><![CDATA[");
		sb.append(getMarkupXCD());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupXDD</column-name><column-value><![CDATA[");
		sb.append(getMarkupXDD());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupXCN</column-name><column-value><![CDATA[");
		sb.append(getMarkupXCN());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupXCH</column-name><column-value><![CDATA[");
		sb.append(getMarkupXCH());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issueTypeXCG</column-name><column-value><![CDATA[");
		sb.append(getIssueTypeXCG());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issueTypeXMY</column-name><column-value><![CDATA[");
		sb.append(getIssueTypeXMY());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issueTypeXCD</column-name><column-value><![CDATA[");
		sb.append(getIssueTypeXCD());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issueTypeXDD</column-name><column-value><![CDATA[");
		sb.append(getIssueTypeXDD());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issueTypeXCN</column-name><column-value><![CDATA[");
		sb.append(getIssueTypeXCN());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issueTypeXCH</column-name><column-value><![CDATA[");
		sb.append(getIssueTypeXCH());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issueTypeDescription</column-name><column-value><![CDATA[");
		sb.append(getIssueTypeDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantCeremonyDate</column-name><column-value><![CDATA[");
		sb.append(getApplicantCeremonyDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantOperationPeriod</column-name><column-value><![CDATA[");
		sb.append(getApplicantOperationPeriod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantBusinessType</column-name><column-value><![CDATA[");
		sb.append(getApplicantBusinessType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantMetadata</column-name><column-value><![CDATA[");
		sb.append(getApplicantMetadata());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantStatus</column-name><column-value><![CDATA[");
		sb.append(getApplicantStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifyDate</column-name><column-value><![CDATA[");
		sb.append(getModifyDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncDate</column-name><column-value><![CDATA[");
		sb.append(getSyncDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VRApplicantProfileHistory.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VRApplicantProfileHistory.class
		};
	private long _id;
	private long _mtCore;
	private long _originalMtCore;
	private boolean _setOriginalMtCore;
	private String _mappingMA_CTY;
	private String _originalMappingMA_CTY;
	private String _mappingTEN_CTY;
	private String _originalMappingTEN_CTY;
	private String _mappingDIA_CHI_CTY;
	private String _mappingNote;
	private String _mappingStatus;
	private String _originalMappingStatus;
	private String _applicantCode;
	private String _originalApplicantCode;
	private String _applicantName;
	private String _applicantAddress;
	private String _applicantRepresentative;
	private String _applicantRepresentativeTitle;
	private String _applicantPhone;
	private String _applicantEmail;
	private String _applicantFax;
	private String _applicantContactName;
	private String _applicantContactEmail;
	private String _applicantContactPhone;
	private String _applicantNationality;
	private String _applicantRegion;
	private String _originalApplicantRegion;
	private String _applicantCity;
	private String _originalApplicantCity;
	private String _markupCorporation;
	private String _corporationId;
	private String _markupDesigner;
	private String _markupOverseasManufacturer;
	private String _markupDomesticsManufacturer;
	private String _markupImporter;
	private String _markupComponentXCG;
	private String _markupComponentXMY;
	private String _markupComponentXCD;
	private String _markupComponentXDD;
	private String _markupComponentXCN;
	private String _markupComponentXCH;
	private String _markupXCG;
	private String _markupXMY;
	private String _markupXCD;
	private String _markupXDD;
	private String _markupXCN;
	private String _markupXCH;
	private String _issueTypeXCG;
	private String _issueTypeXMY;
	private String _issueTypeXCD;
	private String _issueTypeXDD;
	private String _issueTypeXCN;
	private String _issueTypeXCH;
	private String _issueTypeDescription;
	private String _applicantCeremonyDate;
	private String _applicantOperationPeriod;
	private String _applicantBusinessType;
	private String _applicantMetadata;
	private String _applicantStatus;
	private String _originalApplicantStatus;
	private Date _modifyDate;
	private Date _syncDate;
	private long _columnBitmask;
	private VRApplicantProfileHistory _escapedModel;
}