/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.business.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.business.model.VRProductionPlantEquipment;
import com.fds.vr.business.model.VRProductionPlantEquipmentModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VRProductionPlantEquipment service. Represents a row in the &quot;vr_productionplantequipment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VRProductionPlantEquipmentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VRProductionPlantEquipmentImpl}.
 * </p>
 *
 * @author LamTV
 * @see VRProductionPlantEquipmentImpl
 * @see VRProductionPlantEquipment
 * @see VRProductionPlantEquipmentModel
 * @generated
 */
@ProviderType
public class VRProductionPlantEquipmentModelImpl extends BaseModelImpl<VRProductionPlantEquipment>
	implements VRProductionPlantEquipmentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vr production plant equipment model instance should use the {@link VRProductionPlantEquipment} interface instead.
	 */
	public static final String TABLE_NAME = "vr_productionplantequipment";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "mtCore", Types.BIGINT },
			{ "sequenceNo", Types.BIGINT },
			{ "equipmentCode", Types.VARCHAR },
			{ "equipmentName", Types.VARCHAR },
			{ "equipmentType", Types.VARCHAR },
			{ "trademark", Types.VARCHAR },
			{ "trademarkName", Types.VARCHAR },
			{ "commercialName", Types.VARCHAR },
			{ "modelCode", Types.VARCHAR },
			{ "productionCountryCode", Types.VARCHAR },
			{ "equipmentStatus", Types.VARCHAR },
			{ "expireDate", Types.TIMESTAMP },
			{ "notes", Types.VARCHAR },
			{ "modifyDate", Types.TIMESTAMP },
			{ "syncDate", Types.TIMESTAMP },
			{ "equipmentSerialNo", Types.VARCHAR },
			{ "productionYear", Types.VARCHAR },
			{ "registrationYear", Types.VARCHAR },
			{ "markupXCG", Types.BIGINT },
			{ "markupXCGNK", Types.BIGINT },
			{ "markupSMRM", Types.BIGINT },
			{ "markupXCH", Types.BIGINT },
			{ "markupXCN", Types.BIGINT },
			{ "markupXMY", Types.BIGINT },
			{ "markupXDD", Types.BIGINT },
			{ "testingResult", Types.INTEGER },
			{ "description", Types.VARCHAR },
			{ "inspectionRecordNumber", Types.VARCHAR },
			{ "inspectionRecordDate", Types.TIMESTAMP },
			{ "stampTestingNo", Types.VARCHAR },
			{ "productionPlantId", Types.BIGINT },
			{ "productionPlantCode", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mtCore", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("sequenceNo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("equipmentCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("equipmentName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("equipmentType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trademark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trademarkName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("commercialName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modelCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionCountryCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("equipmentStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expireDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("notes", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modifyDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("syncDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("equipmentSerialNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionYear", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("registrationYear", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("markupXCG", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("markupXCGNK", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("markupSMRM", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("markupXCH", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("markupXCN", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("markupXMY", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("markupXDD", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("testingResult", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectionRecordNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectionRecordDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("stampTestingNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionPlantId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("productionPlantCode", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table vr_productionplantequipment (id LONG not null primary key,mtCore LONG,sequenceNo LONG,equipmentCode VARCHAR(75) null,equipmentName VARCHAR(75) null,equipmentType VARCHAR(75) null,trademark VARCHAR(75) null,trademarkName VARCHAR(75) null,commercialName VARCHAR(75) null,modelCode VARCHAR(75) null,productionCountryCode VARCHAR(75) null,equipmentStatus VARCHAR(75) null,expireDate DATE null,notes VARCHAR(75) null,modifyDate DATE null,syncDate DATE null,equipmentSerialNo VARCHAR(75) null,productionYear VARCHAR(75) null,registrationYear VARCHAR(75) null,markupXCG LONG,markupXCGNK LONG,markupSMRM LONG,markupXCH LONG,markupXCN LONG,markupXMY LONG,markupXDD LONG,testingResult INTEGER,description VARCHAR(75) null,inspectionRecordNumber VARCHAR(75) null,inspectionRecordDate DATE null,stampTestingNo VARCHAR(75) null,productionPlantId LONG,productionPlantCode VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table vr_productionplantequipment";
	public static final String ORDER_BY_JPQL = " ORDER BY vrProductionPlantEquipment.sequenceNo DESC, vrProductionPlantEquipment.modifyDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_productionplantequipment.sequenceNo DESC, vr_productionplantequipment.modifyDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fds.vr.business.model.VRProductionPlantEquipment"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fds.vr.business.model.VRProductionPlantEquipment"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fds.vr.business.model.VRProductionPlantEquipment"),
			true);
	public static final long PRODUCTIONPLANTCODE_COLUMN_BITMASK = 1L;
	public static final long SEQUENCENO_COLUMN_BITMASK = 2L;
	public static final long MODIFYDATE_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.fds.vr.service.util.ServiceProps.get(
				"lock.expiration.time.com.fds.vr.business.model.VRProductionPlantEquipment"));

	public VRProductionPlantEquipmentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VRProductionPlantEquipment.class;
	}

	@Override
	public String getModelClassName() {
		return VRProductionPlantEquipment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("mtCore", getMtCore());
		attributes.put("sequenceNo", getSequenceNo());
		attributes.put("equipmentCode", getEquipmentCode());
		attributes.put("equipmentName", getEquipmentName());
		attributes.put("equipmentType", getEquipmentType());
		attributes.put("trademark", getTrademark());
		attributes.put("trademarkName", getTrademarkName());
		attributes.put("commercialName", getCommercialName());
		attributes.put("modelCode", getModelCode());
		attributes.put("productionCountryCode", getProductionCountryCode());
		attributes.put("equipmentStatus", getEquipmentStatus());
		attributes.put("expireDate", getExpireDate());
		attributes.put("notes", getNotes());
		attributes.put("modifyDate", getModifyDate());
		attributes.put("syncDate", getSyncDate());
		attributes.put("equipmentSerialNo", getEquipmentSerialNo());
		attributes.put("productionYear", getProductionYear());
		attributes.put("registrationYear", getRegistrationYear());
		attributes.put("markupXCG", getMarkupXCG());
		attributes.put("markupXCGNK", getMarkupXCGNK());
		attributes.put("markupSMRM", getMarkupSMRM());
		attributes.put("markupXCH", getMarkupXCH());
		attributes.put("markupXCN", getMarkupXCN());
		attributes.put("markupXMY", getMarkupXMY());
		attributes.put("markupXDD", getMarkupXDD());
		attributes.put("testingResult", getTestingResult());
		attributes.put("description", getDescription());
		attributes.put("inspectionRecordNumber", getInspectionRecordNumber());
		attributes.put("inspectionRecordDate", getInspectionRecordDate());
		attributes.put("stampTestingNo", getStampTestingNo());
		attributes.put("productionPlantId", getProductionPlantId());
		attributes.put("productionPlantCode", getProductionPlantCode());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long mtCore = (Long)attributes.get("mtCore");

		if (mtCore != null) {
			setMtCore(mtCore);
		}

		Long sequenceNo = (Long)attributes.get("sequenceNo");

		if (sequenceNo != null) {
			setSequenceNo(sequenceNo);
		}

		String equipmentCode = (String)attributes.get("equipmentCode");

		if (equipmentCode != null) {
			setEquipmentCode(equipmentCode);
		}

		String equipmentName = (String)attributes.get("equipmentName");

		if (equipmentName != null) {
			setEquipmentName(equipmentName);
		}

		String equipmentType = (String)attributes.get("equipmentType");

		if (equipmentType != null) {
			setEquipmentType(equipmentType);
		}

		String trademark = (String)attributes.get("trademark");

		if (trademark != null) {
			setTrademark(trademark);
		}

		String trademarkName = (String)attributes.get("trademarkName");

		if (trademarkName != null) {
			setTrademarkName(trademarkName);
		}

		String commercialName = (String)attributes.get("commercialName");

		if (commercialName != null) {
			setCommercialName(commercialName);
		}

		String modelCode = (String)attributes.get("modelCode");

		if (modelCode != null) {
			setModelCode(modelCode);
		}

		String productionCountryCode = (String)attributes.get(
				"productionCountryCode");

		if (productionCountryCode != null) {
			setProductionCountryCode(productionCountryCode);
		}

		String equipmentStatus = (String)attributes.get("equipmentStatus");

		if (equipmentStatus != null) {
			setEquipmentStatus(equipmentStatus);
		}

		Date expireDate = (Date)attributes.get("expireDate");

		if (expireDate != null) {
			setExpireDate(expireDate);
		}

		String notes = (String)attributes.get("notes");

		if (notes != null) {
			setNotes(notes);
		}

		Date modifyDate = (Date)attributes.get("modifyDate");

		if (modifyDate != null) {
			setModifyDate(modifyDate);
		}

		Date syncDate = (Date)attributes.get("syncDate");

		if (syncDate != null) {
			setSyncDate(syncDate);
		}

		String equipmentSerialNo = (String)attributes.get("equipmentSerialNo");

		if (equipmentSerialNo != null) {
			setEquipmentSerialNo(equipmentSerialNo);
		}

		String productionYear = (String)attributes.get("productionYear");

		if (productionYear != null) {
			setProductionYear(productionYear);
		}

		String registrationYear = (String)attributes.get("registrationYear");

		if (registrationYear != null) {
			setRegistrationYear(registrationYear);
		}

		Long markupXCG = (Long)attributes.get("markupXCG");

		if (markupXCG != null) {
			setMarkupXCG(markupXCG);
		}

		Long markupXCGNK = (Long)attributes.get("markupXCGNK");

		if (markupXCGNK != null) {
			setMarkupXCGNK(markupXCGNK);
		}

		Long markupSMRM = (Long)attributes.get("markupSMRM");

		if (markupSMRM != null) {
			setMarkupSMRM(markupSMRM);
		}

		Long markupXCH = (Long)attributes.get("markupXCH");

		if (markupXCH != null) {
			setMarkupXCH(markupXCH);
		}

		Long markupXCN = (Long)attributes.get("markupXCN");

		if (markupXCN != null) {
			setMarkupXCN(markupXCN);
		}

		Long markupXMY = (Long)attributes.get("markupXMY");

		if (markupXMY != null) {
			setMarkupXMY(markupXMY);
		}

		Long markupXDD = (Long)attributes.get("markupXDD");

		if (markupXDD != null) {
			setMarkupXDD(markupXDD);
		}

		Integer testingResult = (Integer)attributes.get("testingResult");

		if (testingResult != null) {
			setTestingResult(testingResult);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String inspectionRecordNumber = (String)attributes.get(
				"inspectionRecordNumber");

		if (inspectionRecordNumber != null) {
			setInspectionRecordNumber(inspectionRecordNumber);
		}

		Date inspectionRecordDate = (Date)attributes.get("inspectionRecordDate");

		if (inspectionRecordDate != null) {
			setInspectionRecordDate(inspectionRecordDate);
		}

		String stampTestingNo = (String)attributes.get("stampTestingNo");

		if (stampTestingNo != null) {
			setStampTestingNo(stampTestingNo);
		}

		Long productionPlantId = (Long)attributes.get("productionPlantId");

		if (productionPlantId != null) {
			setProductionPlantId(productionPlantId);
		}

		String productionPlantCode = (String)attributes.get(
				"productionPlantCode");

		if (productionPlantCode != null) {
			setProductionPlantCode(productionPlantCode);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getMtCore() {
		return _mtCore;
	}

	@Override
	public void setMtCore(long mtCore) {
		_mtCore = mtCore;
	}

	@Override
	public long getSequenceNo() {
		return _sequenceNo;
	}

	@Override
	public void setSequenceNo(long sequenceNo) {
		_columnBitmask = -1L;

		_sequenceNo = sequenceNo;
	}

	@Override
	public String getEquipmentCode() {
		if (_equipmentCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _equipmentCode;
		}
	}

	@Override
	public void setEquipmentCode(String equipmentCode) {
		_equipmentCode = equipmentCode;
	}

	@Override
	public String getEquipmentName() {
		if (_equipmentName == null) {
			return StringPool.BLANK;
		}
		else {
			return _equipmentName;
		}
	}

	@Override
	public void setEquipmentName(String equipmentName) {
		_equipmentName = equipmentName;
	}

	@Override
	public String getEquipmentType() {
		if (_equipmentType == null) {
			return StringPool.BLANK;
		}
		else {
			return _equipmentType;
		}
	}

	@Override
	public void setEquipmentType(String equipmentType) {
		_equipmentType = equipmentType;
	}

	@Override
	public String getTrademark() {
		if (_trademark == null) {
			return StringPool.BLANK;
		}
		else {
			return _trademark;
		}
	}

	@Override
	public void setTrademark(String trademark) {
		_trademark = trademark;
	}

	@Override
	public String getTrademarkName() {
		if (_trademarkName == null) {
			return StringPool.BLANK;
		}
		else {
			return _trademarkName;
		}
	}

	@Override
	public void setTrademarkName(String trademarkName) {
		_trademarkName = trademarkName;
	}

	@Override
	public String getCommercialName() {
		if (_commercialName == null) {
			return StringPool.BLANK;
		}
		else {
			return _commercialName;
		}
	}

	@Override
	public void setCommercialName(String commercialName) {
		_commercialName = commercialName;
	}

	@Override
	public String getModelCode() {
		if (_modelCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _modelCode;
		}
	}

	@Override
	public void setModelCode(String modelCode) {
		_modelCode = modelCode;
	}

	@Override
	public String getProductionCountryCode() {
		if (_productionCountryCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionCountryCode;
		}
	}

	@Override
	public void setProductionCountryCode(String productionCountryCode) {
		_productionCountryCode = productionCountryCode;
	}

	@Override
	public String getEquipmentStatus() {
		if (_equipmentStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _equipmentStatus;
		}
	}

	@Override
	public void setEquipmentStatus(String equipmentStatus) {
		_equipmentStatus = equipmentStatus;
	}

	@Override
	public Date getExpireDate() {
		return _expireDate;
	}

	@Override
	public void setExpireDate(Date expireDate) {
		_expireDate = expireDate;
	}

	@Override
	public String getNotes() {
		if (_notes == null) {
			return StringPool.BLANK;
		}
		else {
			return _notes;
		}
	}

	@Override
	public void setNotes(String notes) {
		_notes = notes;
	}

	@Override
	public Date getModifyDate() {
		return _modifyDate;
	}

	@Override
	public void setModifyDate(Date modifyDate) {
		_columnBitmask = -1L;

		_modifyDate = modifyDate;
	}

	@Override
	public Date getSyncDate() {
		return _syncDate;
	}

	@Override
	public void setSyncDate(Date syncDate) {
		_syncDate = syncDate;
	}

	@Override
	public String getEquipmentSerialNo() {
		if (_equipmentSerialNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _equipmentSerialNo;
		}
	}

	@Override
	public void setEquipmentSerialNo(String equipmentSerialNo) {
		_equipmentSerialNo = equipmentSerialNo;
	}

	@Override
	public String getProductionYear() {
		if (_productionYear == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionYear;
		}
	}

	@Override
	public void setProductionYear(String productionYear) {
		_productionYear = productionYear;
	}

	@Override
	public String getRegistrationYear() {
		if (_registrationYear == null) {
			return StringPool.BLANK;
		}
		else {
			return _registrationYear;
		}
	}

	@Override
	public void setRegistrationYear(String registrationYear) {
		_registrationYear = registrationYear;
	}

	@Override
	public long getMarkupXCG() {
		return _markupXCG;
	}

	@Override
	public void setMarkupXCG(long markupXCG) {
		_markupXCG = markupXCG;
	}

	@Override
	public long getMarkupXCGNK() {
		return _markupXCGNK;
	}

	@Override
	public void setMarkupXCGNK(long markupXCGNK) {
		_markupXCGNK = markupXCGNK;
	}

	@Override
	public long getMarkupSMRM() {
		return _markupSMRM;
	}

	@Override
	public void setMarkupSMRM(long markupSMRM) {
		_markupSMRM = markupSMRM;
	}

	@Override
	public long getMarkupXCH() {
		return _markupXCH;
	}

	@Override
	public void setMarkupXCH(long markupXCH) {
		_markupXCH = markupXCH;
	}

	@Override
	public long getMarkupXCN() {
		return _markupXCN;
	}

	@Override
	public void setMarkupXCN(long markupXCN) {
		_markupXCN = markupXCN;
	}

	@Override
	public long getMarkupXMY() {
		return _markupXMY;
	}

	@Override
	public void setMarkupXMY(long markupXMY) {
		_markupXMY = markupXMY;
	}

	@Override
	public long getMarkupXDD() {
		return _markupXDD;
	}

	@Override
	public void setMarkupXDD(long markupXDD) {
		_markupXDD = markupXDD;
	}

	@Override
	public int getTestingResult() {
		return _testingResult;
	}

	@Override
	public void setTestingResult(int testingResult) {
		_testingResult = testingResult;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public String getInspectionRecordNumber() {
		if (_inspectionRecordNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectionRecordNumber;
		}
	}

	@Override
	public void setInspectionRecordNumber(String inspectionRecordNumber) {
		_inspectionRecordNumber = inspectionRecordNumber;
	}

	@Override
	public Date getInspectionRecordDate() {
		return _inspectionRecordDate;
	}

	@Override
	public void setInspectionRecordDate(Date inspectionRecordDate) {
		_inspectionRecordDate = inspectionRecordDate;
	}

	@Override
	public String getStampTestingNo() {
		if (_stampTestingNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _stampTestingNo;
		}
	}

	@Override
	public void setStampTestingNo(String stampTestingNo) {
		_stampTestingNo = stampTestingNo;
	}

	@Override
	public long getProductionPlantId() {
		return _productionPlantId;
	}

	@Override
	public void setProductionPlantId(long productionPlantId) {
		_productionPlantId = productionPlantId;
	}

	@Override
	public String getProductionPlantCode() {
		if (_productionPlantCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionPlantCode;
		}
	}

	@Override
	public void setProductionPlantCode(String productionPlantCode) {
		_columnBitmask |= PRODUCTIONPLANTCODE_COLUMN_BITMASK;

		if (_originalProductionPlantCode == null) {
			_originalProductionPlantCode = _productionPlantCode;
		}

		_productionPlantCode = productionPlantCode;
	}

	public String getOriginalProductionPlantCode() {
		return GetterUtil.getString(_originalProductionPlantCode);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VRProductionPlantEquipment.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VRProductionPlantEquipment toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VRProductionPlantEquipment)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VRProductionPlantEquipmentImpl vrProductionPlantEquipmentImpl = new VRProductionPlantEquipmentImpl();

		vrProductionPlantEquipmentImpl.setId(getId());
		vrProductionPlantEquipmentImpl.setMtCore(getMtCore());
		vrProductionPlantEquipmentImpl.setSequenceNo(getSequenceNo());
		vrProductionPlantEquipmentImpl.setEquipmentCode(getEquipmentCode());
		vrProductionPlantEquipmentImpl.setEquipmentName(getEquipmentName());
		vrProductionPlantEquipmentImpl.setEquipmentType(getEquipmentType());
		vrProductionPlantEquipmentImpl.setTrademark(getTrademark());
		vrProductionPlantEquipmentImpl.setTrademarkName(getTrademarkName());
		vrProductionPlantEquipmentImpl.setCommercialName(getCommercialName());
		vrProductionPlantEquipmentImpl.setModelCode(getModelCode());
		vrProductionPlantEquipmentImpl.setProductionCountryCode(getProductionCountryCode());
		vrProductionPlantEquipmentImpl.setEquipmentStatus(getEquipmentStatus());
		vrProductionPlantEquipmentImpl.setExpireDate(getExpireDate());
		vrProductionPlantEquipmentImpl.setNotes(getNotes());
		vrProductionPlantEquipmentImpl.setModifyDate(getModifyDate());
		vrProductionPlantEquipmentImpl.setSyncDate(getSyncDate());
		vrProductionPlantEquipmentImpl.setEquipmentSerialNo(getEquipmentSerialNo());
		vrProductionPlantEquipmentImpl.setProductionYear(getProductionYear());
		vrProductionPlantEquipmentImpl.setRegistrationYear(getRegistrationYear());
		vrProductionPlantEquipmentImpl.setMarkupXCG(getMarkupXCG());
		vrProductionPlantEquipmentImpl.setMarkupXCGNK(getMarkupXCGNK());
		vrProductionPlantEquipmentImpl.setMarkupSMRM(getMarkupSMRM());
		vrProductionPlantEquipmentImpl.setMarkupXCH(getMarkupXCH());
		vrProductionPlantEquipmentImpl.setMarkupXCN(getMarkupXCN());
		vrProductionPlantEquipmentImpl.setMarkupXMY(getMarkupXMY());
		vrProductionPlantEquipmentImpl.setMarkupXDD(getMarkupXDD());
		vrProductionPlantEquipmentImpl.setTestingResult(getTestingResult());
		vrProductionPlantEquipmentImpl.setDescription(getDescription());
		vrProductionPlantEquipmentImpl.setInspectionRecordNumber(getInspectionRecordNumber());
		vrProductionPlantEquipmentImpl.setInspectionRecordDate(getInspectionRecordDate());
		vrProductionPlantEquipmentImpl.setStampTestingNo(getStampTestingNo());
		vrProductionPlantEquipmentImpl.setProductionPlantId(getProductionPlantId());
		vrProductionPlantEquipmentImpl.setProductionPlantCode(getProductionPlantCode());

		vrProductionPlantEquipmentImpl.resetOriginalValues();

		return vrProductionPlantEquipmentImpl;
	}

	@Override
	public int compareTo(VRProductionPlantEquipment vrProductionPlantEquipment) {
		int value = 0;

		if (getSequenceNo() < vrProductionPlantEquipment.getSequenceNo()) {
			value = -1;
		}
		else if (getSequenceNo() > vrProductionPlantEquipment.getSequenceNo()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		value = DateUtil.compareTo(getModifyDate(),
				vrProductionPlantEquipment.getModifyDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VRProductionPlantEquipment)) {
			return false;
		}

		VRProductionPlantEquipment vrProductionPlantEquipment = (VRProductionPlantEquipment)obj;

		long primaryKey = vrProductionPlantEquipment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VRProductionPlantEquipmentModelImpl vrProductionPlantEquipmentModelImpl = this;

		vrProductionPlantEquipmentModelImpl._originalProductionPlantCode = vrProductionPlantEquipmentModelImpl._productionPlantCode;

		vrProductionPlantEquipmentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VRProductionPlantEquipment> toCacheModel() {
		VRProductionPlantEquipmentCacheModel vrProductionPlantEquipmentCacheModel =
			new VRProductionPlantEquipmentCacheModel();

		vrProductionPlantEquipmentCacheModel.id = getId();

		vrProductionPlantEquipmentCacheModel.mtCore = getMtCore();

		vrProductionPlantEquipmentCacheModel.sequenceNo = getSequenceNo();

		vrProductionPlantEquipmentCacheModel.equipmentCode = getEquipmentCode();

		String equipmentCode = vrProductionPlantEquipmentCacheModel.equipmentCode;

		if ((equipmentCode != null) && (equipmentCode.length() == 0)) {
			vrProductionPlantEquipmentCacheModel.equipmentCode = null;
		}

		vrProductionPlantEquipmentCacheModel.equipmentName = getEquipmentName();

		String equipmentName = vrProductionPlantEquipmentCacheModel.equipmentName;

		if ((equipmentName != null) && (equipmentName.length() == 0)) {
			vrProductionPlantEquipmentCacheModel.equipmentName = null;
		}

		vrProductionPlantEquipmentCacheModel.equipmentType = getEquipmentType();

		String equipmentType = vrProductionPlantEquipmentCacheModel.equipmentType;

		if ((equipmentType != null) && (equipmentType.length() == 0)) {
			vrProductionPlantEquipmentCacheModel.equipmentType = null;
		}

		vrProductionPlantEquipmentCacheModel.trademark = getTrademark();

		String trademark = vrProductionPlantEquipmentCacheModel.trademark;

		if ((trademark != null) && (trademark.length() == 0)) {
			vrProductionPlantEquipmentCacheModel.trademark = null;
		}

		vrProductionPlantEquipmentCacheModel.trademarkName = getTrademarkName();

		String trademarkName = vrProductionPlantEquipmentCacheModel.trademarkName;

		if ((trademarkName != null) && (trademarkName.length() == 0)) {
			vrProductionPlantEquipmentCacheModel.trademarkName = null;
		}

		vrProductionPlantEquipmentCacheModel.commercialName = getCommercialName();

		String commercialName = vrProductionPlantEquipmentCacheModel.commercialName;

		if ((commercialName != null) && (commercialName.length() == 0)) {
			vrProductionPlantEquipmentCacheModel.commercialName = null;
		}

		vrProductionPlantEquipmentCacheModel.modelCode = getModelCode();

		String modelCode = vrProductionPlantEquipmentCacheModel.modelCode;

		if ((modelCode != null) && (modelCode.length() == 0)) {
			vrProductionPlantEquipmentCacheModel.modelCode = null;
		}

		vrProductionPlantEquipmentCacheModel.productionCountryCode = getProductionCountryCode();

		String productionCountryCode = vrProductionPlantEquipmentCacheModel.productionCountryCode;

		if ((productionCountryCode != null) &&
				(productionCountryCode.length() == 0)) {
			vrProductionPlantEquipmentCacheModel.productionCountryCode = null;
		}

		vrProductionPlantEquipmentCacheModel.equipmentStatus = getEquipmentStatus();

		String equipmentStatus = vrProductionPlantEquipmentCacheModel.equipmentStatus;

		if ((equipmentStatus != null) && (equipmentStatus.length() == 0)) {
			vrProductionPlantEquipmentCacheModel.equipmentStatus = null;
		}

		Date expireDate = getExpireDate();

		if (expireDate != null) {
			vrProductionPlantEquipmentCacheModel.expireDate = expireDate.getTime();
		}
		else {
			vrProductionPlantEquipmentCacheModel.expireDate = Long.MIN_VALUE;
		}

		vrProductionPlantEquipmentCacheModel.notes = getNotes();

		String notes = vrProductionPlantEquipmentCacheModel.notes;

		if ((notes != null) && (notes.length() == 0)) {
			vrProductionPlantEquipmentCacheModel.notes = null;
		}

		Date modifyDate = getModifyDate();

		if (modifyDate != null) {
			vrProductionPlantEquipmentCacheModel.modifyDate = modifyDate.getTime();
		}
		else {
			vrProductionPlantEquipmentCacheModel.modifyDate = Long.MIN_VALUE;
		}

		Date syncDate = getSyncDate();

		if (syncDate != null) {
			vrProductionPlantEquipmentCacheModel.syncDate = syncDate.getTime();
		}
		else {
			vrProductionPlantEquipmentCacheModel.syncDate = Long.MIN_VALUE;
		}

		vrProductionPlantEquipmentCacheModel.equipmentSerialNo = getEquipmentSerialNo();

		String equipmentSerialNo = vrProductionPlantEquipmentCacheModel.equipmentSerialNo;

		if ((equipmentSerialNo != null) && (equipmentSerialNo.length() == 0)) {
			vrProductionPlantEquipmentCacheModel.equipmentSerialNo = null;
		}

		vrProductionPlantEquipmentCacheModel.productionYear = getProductionYear();

		String productionYear = vrProductionPlantEquipmentCacheModel.productionYear;

		if ((productionYear != null) && (productionYear.length() == 0)) {
			vrProductionPlantEquipmentCacheModel.productionYear = null;
		}

		vrProductionPlantEquipmentCacheModel.registrationYear = getRegistrationYear();

		String registrationYear = vrProductionPlantEquipmentCacheModel.registrationYear;

		if ((registrationYear != null) && (registrationYear.length() == 0)) {
			vrProductionPlantEquipmentCacheModel.registrationYear = null;
		}

		vrProductionPlantEquipmentCacheModel.markupXCG = getMarkupXCG();

		vrProductionPlantEquipmentCacheModel.markupXCGNK = getMarkupXCGNK();

		vrProductionPlantEquipmentCacheModel.markupSMRM = getMarkupSMRM();

		vrProductionPlantEquipmentCacheModel.markupXCH = getMarkupXCH();

		vrProductionPlantEquipmentCacheModel.markupXCN = getMarkupXCN();

		vrProductionPlantEquipmentCacheModel.markupXMY = getMarkupXMY();

		vrProductionPlantEquipmentCacheModel.markupXDD = getMarkupXDD();

		vrProductionPlantEquipmentCacheModel.testingResult = getTestingResult();

		vrProductionPlantEquipmentCacheModel.description = getDescription();

		String description = vrProductionPlantEquipmentCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			vrProductionPlantEquipmentCacheModel.description = null;
		}

		vrProductionPlantEquipmentCacheModel.inspectionRecordNumber = getInspectionRecordNumber();

		String inspectionRecordNumber = vrProductionPlantEquipmentCacheModel.inspectionRecordNumber;

		if ((inspectionRecordNumber != null) &&
				(inspectionRecordNumber.length() == 0)) {
			vrProductionPlantEquipmentCacheModel.inspectionRecordNumber = null;
		}

		Date inspectionRecordDate = getInspectionRecordDate();

		if (inspectionRecordDate != null) {
			vrProductionPlantEquipmentCacheModel.inspectionRecordDate = inspectionRecordDate.getTime();
		}
		else {
			vrProductionPlantEquipmentCacheModel.inspectionRecordDate = Long.MIN_VALUE;
		}

		vrProductionPlantEquipmentCacheModel.stampTestingNo = getStampTestingNo();

		String stampTestingNo = vrProductionPlantEquipmentCacheModel.stampTestingNo;

		if ((stampTestingNo != null) && (stampTestingNo.length() == 0)) {
			vrProductionPlantEquipmentCacheModel.stampTestingNo = null;
		}

		vrProductionPlantEquipmentCacheModel.productionPlantId = getProductionPlantId();

		vrProductionPlantEquipmentCacheModel.productionPlantCode = getProductionPlantCode();

		String productionPlantCode = vrProductionPlantEquipmentCacheModel.productionPlantCode;

		if ((productionPlantCode != null) &&
				(productionPlantCode.length() == 0)) {
			vrProductionPlantEquipmentCacheModel.productionPlantCode = null;
		}

		return vrProductionPlantEquipmentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(67);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", mtCore=");
		sb.append(getMtCore());
		sb.append(", sequenceNo=");
		sb.append(getSequenceNo());
		sb.append(", equipmentCode=");
		sb.append(getEquipmentCode());
		sb.append(", equipmentName=");
		sb.append(getEquipmentName());
		sb.append(", equipmentType=");
		sb.append(getEquipmentType());
		sb.append(", trademark=");
		sb.append(getTrademark());
		sb.append(", trademarkName=");
		sb.append(getTrademarkName());
		sb.append(", commercialName=");
		sb.append(getCommercialName());
		sb.append(", modelCode=");
		sb.append(getModelCode());
		sb.append(", productionCountryCode=");
		sb.append(getProductionCountryCode());
		sb.append(", equipmentStatus=");
		sb.append(getEquipmentStatus());
		sb.append(", expireDate=");
		sb.append(getExpireDate());
		sb.append(", notes=");
		sb.append(getNotes());
		sb.append(", modifyDate=");
		sb.append(getModifyDate());
		sb.append(", syncDate=");
		sb.append(getSyncDate());
		sb.append(", equipmentSerialNo=");
		sb.append(getEquipmentSerialNo());
		sb.append(", productionYear=");
		sb.append(getProductionYear());
		sb.append(", registrationYear=");
		sb.append(getRegistrationYear());
		sb.append(", markupXCG=");
		sb.append(getMarkupXCG());
		sb.append(", markupXCGNK=");
		sb.append(getMarkupXCGNK());
		sb.append(", markupSMRM=");
		sb.append(getMarkupSMRM());
		sb.append(", markupXCH=");
		sb.append(getMarkupXCH());
		sb.append(", markupXCN=");
		sb.append(getMarkupXCN());
		sb.append(", markupXMY=");
		sb.append(getMarkupXMY());
		sb.append(", markupXDD=");
		sb.append(getMarkupXDD());
		sb.append(", testingResult=");
		sb.append(getTestingResult());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", inspectionRecordNumber=");
		sb.append(getInspectionRecordNumber());
		sb.append(", inspectionRecordDate=");
		sb.append(getInspectionRecordDate());
		sb.append(", stampTestingNo=");
		sb.append(getStampTestingNo());
		sb.append(", productionPlantId=");
		sb.append(getProductionPlantId());
		sb.append(", productionPlantCode=");
		sb.append(getProductionPlantCode());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(103);

		sb.append("<model><model-name>");
		sb.append("com.fds.vr.business.model.VRProductionPlantEquipment");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mtCore</column-name><column-value><![CDATA[");
		sb.append(getMtCore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sequenceNo</column-name><column-value><![CDATA[");
		sb.append(getSequenceNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>equipmentCode</column-name><column-value><![CDATA[");
		sb.append(getEquipmentCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>equipmentName</column-name><column-value><![CDATA[");
		sb.append(getEquipmentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>equipmentType</column-name><column-value><![CDATA[");
		sb.append(getEquipmentType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>trademark</column-name><column-value><![CDATA[");
		sb.append(getTrademark());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>trademarkName</column-name><column-value><![CDATA[");
		sb.append(getTrademarkName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commercialName</column-name><column-value><![CDATA[");
		sb.append(getCommercialName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modelCode</column-name><column-value><![CDATA[");
		sb.append(getModelCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionCountryCode</column-name><column-value><![CDATA[");
		sb.append(getProductionCountryCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>equipmentStatus</column-name><column-value><![CDATA[");
		sb.append(getEquipmentStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expireDate</column-name><column-value><![CDATA[");
		sb.append(getExpireDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notes</column-name><column-value><![CDATA[");
		sb.append(getNotes());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifyDate</column-name><column-value><![CDATA[");
		sb.append(getModifyDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncDate</column-name><column-value><![CDATA[");
		sb.append(getSyncDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>equipmentSerialNo</column-name><column-value><![CDATA[");
		sb.append(getEquipmentSerialNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionYear</column-name><column-value><![CDATA[");
		sb.append(getProductionYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registrationYear</column-name><column-value><![CDATA[");
		sb.append(getRegistrationYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupXCG</column-name><column-value><![CDATA[");
		sb.append(getMarkupXCG());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupXCGNK</column-name><column-value><![CDATA[");
		sb.append(getMarkupXCGNK());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupSMRM</column-name><column-value><![CDATA[");
		sb.append(getMarkupSMRM());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupXCH</column-name><column-value><![CDATA[");
		sb.append(getMarkupXCH());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupXCN</column-name><column-value><![CDATA[");
		sb.append(getMarkupXCN());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupXMY</column-name><column-value><![CDATA[");
		sb.append(getMarkupXMY());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupXDD</column-name><column-value><![CDATA[");
		sb.append(getMarkupXDD());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>testingResult</column-name><column-value><![CDATA[");
		sb.append(getTestingResult());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionRecordNumber</column-name><column-value><![CDATA[");
		sb.append(getInspectionRecordNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionRecordDate</column-name><column-value><![CDATA[");
		sb.append(getInspectionRecordDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stampTestingNo</column-name><column-value><![CDATA[");
		sb.append(getStampTestingNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantId</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantCode</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantCode());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VRProductionPlantEquipment.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VRProductionPlantEquipment.class
		};
	private long _id;
	private long _mtCore;
	private long _sequenceNo;
	private String _equipmentCode;
	private String _equipmentName;
	private String _equipmentType;
	private String _trademark;
	private String _trademarkName;
	private String _commercialName;
	private String _modelCode;
	private String _productionCountryCode;
	private String _equipmentStatus;
	private Date _expireDate;
	private String _notes;
	private Date _modifyDate;
	private Date _syncDate;
	private String _equipmentSerialNo;
	private String _productionYear;
	private String _registrationYear;
	private long _markupXCG;
	private long _markupXCGNK;
	private long _markupSMRM;
	private long _markupXCH;
	private long _markupXCN;
	private long _markupXMY;
	private long _markupXDD;
	private int _testingResult;
	private String _description;
	private String _inspectionRecordNumber;
	private Date _inspectionRecordDate;
	private String _stampTestingNo;
	private long _productionPlantId;
	private String _productionPlantCode;
	private String _originalProductionPlantCode;
	private long _columnBitmask;
	private VRProductionPlantEquipment _escapedModel;
}