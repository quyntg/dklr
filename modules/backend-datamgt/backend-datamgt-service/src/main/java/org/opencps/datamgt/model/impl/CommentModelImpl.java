/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.datamgt.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import org.opencps.datamgt.model.Comment;
import org.opencps.datamgt.model.CommentModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Comment service. Represents a row in the &quot;opencps_comment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CommentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CommentImpl}.
 * </p>
 *
 * @author khoavu
 * @see CommentImpl
 * @see Comment
 * @see CommentModel
 * @generated
 */
@ProviderType
public class CommentModelImpl extends BaseModelImpl<Comment>
	implements CommentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a comment model instance should use the {@link Comment} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_comment";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "commentId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "className", Types.VARCHAR },
			{ "classPK", Types.VARCHAR },
			{ "fullname", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "parent", Types.BIGINT },
			{ "content", Types.VARCHAR },
			{ "fileEntryId", Types.BIGINT },
			{ "pings", Types.VARCHAR },
			{ "upvoteCount", Types.INTEGER },
			{ "userHasUpvoted", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("commentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("className", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("classPK", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fullname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("parent", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("content", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("pings", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("upvoteCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("userHasUpvoted", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table opencps_comment (uuid_ VARCHAR(75) null,commentId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,className VARCHAR(75) null,classPK VARCHAR(75) null,fullname VARCHAR(75) null,email VARCHAR(75) null,parent LONG,content VARCHAR(75) null,fileEntryId LONG,pings VARCHAR(75) null,upvoteCount INTEGER,userHasUpvoted VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table opencps_comment";
	public static final String ORDER_BY_JPQL = " ORDER BY comment.modifiedDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_comment.modifiedDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.datamgt.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.datamgt.model.Comment"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.datamgt.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.datamgt.model.Comment"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(org.opencps.backend.datamgt.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.datamgt.model.Comment"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;
	public static final long MODIFIEDDATE_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(org.opencps.backend.datamgt.service.util.ServiceProps.get(
				"lock.expiration.time.org.opencps.datamgt.model.Comment"));

	public CommentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _commentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCommentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _commentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Comment.class;
	}

	@Override
	public String getModelClassName() {
		return Comment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("commentId", getCommentId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("className", getClassName());
		attributes.put("classPK", getClassPK());
		attributes.put("fullname", getFullname());
		attributes.put("email", getEmail());
		attributes.put("parent", getParent());
		attributes.put("content", getContent());
		attributes.put("fileEntryId", getFileEntryId());
		attributes.put("pings", getPings());
		attributes.put("upvoteCount", getUpvoteCount());
		attributes.put("userHasUpvoted", getUserHasUpvoted());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long commentId = (Long)attributes.get("commentId");

		if (commentId != null) {
			setCommentId(commentId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String className = (String)attributes.get("className");

		if (className != null) {
			setClassName(className);
		}

		String classPK = (String)attributes.get("classPK");

		if (classPK != null) {
			setClassPK(classPK);
		}

		String fullname = (String)attributes.get("fullname");

		if (fullname != null) {
			setFullname(fullname);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		Long parent = (Long)attributes.get("parent");

		if (parent != null) {
			setParent(parent);
		}

		String content = (String)attributes.get("content");

		if (content != null) {
			setContent(content);
		}

		Long fileEntryId = (Long)attributes.get("fileEntryId");

		if (fileEntryId != null) {
			setFileEntryId(fileEntryId);
		}

		String pings = (String)attributes.get("pings");

		if (pings != null) {
			setPings(pings);
		}

		Integer upvoteCount = (Integer)attributes.get("upvoteCount");

		if (upvoteCount != null) {
			setUpvoteCount(upvoteCount);
		}

		String userHasUpvoted = (String)attributes.get("userHasUpvoted");

		if (userHasUpvoted != null) {
			setUserHasUpvoted(userHasUpvoted);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getCommentId() {
		return _commentId;
	}

	@Override
	public void setCommentId(long commentId) {
		_commentId = commentId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getClassName() {
		if (_className == null) {
			return StringPool.BLANK;
		}
		else {
			return _className;
		}
	}

	@Override
	public void setClassName(String className) {
		_className = className;
	}

	@Override
	public String getClassPK() {
		if (_classPK == null) {
			return StringPool.BLANK;
		}
		else {
			return _classPK;
		}
	}

	@Override
	public void setClassPK(String classPK) {
		_classPK = classPK;
	}

	@Override
	public String getFullname() {
		if (_fullname == null) {
			return StringPool.BLANK;
		}
		else {
			return _fullname;
		}
	}

	@Override
	public void setFullname(String fullname) {
		_fullname = fullname;
	}

	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@Override
	public long getParent() {
		return _parent;
	}

	@Override
	public void setParent(long parent) {
		_parent = parent;
	}

	@Override
	public String getContent() {
		if (_content == null) {
			return StringPool.BLANK;
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	@Override
	public long getFileEntryId() {
		return _fileEntryId;
	}

	@Override
	public void setFileEntryId(long fileEntryId) {
		_fileEntryId = fileEntryId;
	}

	@Override
	public String getPings() {
		if (_pings == null) {
			return StringPool.BLANK;
		}
		else {
			return _pings;
		}
	}

	@Override
	public void setPings(String pings) {
		_pings = pings;
	}

	@Override
	public int getUpvoteCount() {
		return _upvoteCount;
	}

	@Override
	public void setUpvoteCount(int upvoteCount) {
		_upvoteCount = upvoteCount;
	}

	@Override
	public String getUserHasUpvoted() {
		if (_userHasUpvoted == null) {
			return StringPool.BLANK;
		}
		else {
			return _userHasUpvoted;
		}
	}

	@Override
	public void setUserHasUpvoted(String userHasUpvoted) {
		_userHasUpvoted = userHasUpvoted;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Comment.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Comment.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Comment toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Comment)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CommentImpl commentImpl = new CommentImpl();

		commentImpl.setUuid(getUuid());
		commentImpl.setCommentId(getCommentId());
		commentImpl.setCompanyId(getCompanyId());
		commentImpl.setGroupId(getGroupId());
		commentImpl.setUserId(getUserId());
		commentImpl.setUserName(getUserName());
		commentImpl.setCreateDate(getCreateDate());
		commentImpl.setModifiedDate(getModifiedDate());
		commentImpl.setClassName(getClassName());
		commentImpl.setClassPK(getClassPK());
		commentImpl.setFullname(getFullname());
		commentImpl.setEmail(getEmail());
		commentImpl.setParent(getParent());
		commentImpl.setContent(getContent());
		commentImpl.setFileEntryId(getFileEntryId());
		commentImpl.setPings(getPings());
		commentImpl.setUpvoteCount(getUpvoteCount());
		commentImpl.setUserHasUpvoted(getUserHasUpvoted());

		commentImpl.resetOriginalValues();

		return commentImpl;
	}

	@Override
	public int compareTo(Comment comment) {
		int value = 0;

		value = DateUtil.compareTo(getModifiedDate(), comment.getModifiedDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Comment)) {
			return false;
		}

		Comment comment = (Comment)obj;

		long primaryKey = comment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CommentModelImpl commentModelImpl = this;

		commentModelImpl._originalUuid = commentModelImpl._uuid;

		commentModelImpl._originalCompanyId = commentModelImpl._companyId;

		commentModelImpl._setOriginalCompanyId = false;

		commentModelImpl._originalGroupId = commentModelImpl._groupId;

		commentModelImpl._setOriginalGroupId = false;

		commentModelImpl._setModifiedDate = false;

		commentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Comment> toCacheModel() {
		CommentCacheModel commentCacheModel = new CommentCacheModel();

		commentCacheModel.uuid = getUuid();

		String uuid = commentCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			commentCacheModel.uuid = null;
		}

		commentCacheModel.commentId = getCommentId();

		commentCacheModel.companyId = getCompanyId();

		commentCacheModel.groupId = getGroupId();

		commentCacheModel.userId = getUserId();

		commentCacheModel.userName = getUserName();

		String userName = commentCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			commentCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			commentCacheModel.createDate = createDate.getTime();
		}
		else {
			commentCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			commentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			commentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		commentCacheModel.className = getClassName();

		String className = commentCacheModel.className;

		if ((className != null) && (className.length() == 0)) {
			commentCacheModel.className = null;
		}

		commentCacheModel.classPK = getClassPK();

		String classPK = commentCacheModel.classPK;

		if ((classPK != null) && (classPK.length() == 0)) {
			commentCacheModel.classPK = null;
		}

		commentCacheModel.fullname = getFullname();

		String fullname = commentCacheModel.fullname;

		if ((fullname != null) && (fullname.length() == 0)) {
			commentCacheModel.fullname = null;
		}

		commentCacheModel.email = getEmail();

		String email = commentCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			commentCacheModel.email = null;
		}

		commentCacheModel.parent = getParent();

		commentCacheModel.content = getContent();

		String content = commentCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			commentCacheModel.content = null;
		}

		commentCacheModel.fileEntryId = getFileEntryId();

		commentCacheModel.pings = getPings();

		String pings = commentCacheModel.pings;

		if ((pings != null) && (pings.length() == 0)) {
			commentCacheModel.pings = null;
		}

		commentCacheModel.upvoteCount = getUpvoteCount();

		commentCacheModel.userHasUpvoted = getUserHasUpvoted();

		String userHasUpvoted = commentCacheModel.userHasUpvoted;

		if ((userHasUpvoted != null) && (userHasUpvoted.length() == 0)) {
			commentCacheModel.userHasUpvoted = null;
		}

		return commentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(37);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", commentId=");
		sb.append(getCommentId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", className=");
		sb.append(getClassName());
		sb.append(", classPK=");
		sb.append(getClassPK());
		sb.append(", fullname=");
		sb.append(getFullname());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", parent=");
		sb.append(getParent());
		sb.append(", content=");
		sb.append(getContent());
		sb.append(", fileEntryId=");
		sb.append(getFileEntryId());
		sb.append(", pings=");
		sb.append(getPings());
		sb.append(", upvoteCount=");
		sb.append(getUpvoteCount());
		sb.append(", userHasUpvoted=");
		sb.append(getUserHasUpvoted());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(58);

		sb.append("<model><model-name>");
		sb.append("org.opencps.datamgt.model.Comment");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commentId</column-name><column-value><![CDATA[");
		sb.append(getCommentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>className</column-name><column-value><![CDATA[");
		sb.append(getClassName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classPK</column-name><column-value><![CDATA[");
		sb.append(getClassPK());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fullname</column-name><column-value><![CDATA[");
		sb.append(getFullname());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parent</column-name><column-value><![CDATA[");
		sb.append(getParent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content</column-name><column-value><![CDATA[");
		sb.append(getContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileEntryId</column-name><column-value><![CDATA[");
		sb.append(getFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pings</column-name><column-value><![CDATA[");
		sb.append(getPings());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>upvoteCount</column-name><column-value><![CDATA[");
		sb.append(getUpvoteCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userHasUpvoted</column-name><column-value><![CDATA[");
		sb.append(getUserHasUpvoted());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Comment.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Comment.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _commentId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _className;
	private String _classPK;
	private String _fullname;
	private String _email;
	private long _parent;
	private String _content;
	private long _fileEntryId;
	private String _pings;
	private int _upvoteCount;
	private String _userHasUpvoted;
	private long _columnBitmask;
	private Comment _escapedModel;
}