/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.dossiermgt.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import org.opencps.dossiermgt.model.DossierStatistic;
import org.opencps.dossiermgt.model.DossierStatisticModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the DossierStatistic service. Represents a row in the &quot;opencps_dossierstatistic&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DossierStatisticModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DossierStatisticImpl}.
 * </p>
 *
 * @author huymq
 * @see DossierStatisticImpl
 * @see DossierStatistic
 * @see DossierStatisticModel
 * @generated
 */
@ProviderType
public class DossierStatisticModelImpl extends BaseModelImpl<DossierStatistic>
	implements DossierStatisticModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dossier statistic model instance should use the {@link DossierStatistic} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_dossierstatistic";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "dossierStatisticId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "month", Types.INTEGER },
			{ "year", Types.INTEGER },
			{ "remainingCount", Types.INTEGER },
			{ "receivedCount", Types.INTEGER },
			{ "onlineCount", Types.INTEGER },
			{ "undueCount", Types.INTEGER },
			{ "overdueCount", Types.INTEGER },
			{ "ontimeCount", Types.INTEGER },
			{ "overtimeCount", Types.INTEGER },
			{ "govAgencyCode", Types.VARCHAR },
			{ "govAgencyName", Types.VARCHAR },
			{ "domainCode", Types.VARCHAR },
			{ "domainName", Types.VARCHAR },
			{ "administrationLevel", Types.INTEGER },
			{ "reporting", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dossierStatisticId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("month", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("year", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("remainingCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("receivedCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("onlineCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("undueCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("overdueCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ontimeCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("overtimeCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("govAgencyCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("govAgencyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("domainCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("domainName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("administrationLevel", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("reporting", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table opencps_dossierstatistic (uuid_ VARCHAR(75) null,dossierStatisticId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,month INTEGER,year INTEGER,remainingCount INTEGER,receivedCount INTEGER,onlineCount INTEGER,undueCount INTEGER,overdueCount INTEGER,ontimeCount INTEGER,overtimeCount INTEGER,govAgencyCode VARCHAR(75) null,govAgencyName VARCHAR(75) null,domainCode VARCHAR(75) null,domainName VARCHAR(75) null,administrationLevel INTEGER,reporting BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table opencps_dossierstatistic";
	public static final String ORDER_BY_JPQL = " ORDER BY dossierStatistic.dossierStatisticId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_dossierstatistic.dossierStatisticId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.dossiermgt.model.DossierStatistic"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.dossiermgt.model.DossierStatistic"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.dossiermgt.model.DossierStatistic"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long USERID_COLUMN_BITMASK = 4L;
	public static final long UUID_COLUMN_BITMASK = 8L;
	public static final long YEAR_COLUMN_BITMASK = 16L;
	public static final long DOSSIERSTATISTICID_COLUMN_BITMASK = 32L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"lock.expiration.time.org.opencps.dossiermgt.model.DossierStatistic"));

	public DossierStatisticModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dossierStatisticId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDossierStatisticId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dossierStatisticId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DossierStatistic.class;
	}

	@Override
	public String getModelClassName() {
		return DossierStatistic.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("dossierStatisticId", getDossierStatisticId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("month", getMonth());
		attributes.put("year", getYear());
		attributes.put("remainingCount", getRemainingCount());
		attributes.put("receivedCount", getReceivedCount());
		attributes.put("onlineCount", getOnlineCount());
		attributes.put("undueCount", getUndueCount());
		attributes.put("overdueCount", getOverdueCount());
		attributes.put("ontimeCount", getOntimeCount());
		attributes.put("overtimeCount", getOvertimeCount());
		attributes.put("govAgencyCode", getGovAgencyCode());
		attributes.put("govAgencyName", getGovAgencyName());
		attributes.put("domainCode", getDomainCode());
		attributes.put("domainName", getDomainName());
		attributes.put("administrationLevel", getAdministrationLevel());
		attributes.put("reporting", getReporting());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long dossierStatisticId = (Long)attributes.get("dossierStatisticId");

		if (dossierStatisticId != null) {
			setDossierStatisticId(dossierStatisticId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer month = (Integer)attributes.get("month");

		if (month != null) {
			setMonth(month);
		}

		Integer year = (Integer)attributes.get("year");

		if (year != null) {
			setYear(year);
		}

		Integer remainingCount = (Integer)attributes.get("remainingCount");

		if (remainingCount != null) {
			setRemainingCount(remainingCount);
		}

		Integer receivedCount = (Integer)attributes.get("receivedCount");

		if (receivedCount != null) {
			setReceivedCount(receivedCount);
		}

		Integer onlineCount = (Integer)attributes.get("onlineCount");

		if (onlineCount != null) {
			setOnlineCount(onlineCount);
		}

		Integer undueCount = (Integer)attributes.get("undueCount");

		if (undueCount != null) {
			setUndueCount(undueCount);
		}

		Integer overdueCount = (Integer)attributes.get("overdueCount");

		if (overdueCount != null) {
			setOverdueCount(overdueCount);
		}

		Integer ontimeCount = (Integer)attributes.get("ontimeCount");

		if (ontimeCount != null) {
			setOntimeCount(ontimeCount);
		}

		Integer overtimeCount = (Integer)attributes.get("overtimeCount");

		if (overtimeCount != null) {
			setOvertimeCount(overtimeCount);
		}

		String govAgencyCode = (String)attributes.get("govAgencyCode");

		if (govAgencyCode != null) {
			setGovAgencyCode(govAgencyCode);
		}

		String govAgencyName = (String)attributes.get("govAgencyName");

		if (govAgencyName != null) {
			setGovAgencyName(govAgencyName);
		}

		String domainCode = (String)attributes.get("domainCode");

		if (domainCode != null) {
			setDomainCode(domainCode);
		}

		String domainName = (String)attributes.get("domainName");

		if (domainName != null) {
			setDomainName(domainName);
		}

		Integer administrationLevel = (Integer)attributes.get(
				"administrationLevel");

		if (administrationLevel != null) {
			setAdministrationLevel(administrationLevel);
		}

		Boolean reporting = (Boolean)attributes.get("reporting");

		if (reporting != null) {
			setReporting(reporting);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getDossierStatisticId() {
		return _dossierStatisticId;
	}

	@Override
	public void setDossierStatisticId(long dossierStatisticId) {
		_dossierStatisticId = dossierStatisticId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public int getMonth() {
		return _month;
	}

	@Override
	public void setMonth(int month) {
		_month = month;
	}

	@Override
	public int getYear() {
		return _year;
	}

	@Override
	public void setYear(int year) {
		_columnBitmask |= YEAR_COLUMN_BITMASK;

		if (!_setOriginalYear) {
			_setOriginalYear = true;

			_originalYear = _year;
		}

		_year = year;
	}

	public int getOriginalYear() {
		return _originalYear;
	}

	@Override
	public int getRemainingCount() {
		return _remainingCount;
	}

	@Override
	public void setRemainingCount(int remainingCount) {
		_remainingCount = remainingCount;
	}

	@Override
	public int getReceivedCount() {
		return _receivedCount;
	}

	@Override
	public void setReceivedCount(int receivedCount) {
		_receivedCount = receivedCount;
	}

	@Override
	public int getOnlineCount() {
		return _onlineCount;
	}

	@Override
	public void setOnlineCount(int onlineCount) {
		_onlineCount = onlineCount;
	}

	@Override
	public int getUndueCount() {
		return _undueCount;
	}

	@Override
	public void setUndueCount(int undueCount) {
		_undueCount = undueCount;
	}

	@Override
	public int getOverdueCount() {
		return _overdueCount;
	}

	@Override
	public void setOverdueCount(int overdueCount) {
		_overdueCount = overdueCount;
	}

	@Override
	public int getOntimeCount() {
		return _ontimeCount;
	}

	@Override
	public void setOntimeCount(int ontimeCount) {
		_ontimeCount = ontimeCount;
	}

	@Override
	public int getOvertimeCount() {
		return _overtimeCount;
	}

	@Override
	public void setOvertimeCount(int overtimeCount) {
		_overtimeCount = overtimeCount;
	}

	@Override
	public String getGovAgencyCode() {
		if (_govAgencyCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _govAgencyCode;
		}
	}

	@Override
	public void setGovAgencyCode(String govAgencyCode) {
		_govAgencyCode = govAgencyCode;
	}

	@Override
	public String getGovAgencyName() {
		if (_govAgencyName == null) {
			return StringPool.BLANK;
		}
		else {
			return _govAgencyName;
		}
	}

	@Override
	public void setGovAgencyName(String govAgencyName) {
		_govAgencyName = govAgencyName;
	}

	@Override
	public String getDomainCode() {
		if (_domainCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _domainCode;
		}
	}

	@Override
	public void setDomainCode(String domainCode) {
		_domainCode = domainCode;
	}

	@Override
	public String getDomainName() {
		if (_domainName == null) {
			return StringPool.BLANK;
		}
		else {
			return _domainName;
		}
	}

	@Override
	public void setDomainName(String domainName) {
		_domainName = domainName;
	}

	@Override
	public int getAdministrationLevel() {
		return _administrationLevel;
	}

	@Override
	public void setAdministrationLevel(int administrationLevel) {
		_administrationLevel = administrationLevel;
	}

	@Override
	public boolean getReporting() {
		return _reporting;
	}

	@Override
	public boolean isReporting() {
		return _reporting;
	}

	@Override
	public void setReporting(boolean reporting) {
		_reporting = reporting;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				DossierStatistic.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			DossierStatistic.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DossierStatistic toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DossierStatistic)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DossierStatisticImpl dossierStatisticImpl = new DossierStatisticImpl();

		dossierStatisticImpl.setUuid(getUuid());
		dossierStatisticImpl.setDossierStatisticId(getDossierStatisticId());
		dossierStatisticImpl.setCompanyId(getCompanyId());
		dossierStatisticImpl.setGroupId(getGroupId());
		dossierStatisticImpl.setUserId(getUserId());
		dossierStatisticImpl.setUserName(getUserName());
		dossierStatisticImpl.setCreateDate(getCreateDate());
		dossierStatisticImpl.setModifiedDate(getModifiedDate());
		dossierStatisticImpl.setMonth(getMonth());
		dossierStatisticImpl.setYear(getYear());
		dossierStatisticImpl.setRemainingCount(getRemainingCount());
		dossierStatisticImpl.setReceivedCount(getReceivedCount());
		dossierStatisticImpl.setOnlineCount(getOnlineCount());
		dossierStatisticImpl.setUndueCount(getUndueCount());
		dossierStatisticImpl.setOverdueCount(getOverdueCount());
		dossierStatisticImpl.setOntimeCount(getOntimeCount());
		dossierStatisticImpl.setOvertimeCount(getOvertimeCount());
		dossierStatisticImpl.setGovAgencyCode(getGovAgencyCode());
		dossierStatisticImpl.setGovAgencyName(getGovAgencyName());
		dossierStatisticImpl.setDomainCode(getDomainCode());
		dossierStatisticImpl.setDomainName(getDomainName());
		dossierStatisticImpl.setAdministrationLevel(getAdministrationLevel());
		dossierStatisticImpl.setReporting(getReporting());

		dossierStatisticImpl.resetOriginalValues();

		return dossierStatisticImpl;
	}

	@Override
	public int compareTo(DossierStatistic dossierStatistic) {
		long primaryKey = dossierStatistic.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DossierStatistic)) {
			return false;
		}

		DossierStatistic dossierStatistic = (DossierStatistic)obj;

		long primaryKey = dossierStatistic.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		DossierStatisticModelImpl dossierStatisticModelImpl = this;

		dossierStatisticModelImpl._originalUuid = dossierStatisticModelImpl._uuid;

		dossierStatisticModelImpl._originalCompanyId = dossierStatisticModelImpl._companyId;

		dossierStatisticModelImpl._setOriginalCompanyId = false;

		dossierStatisticModelImpl._originalGroupId = dossierStatisticModelImpl._groupId;

		dossierStatisticModelImpl._setOriginalGroupId = false;

		dossierStatisticModelImpl._originalUserId = dossierStatisticModelImpl._userId;

		dossierStatisticModelImpl._setOriginalUserId = false;

		dossierStatisticModelImpl._setModifiedDate = false;

		dossierStatisticModelImpl._originalYear = dossierStatisticModelImpl._year;

		dossierStatisticModelImpl._setOriginalYear = false;

		dossierStatisticModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DossierStatistic> toCacheModel() {
		DossierStatisticCacheModel dossierStatisticCacheModel = new DossierStatisticCacheModel();

		dossierStatisticCacheModel.uuid = getUuid();

		String uuid = dossierStatisticCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			dossierStatisticCacheModel.uuid = null;
		}

		dossierStatisticCacheModel.dossierStatisticId = getDossierStatisticId();

		dossierStatisticCacheModel.companyId = getCompanyId();

		dossierStatisticCacheModel.groupId = getGroupId();

		dossierStatisticCacheModel.userId = getUserId();

		dossierStatisticCacheModel.userName = getUserName();

		String userName = dossierStatisticCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			dossierStatisticCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			dossierStatisticCacheModel.createDate = createDate.getTime();
		}
		else {
			dossierStatisticCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dossierStatisticCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dossierStatisticCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		dossierStatisticCacheModel.month = getMonth();

		dossierStatisticCacheModel.year = getYear();

		dossierStatisticCacheModel.remainingCount = getRemainingCount();

		dossierStatisticCacheModel.receivedCount = getReceivedCount();

		dossierStatisticCacheModel.onlineCount = getOnlineCount();

		dossierStatisticCacheModel.undueCount = getUndueCount();

		dossierStatisticCacheModel.overdueCount = getOverdueCount();

		dossierStatisticCacheModel.ontimeCount = getOntimeCount();

		dossierStatisticCacheModel.overtimeCount = getOvertimeCount();

		dossierStatisticCacheModel.govAgencyCode = getGovAgencyCode();

		String govAgencyCode = dossierStatisticCacheModel.govAgencyCode;

		if ((govAgencyCode != null) && (govAgencyCode.length() == 0)) {
			dossierStatisticCacheModel.govAgencyCode = null;
		}

		dossierStatisticCacheModel.govAgencyName = getGovAgencyName();

		String govAgencyName = dossierStatisticCacheModel.govAgencyName;

		if ((govAgencyName != null) && (govAgencyName.length() == 0)) {
			dossierStatisticCacheModel.govAgencyName = null;
		}

		dossierStatisticCacheModel.domainCode = getDomainCode();

		String domainCode = dossierStatisticCacheModel.domainCode;

		if ((domainCode != null) && (domainCode.length() == 0)) {
			dossierStatisticCacheModel.domainCode = null;
		}

		dossierStatisticCacheModel.domainName = getDomainName();

		String domainName = dossierStatisticCacheModel.domainName;

		if ((domainName != null) && (domainName.length() == 0)) {
			dossierStatisticCacheModel.domainName = null;
		}

		dossierStatisticCacheModel.administrationLevel = getAdministrationLevel();

		dossierStatisticCacheModel.reporting = getReporting();

		return dossierStatisticCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(47);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", dossierStatisticId=");
		sb.append(getDossierStatisticId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", month=");
		sb.append(getMonth());
		sb.append(", year=");
		sb.append(getYear());
		sb.append(", remainingCount=");
		sb.append(getRemainingCount());
		sb.append(", receivedCount=");
		sb.append(getReceivedCount());
		sb.append(", onlineCount=");
		sb.append(getOnlineCount());
		sb.append(", undueCount=");
		sb.append(getUndueCount());
		sb.append(", overdueCount=");
		sb.append(getOverdueCount());
		sb.append(", ontimeCount=");
		sb.append(getOntimeCount());
		sb.append(", overtimeCount=");
		sb.append(getOvertimeCount());
		sb.append(", govAgencyCode=");
		sb.append(getGovAgencyCode());
		sb.append(", govAgencyName=");
		sb.append(getGovAgencyName());
		sb.append(", domainCode=");
		sb.append(getDomainCode());
		sb.append(", domainName=");
		sb.append(getDomainName());
		sb.append(", administrationLevel=");
		sb.append(getAdministrationLevel());
		sb.append(", reporting=");
		sb.append(getReporting());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(73);

		sb.append("<model><model-name>");
		sb.append("org.opencps.dossiermgt.model.DossierStatistic");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierStatisticId</column-name><column-value><![CDATA[");
		sb.append(getDossierStatisticId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>month</column-name><column-value><![CDATA[");
		sb.append(getMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>year</column-name><column-value><![CDATA[");
		sb.append(getYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remainingCount</column-name><column-value><![CDATA[");
		sb.append(getRemainingCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>receivedCount</column-name><column-value><![CDATA[");
		sb.append(getReceivedCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>onlineCount</column-name><column-value><![CDATA[");
		sb.append(getOnlineCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>undueCount</column-name><column-value><![CDATA[");
		sb.append(getUndueCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>overdueCount</column-name><column-value><![CDATA[");
		sb.append(getOverdueCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ontimeCount</column-name><column-value><![CDATA[");
		sb.append(getOntimeCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>overtimeCount</column-name><column-value><![CDATA[");
		sb.append(getOvertimeCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>govAgencyCode</column-name><column-value><![CDATA[");
		sb.append(getGovAgencyCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>govAgencyName</column-name><column-value><![CDATA[");
		sb.append(getGovAgencyName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>domainCode</column-name><column-value><![CDATA[");
		sb.append(getDomainCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>domainName</column-name><column-value><![CDATA[");
		sb.append(getDomainName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>administrationLevel</column-name><column-value><![CDATA[");
		sb.append(getAdministrationLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reporting</column-name><column-value><![CDATA[");
		sb.append(getReporting());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = DossierStatistic.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			DossierStatistic.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _dossierStatisticId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _month;
	private int _year;
	private int _originalYear;
	private boolean _setOriginalYear;
	private int _remainingCount;
	private int _receivedCount;
	private int _onlineCount;
	private int _undueCount;
	private int _overdueCount;
	private int _ontimeCount;
	private int _overtimeCount;
	private String _govAgencyCode;
	private String _govAgencyName;
	private String _domainCode;
	private String _domainName;
	private int _administrationLevel;
	private boolean _reporting;
	private long _columnBitmask;
	private DossierStatistic _escapedModel;
}