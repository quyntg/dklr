/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.dossiermgt.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import org.opencps.dossiermgt.model.ProcessAction;
import org.opencps.dossiermgt.model.ProcessActionModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ProcessAction service. Represents a row in the &quot;opencps_processaction&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ProcessActionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProcessActionImpl}.
 * </p>
 *
 * @author huymq
 * @see ProcessActionImpl
 * @see ProcessAction
 * @see ProcessActionModel
 * @generated
 */
@ProviderType
public class ProcessActionModelImpl extends BaseModelImpl<ProcessAction>
	implements ProcessActionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a process action model instance should use the {@link ProcessAction} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_processaction";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "processActionId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "serviceProcessId", Types.BIGINT },
			{ "preStepCode", Types.VARCHAR },
			{ "postStepCode", Types.VARCHAR },
			{ "autoEvent", Types.VARCHAR },
			{ "preCondition", Types.VARCHAR },
			{ "actionCode", Types.VARCHAR },
			{ "actionName", Types.VARCHAR },
			{ "allowAssignUser", Types.BOOLEAN },
			{ "assignUserId", Types.BIGINT },
			{ "requestPayment", Types.INTEGER },
			{ "paymentFee", Types.VARCHAR },
			{ "createDossierFiles", Types.VARCHAR },
			{ "returnDossierFiles", Types.VARCHAR },
			{ "makeBriefNote", Types.VARCHAR },
			{ "syncActionCode", Types.VARCHAR },
			{ "rollbackable", Types.BOOLEAN },
			{ "createDossierNo", Types.BOOLEAN },
			{ "eSignature", Types.BOOLEAN },
			{ "configNote", Types.VARCHAR },
			{ "dossierTemplateNo", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("processActionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("serviceProcessId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("preStepCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("postStepCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("autoEvent", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("preCondition", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("actionCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("actionName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("allowAssignUser", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("assignUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("requestPayment", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("paymentFee", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDossierFiles", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("returnDossierFiles", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("makeBriefNote", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("syncActionCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rollbackable", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("createDossierNo", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("eSignature", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("configNote", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dossierTemplateNo", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table opencps_processaction (uuid_ VARCHAR(75) null,processActionId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,serviceProcessId LONG,preStepCode VARCHAR(75) null,postStepCode VARCHAR(75) null,autoEvent VARCHAR(75) null,preCondition VARCHAR(75) null,actionCode VARCHAR(75) null,actionName VARCHAR(75) null,allowAssignUser BOOLEAN,assignUserId LONG,requestPayment INTEGER,paymentFee VARCHAR(75) null,createDossierFiles VARCHAR(75) null,returnDossierFiles VARCHAR(75) null,makeBriefNote VARCHAR(75) null,syncActionCode VARCHAR(75) null,rollbackable BOOLEAN,createDossierNo BOOLEAN,eSignature BOOLEAN,configNote VARCHAR(75) null,dossierTemplateNo VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table opencps_processaction";
	public static final String ORDER_BY_JPQL = " ORDER BY processAction.createDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_processaction.createDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.dossiermgt.model.ProcessAction"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.dossiermgt.model.ProcessAction"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.dossiermgt.model.ProcessAction"),
			true);
	public static final long ACTIONCODE_COLUMN_BITMASK = 1L;
	public static final long ACTIONNAME_COLUMN_BITMASK = 2L;
	public static final long AUTOEVENT_COLUMN_BITMASK = 4L;
	public static final long COMPANYID_COLUMN_BITMASK = 8L;
	public static final long GROUPID_COLUMN_BITMASK = 16L;
	public static final long POSTSTEPCODE_COLUMN_BITMASK = 32L;
	public static final long PRESTEPCODE_COLUMN_BITMASK = 64L;
	public static final long SERVICEPROCESSID_COLUMN_BITMASK = 128L;
	public static final long UUID_COLUMN_BITMASK = 256L;
	public static final long CREATEDATE_COLUMN_BITMASK = 512L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"lock.expiration.time.org.opencps.dossiermgt.model.ProcessAction"));

	public ProcessActionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _processActionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProcessActionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _processActionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProcessAction.class;
	}

	@Override
	public String getModelClassName() {
		return ProcessAction.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("processActionId", getProcessActionId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("serviceProcessId", getServiceProcessId());
		attributes.put("preStepCode", getPreStepCode());
		attributes.put("postStepCode", getPostStepCode());
		attributes.put("autoEvent", getAutoEvent());
		attributes.put("preCondition", getPreCondition());
		attributes.put("actionCode", getActionCode());
		attributes.put("actionName", getActionName());
		attributes.put("allowAssignUser", getAllowAssignUser());
		attributes.put("assignUserId", getAssignUserId());
		attributes.put("requestPayment", getRequestPayment());
		attributes.put("paymentFee", getPaymentFee());
		attributes.put("createDossierFiles", getCreateDossierFiles());
		attributes.put("returnDossierFiles", getReturnDossierFiles());
		attributes.put("makeBriefNote", getMakeBriefNote());
		attributes.put("syncActionCode", getSyncActionCode());
		attributes.put("rollbackable", getRollbackable());
		attributes.put("createDossierNo", getCreateDossierNo());
		attributes.put("eSignature", getESignature());
		attributes.put("configNote", getConfigNote());
		attributes.put("dossierTemplateNo", getDossierTemplateNo());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long processActionId = (Long)attributes.get("processActionId");

		if (processActionId != null) {
			setProcessActionId(processActionId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long serviceProcessId = (Long)attributes.get("serviceProcessId");

		if (serviceProcessId != null) {
			setServiceProcessId(serviceProcessId);
		}

		String preStepCode = (String)attributes.get("preStepCode");

		if (preStepCode != null) {
			setPreStepCode(preStepCode);
		}

		String postStepCode = (String)attributes.get("postStepCode");

		if (postStepCode != null) {
			setPostStepCode(postStepCode);
		}

		String autoEvent = (String)attributes.get("autoEvent");

		if (autoEvent != null) {
			setAutoEvent(autoEvent);
		}

		String preCondition = (String)attributes.get("preCondition");

		if (preCondition != null) {
			setPreCondition(preCondition);
		}

		String actionCode = (String)attributes.get("actionCode");

		if (actionCode != null) {
			setActionCode(actionCode);
		}

		String actionName = (String)attributes.get("actionName");

		if (actionName != null) {
			setActionName(actionName);
		}

		Boolean allowAssignUser = (Boolean)attributes.get("allowAssignUser");

		if (allowAssignUser != null) {
			setAllowAssignUser(allowAssignUser);
		}

		Long assignUserId = (Long)attributes.get("assignUserId");

		if (assignUserId != null) {
			setAssignUserId(assignUserId);
		}

		Integer requestPayment = (Integer)attributes.get("requestPayment");

		if (requestPayment != null) {
			setRequestPayment(requestPayment);
		}

		String paymentFee = (String)attributes.get("paymentFee");

		if (paymentFee != null) {
			setPaymentFee(paymentFee);
		}

		String createDossierFiles = (String)attributes.get("createDossierFiles");

		if (createDossierFiles != null) {
			setCreateDossierFiles(createDossierFiles);
		}

		String returnDossierFiles = (String)attributes.get("returnDossierFiles");

		if (returnDossierFiles != null) {
			setReturnDossierFiles(returnDossierFiles);
		}

		String makeBriefNote = (String)attributes.get("makeBriefNote");

		if (makeBriefNote != null) {
			setMakeBriefNote(makeBriefNote);
		}

		String syncActionCode = (String)attributes.get("syncActionCode");

		if (syncActionCode != null) {
			setSyncActionCode(syncActionCode);
		}

		Boolean rollbackable = (Boolean)attributes.get("rollbackable");

		if (rollbackable != null) {
			setRollbackable(rollbackable);
		}

		Boolean createDossierNo = (Boolean)attributes.get("createDossierNo");

		if (createDossierNo != null) {
			setCreateDossierNo(createDossierNo);
		}

		Boolean eSignature = (Boolean)attributes.get("eSignature");

		if (eSignature != null) {
			setESignature(eSignature);
		}

		String configNote = (String)attributes.get("configNote");

		if (configNote != null) {
			setConfigNote(configNote);
		}

		String dossierTemplateNo = (String)attributes.get("dossierTemplateNo");

		if (dossierTemplateNo != null) {
			setDossierTemplateNo(dossierTemplateNo);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getProcessActionId() {
		return _processActionId;
	}

	@Override
	public void setProcessActionId(long processActionId) {
		_processActionId = processActionId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getServiceProcessId() {
		return _serviceProcessId;
	}

	@Override
	public void setServiceProcessId(long serviceProcessId) {
		_columnBitmask |= SERVICEPROCESSID_COLUMN_BITMASK;

		if (!_setOriginalServiceProcessId) {
			_setOriginalServiceProcessId = true;

			_originalServiceProcessId = _serviceProcessId;
		}

		_serviceProcessId = serviceProcessId;
	}

	public long getOriginalServiceProcessId() {
		return _originalServiceProcessId;
	}

	@Override
	public String getPreStepCode() {
		if (_preStepCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _preStepCode;
		}
	}

	@Override
	public void setPreStepCode(String preStepCode) {
		_columnBitmask |= PRESTEPCODE_COLUMN_BITMASK;

		if (_originalPreStepCode == null) {
			_originalPreStepCode = _preStepCode;
		}

		_preStepCode = preStepCode;
	}

	public String getOriginalPreStepCode() {
		return GetterUtil.getString(_originalPreStepCode);
	}

	@Override
	public String getPostStepCode() {
		if (_postStepCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _postStepCode;
		}
	}

	@Override
	public void setPostStepCode(String postStepCode) {
		_columnBitmask |= POSTSTEPCODE_COLUMN_BITMASK;

		if (_originalPostStepCode == null) {
			_originalPostStepCode = _postStepCode;
		}

		_postStepCode = postStepCode;
	}

	public String getOriginalPostStepCode() {
		return GetterUtil.getString(_originalPostStepCode);
	}

	@Override
	public String getAutoEvent() {
		if (_autoEvent == null) {
			return StringPool.BLANK;
		}
		else {
			return _autoEvent;
		}
	}

	@Override
	public void setAutoEvent(String autoEvent) {
		_columnBitmask |= AUTOEVENT_COLUMN_BITMASK;

		if (_originalAutoEvent == null) {
			_originalAutoEvent = _autoEvent;
		}

		_autoEvent = autoEvent;
	}

	public String getOriginalAutoEvent() {
		return GetterUtil.getString(_originalAutoEvent);
	}

	@Override
	public String getPreCondition() {
		if (_preCondition == null) {
			return StringPool.BLANK;
		}
		else {
			return _preCondition;
		}
	}

	@Override
	public void setPreCondition(String preCondition) {
		_preCondition = preCondition;
	}

	@Override
	public String getActionCode() {
		if (_actionCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _actionCode;
		}
	}

	@Override
	public void setActionCode(String actionCode) {
		_columnBitmask |= ACTIONCODE_COLUMN_BITMASK;

		if (_originalActionCode == null) {
			_originalActionCode = _actionCode;
		}

		_actionCode = actionCode;
	}

	public String getOriginalActionCode() {
		return GetterUtil.getString(_originalActionCode);
	}

	@Override
	public String getActionName() {
		if (_actionName == null) {
			return StringPool.BLANK;
		}
		else {
			return _actionName;
		}
	}

	@Override
	public void setActionName(String actionName) {
		_columnBitmask |= ACTIONNAME_COLUMN_BITMASK;

		if (_originalActionName == null) {
			_originalActionName = _actionName;
		}

		_actionName = actionName;
	}

	public String getOriginalActionName() {
		return GetterUtil.getString(_originalActionName);
	}

	@Override
	public boolean getAllowAssignUser() {
		return _allowAssignUser;
	}

	@Override
	public boolean isAllowAssignUser() {
		return _allowAssignUser;
	}

	@Override
	public void setAllowAssignUser(boolean allowAssignUser) {
		_allowAssignUser = allowAssignUser;
	}

	@Override
	public long getAssignUserId() {
		return _assignUserId;
	}

	@Override
	public void setAssignUserId(long assignUserId) {
		_assignUserId = assignUserId;
	}

	@Override
	public String getAssignUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getAssignUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setAssignUserUuid(String assignUserUuid) {
	}

	@Override
	public int getRequestPayment() {
		return _requestPayment;
	}

	@Override
	public void setRequestPayment(int requestPayment) {
		_requestPayment = requestPayment;
	}

	@Override
	public String getPaymentFee() {
		if (_paymentFee == null) {
			return StringPool.BLANK;
		}
		else {
			return _paymentFee;
		}
	}

	@Override
	public void setPaymentFee(String paymentFee) {
		_paymentFee = paymentFee;
	}

	@Override
	public String getCreateDossierFiles() {
		if (_createDossierFiles == null) {
			return StringPool.BLANK;
		}
		else {
			return _createDossierFiles;
		}
	}

	@Override
	public void setCreateDossierFiles(String createDossierFiles) {
		_createDossierFiles = createDossierFiles;
	}

	@Override
	public String getReturnDossierFiles() {
		if (_returnDossierFiles == null) {
			return StringPool.BLANK;
		}
		else {
			return _returnDossierFiles;
		}
	}

	@Override
	public void setReturnDossierFiles(String returnDossierFiles) {
		_returnDossierFiles = returnDossierFiles;
	}

	@Override
	public String getMakeBriefNote() {
		if (_makeBriefNote == null) {
			return StringPool.BLANK;
		}
		else {
			return _makeBriefNote;
		}
	}

	@Override
	public void setMakeBriefNote(String makeBriefNote) {
		_makeBriefNote = makeBriefNote;
	}

	@Override
	public String getSyncActionCode() {
		if (_syncActionCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _syncActionCode;
		}
	}

	@Override
	public void setSyncActionCode(String syncActionCode) {
		_syncActionCode = syncActionCode;
	}

	@Override
	public boolean getRollbackable() {
		return _rollbackable;
	}

	@Override
	public boolean isRollbackable() {
		return _rollbackable;
	}

	@Override
	public void setRollbackable(boolean rollbackable) {
		_rollbackable = rollbackable;
	}

	@Override
	public boolean getCreateDossierNo() {
		return _createDossierNo;
	}

	@Override
	public boolean isCreateDossierNo() {
		return _createDossierNo;
	}

	@Override
	public void setCreateDossierNo(boolean createDossierNo) {
		_createDossierNo = createDossierNo;
	}

	@Override
	public boolean getESignature() {
		return _eSignature;
	}

	@Override
	public boolean isESignature() {
		return _eSignature;
	}

	@Override
	public void setESignature(boolean eSignature) {
		_eSignature = eSignature;
	}

	@Override
	public String getConfigNote() {
		if (_configNote == null) {
			return StringPool.BLANK;
		}
		else {
			return _configNote;
		}
	}

	@Override
	public void setConfigNote(String configNote) {
		_configNote = configNote;
	}

	@Override
	public String getDossierTemplateNo() {
		if (_dossierTemplateNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _dossierTemplateNo;
		}
	}

	@Override
	public void setDossierTemplateNo(String dossierTemplateNo) {
		_dossierTemplateNo = dossierTemplateNo;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				ProcessAction.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ProcessAction.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ProcessAction toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ProcessAction)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProcessActionImpl processActionImpl = new ProcessActionImpl();

		processActionImpl.setUuid(getUuid());
		processActionImpl.setProcessActionId(getProcessActionId());
		processActionImpl.setCompanyId(getCompanyId());
		processActionImpl.setGroupId(getGroupId());
		processActionImpl.setUserId(getUserId());
		processActionImpl.setUserName(getUserName());
		processActionImpl.setCreateDate(getCreateDate());
		processActionImpl.setModifiedDate(getModifiedDate());
		processActionImpl.setServiceProcessId(getServiceProcessId());
		processActionImpl.setPreStepCode(getPreStepCode());
		processActionImpl.setPostStepCode(getPostStepCode());
		processActionImpl.setAutoEvent(getAutoEvent());
		processActionImpl.setPreCondition(getPreCondition());
		processActionImpl.setActionCode(getActionCode());
		processActionImpl.setActionName(getActionName());
		processActionImpl.setAllowAssignUser(getAllowAssignUser());
		processActionImpl.setAssignUserId(getAssignUserId());
		processActionImpl.setRequestPayment(getRequestPayment());
		processActionImpl.setPaymentFee(getPaymentFee());
		processActionImpl.setCreateDossierFiles(getCreateDossierFiles());
		processActionImpl.setReturnDossierFiles(getReturnDossierFiles());
		processActionImpl.setMakeBriefNote(getMakeBriefNote());
		processActionImpl.setSyncActionCode(getSyncActionCode());
		processActionImpl.setRollbackable(getRollbackable());
		processActionImpl.setCreateDossierNo(getCreateDossierNo());
		processActionImpl.setESignature(getESignature());
		processActionImpl.setConfigNote(getConfigNote());
		processActionImpl.setDossierTemplateNo(getDossierTemplateNo());

		processActionImpl.resetOriginalValues();

		return processActionImpl;
	}

	@Override
	public int compareTo(ProcessAction processAction) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(),
				processAction.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ProcessAction)) {
			return false;
		}

		ProcessAction processAction = (ProcessAction)obj;

		long primaryKey = processAction.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ProcessActionModelImpl processActionModelImpl = this;

		processActionModelImpl._originalUuid = processActionModelImpl._uuid;

		processActionModelImpl._originalCompanyId = processActionModelImpl._companyId;

		processActionModelImpl._setOriginalCompanyId = false;

		processActionModelImpl._originalGroupId = processActionModelImpl._groupId;

		processActionModelImpl._setOriginalGroupId = false;

		processActionModelImpl._setModifiedDate = false;

		processActionModelImpl._originalServiceProcessId = processActionModelImpl._serviceProcessId;

		processActionModelImpl._setOriginalServiceProcessId = false;

		processActionModelImpl._originalPreStepCode = processActionModelImpl._preStepCode;

		processActionModelImpl._originalPostStepCode = processActionModelImpl._postStepCode;

		processActionModelImpl._originalAutoEvent = processActionModelImpl._autoEvent;

		processActionModelImpl._originalActionCode = processActionModelImpl._actionCode;

		processActionModelImpl._originalActionName = processActionModelImpl._actionName;

		processActionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ProcessAction> toCacheModel() {
		ProcessActionCacheModel processActionCacheModel = new ProcessActionCacheModel();

		processActionCacheModel.uuid = getUuid();

		String uuid = processActionCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			processActionCacheModel.uuid = null;
		}

		processActionCacheModel.processActionId = getProcessActionId();

		processActionCacheModel.companyId = getCompanyId();

		processActionCacheModel.groupId = getGroupId();

		processActionCacheModel.userId = getUserId();

		processActionCacheModel.userName = getUserName();

		String userName = processActionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			processActionCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			processActionCacheModel.createDate = createDate.getTime();
		}
		else {
			processActionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			processActionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			processActionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		processActionCacheModel.serviceProcessId = getServiceProcessId();

		processActionCacheModel.preStepCode = getPreStepCode();

		String preStepCode = processActionCacheModel.preStepCode;

		if ((preStepCode != null) && (preStepCode.length() == 0)) {
			processActionCacheModel.preStepCode = null;
		}

		processActionCacheModel.postStepCode = getPostStepCode();

		String postStepCode = processActionCacheModel.postStepCode;

		if ((postStepCode != null) && (postStepCode.length() == 0)) {
			processActionCacheModel.postStepCode = null;
		}

		processActionCacheModel.autoEvent = getAutoEvent();

		String autoEvent = processActionCacheModel.autoEvent;

		if ((autoEvent != null) && (autoEvent.length() == 0)) {
			processActionCacheModel.autoEvent = null;
		}

		processActionCacheModel.preCondition = getPreCondition();

		String preCondition = processActionCacheModel.preCondition;

		if ((preCondition != null) && (preCondition.length() == 0)) {
			processActionCacheModel.preCondition = null;
		}

		processActionCacheModel.actionCode = getActionCode();

		String actionCode = processActionCacheModel.actionCode;

		if ((actionCode != null) && (actionCode.length() == 0)) {
			processActionCacheModel.actionCode = null;
		}

		processActionCacheModel.actionName = getActionName();

		String actionName = processActionCacheModel.actionName;

		if ((actionName != null) && (actionName.length() == 0)) {
			processActionCacheModel.actionName = null;
		}

		processActionCacheModel.allowAssignUser = getAllowAssignUser();

		processActionCacheModel.assignUserId = getAssignUserId();

		processActionCacheModel.requestPayment = getRequestPayment();

		processActionCacheModel.paymentFee = getPaymentFee();

		String paymentFee = processActionCacheModel.paymentFee;

		if ((paymentFee != null) && (paymentFee.length() == 0)) {
			processActionCacheModel.paymentFee = null;
		}

		processActionCacheModel.createDossierFiles = getCreateDossierFiles();

		String createDossierFiles = processActionCacheModel.createDossierFiles;

		if ((createDossierFiles != null) && (createDossierFiles.length() == 0)) {
			processActionCacheModel.createDossierFiles = null;
		}

		processActionCacheModel.returnDossierFiles = getReturnDossierFiles();

		String returnDossierFiles = processActionCacheModel.returnDossierFiles;

		if ((returnDossierFiles != null) && (returnDossierFiles.length() == 0)) {
			processActionCacheModel.returnDossierFiles = null;
		}

		processActionCacheModel.makeBriefNote = getMakeBriefNote();

		String makeBriefNote = processActionCacheModel.makeBriefNote;

		if ((makeBriefNote != null) && (makeBriefNote.length() == 0)) {
			processActionCacheModel.makeBriefNote = null;
		}

		processActionCacheModel.syncActionCode = getSyncActionCode();

		String syncActionCode = processActionCacheModel.syncActionCode;

		if ((syncActionCode != null) && (syncActionCode.length() == 0)) {
			processActionCacheModel.syncActionCode = null;
		}

		processActionCacheModel.rollbackable = getRollbackable();

		processActionCacheModel.createDossierNo = getCreateDossierNo();

		processActionCacheModel.eSignature = getESignature();

		processActionCacheModel.configNote = getConfigNote();

		String configNote = processActionCacheModel.configNote;

		if ((configNote != null) && (configNote.length() == 0)) {
			processActionCacheModel.configNote = null;
		}

		processActionCacheModel.dossierTemplateNo = getDossierTemplateNo();

		String dossierTemplateNo = processActionCacheModel.dossierTemplateNo;

		if ((dossierTemplateNo != null) && (dossierTemplateNo.length() == 0)) {
			processActionCacheModel.dossierTemplateNo = null;
		}

		return processActionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(57);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", processActionId=");
		sb.append(getProcessActionId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", serviceProcessId=");
		sb.append(getServiceProcessId());
		sb.append(", preStepCode=");
		sb.append(getPreStepCode());
		sb.append(", postStepCode=");
		sb.append(getPostStepCode());
		sb.append(", autoEvent=");
		sb.append(getAutoEvent());
		sb.append(", preCondition=");
		sb.append(getPreCondition());
		sb.append(", actionCode=");
		sb.append(getActionCode());
		sb.append(", actionName=");
		sb.append(getActionName());
		sb.append(", allowAssignUser=");
		sb.append(getAllowAssignUser());
		sb.append(", assignUserId=");
		sb.append(getAssignUserId());
		sb.append(", requestPayment=");
		sb.append(getRequestPayment());
		sb.append(", paymentFee=");
		sb.append(getPaymentFee());
		sb.append(", createDossierFiles=");
		sb.append(getCreateDossierFiles());
		sb.append(", returnDossierFiles=");
		sb.append(getReturnDossierFiles());
		sb.append(", makeBriefNote=");
		sb.append(getMakeBriefNote());
		sb.append(", syncActionCode=");
		sb.append(getSyncActionCode());
		sb.append(", rollbackable=");
		sb.append(getRollbackable());
		sb.append(", createDossierNo=");
		sb.append(getCreateDossierNo());
		sb.append(", eSignature=");
		sb.append(getESignature());
		sb.append(", configNote=");
		sb.append(getConfigNote());
		sb.append(", dossierTemplateNo=");
		sb.append(getDossierTemplateNo());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(88);

		sb.append("<model><model-name>");
		sb.append("org.opencps.dossiermgt.model.ProcessAction");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processActionId</column-name><column-value><![CDATA[");
		sb.append(getProcessActionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serviceProcessId</column-name><column-value><![CDATA[");
		sb.append(getServiceProcessId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>preStepCode</column-name><column-value><![CDATA[");
		sb.append(getPreStepCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>postStepCode</column-name><column-value><![CDATA[");
		sb.append(getPostStepCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>autoEvent</column-name><column-value><![CDATA[");
		sb.append(getAutoEvent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>preCondition</column-name><column-value><![CDATA[");
		sb.append(getPreCondition());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actionCode</column-name><column-value><![CDATA[");
		sb.append(getActionCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actionName</column-name><column-value><![CDATA[");
		sb.append(getActionName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>allowAssignUser</column-name><column-value><![CDATA[");
		sb.append(getAllowAssignUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assignUserId</column-name><column-value><![CDATA[");
		sb.append(getAssignUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestPayment</column-name><column-value><![CDATA[");
		sb.append(getRequestPayment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paymentFee</column-name><column-value><![CDATA[");
		sb.append(getPaymentFee());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDossierFiles</column-name><column-value><![CDATA[");
		sb.append(getCreateDossierFiles());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>returnDossierFiles</column-name><column-value><![CDATA[");
		sb.append(getReturnDossierFiles());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>makeBriefNote</column-name><column-value><![CDATA[");
		sb.append(getMakeBriefNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncActionCode</column-name><column-value><![CDATA[");
		sb.append(getSyncActionCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rollbackable</column-name><column-value><![CDATA[");
		sb.append(getRollbackable());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDossierNo</column-name><column-value><![CDATA[");
		sb.append(getCreateDossierNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eSignature</column-name><column-value><![CDATA[");
		sb.append(getESignature());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>configNote</column-name><column-value><![CDATA[");
		sb.append(getConfigNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierTemplateNo</column-name><column-value><![CDATA[");
		sb.append(getDossierTemplateNo());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ProcessAction.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ProcessAction.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _processActionId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _serviceProcessId;
	private long _originalServiceProcessId;
	private boolean _setOriginalServiceProcessId;
	private String _preStepCode;
	private String _originalPreStepCode;
	private String _postStepCode;
	private String _originalPostStepCode;
	private String _autoEvent;
	private String _originalAutoEvent;
	private String _preCondition;
	private String _actionCode;
	private String _originalActionCode;
	private String _actionName;
	private String _originalActionName;
	private boolean _allowAssignUser;
	private long _assignUserId;
	private int _requestPayment;
	private String _paymentFee;
	private String _createDossierFiles;
	private String _returnDossierFiles;
	private String _makeBriefNote;
	private String _syncActionCode;
	private boolean _rollbackable;
	private boolean _createDossierNo;
	private boolean _eSignature;
	private String _configNote;
	private String _dossierTemplateNo;
	private long _columnBitmask;
	private ProcessAction _escapedModel;
}