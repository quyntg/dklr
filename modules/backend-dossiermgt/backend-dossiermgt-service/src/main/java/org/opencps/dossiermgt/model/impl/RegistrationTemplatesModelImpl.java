/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.dossiermgt.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import org.opencps.dossiermgt.model.RegistrationTemplates;
import org.opencps.dossiermgt.model.RegistrationTemplatesModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the RegistrationTemplates service. Represents a row in the &quot;opencps_registrationtemplate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link RegistrationTemplatesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RegistrationTemplatesImpl}.
 * </p>
 *
 * @author huymq
 * @see RegistrationTemplatesImpl
 * @see RegistrationTemplates
 * @see RegistrationTemplatesModel
 * @generated
 */
@ProviderType
public class RegistrationTemplatesModelImpl extends BaseModelImpl<RegistrationTemplates>
	implements RegistrationTemplatesModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a registration templates model instance should use the {@link RegistrationTemplates} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_registrationtemplate";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "registrationTemplateId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "govAgencyCode", Types.VARCHAR },
			{ "govAgencyName", Types.VARCHAR },
			{ "formNo", Types.VARCHAR },
			{ "formName", Types.VARCHAR },
			{ "multiple", Types.BOOLEAN },
			{ "formScript", Types.VARCHAR },
			{ "formReport", Types.VARCHAR },
			{ "sampleData", Types.VARCHAR },
			{ "formScriptOfficial", Types.VARCHAR },
			{ "formReportOfficial", Types.VARCHAR },
			{ "sampleDataOfficial", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("registrationTemplateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("govAgencyCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("govAgencyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("formNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("formName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("multiple", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("formScript", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("formReport", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sampleData", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("formScriptOfficial", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("formReportOfficial", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sampleDataOfficial", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table opencps_registrationtemplate (uuid_ VARCHAR(75) null,registrationTemplateId LONG not null primary key,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,govAgencyCode VARCHAR(75) null,govAgencyName VARCHAR(75) null,formNo VARCHAR(75) null,formName VARCHAR(75) null,multiple BOOLEAN,formScript VARCHAR(75) null,formReport VARCHAR(75) null,sampleData VARCHAR(75) null,formScriptOfficial VARCHAR(75) null,formReportOfficial VARCHAR(75) null,sampleDataOfficial VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table opencps_registrationtemplate";
	public static final String ORDER_BY_JPQL = " ORDER BY registrationTemplates.registrationTemplateId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_registrationtemplate.registrationTemplateId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.dossiermgt.model.RegistrationTemplates"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.dossiermgt.model.RegistrationTemplates"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.dossiermgt.model.RegistrationTemplates"),
			true);
	public static final long FORMNO_COLUMN_BITMASK = 1L;
	public static final long GOVAGENCYCODE_COLUMN_BITMASK = 2L;
	public static final long GROUPID_COLUMN_BITMASK = 4L;
	public static final long REGISTRATIONTEMPLATEID_COLUMN_BITMASK = 8L;
	public static final long UUID_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"lock.expiration.time.org.opencps.dossiermgt.model.RegistrationTemplates"));

	public RegistrationTemplatesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _registrationTemplateId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRegistrationTemplateId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _registrationTemplateId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RegistrationTemplates.class;
	}

	@Override
	public String getModelClassName() {
		return RegistrationTemplates.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("registrationTemplateId", getRegistrationTemplateId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("govAgencyCode", getGovAgencyCode());
		attributes.put("govAgencyName", getGovAgencyName());
		attributes.put("formNo", getFormNo());
		attributes.put("formName", getFormName());
		attributes.put("multiple", getMultiple());
		attributes.put("formScript", getFormScript());
		attributes.put("formReport", getFormReport());
		attributes.put("sampleData", getSampleData());
		attributes.put("formScriptOfficial", getFormScriptOfficial());
		attributes.put("formReportOfficial", getFormReportOfficial());
		attributes.put("sampleDataOfficial", getSampleDataOfficial());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long registrationTemplateId = (Long)attributes.get(
				"registrationTemplateId");

		if (registrationTemplateId != null) {
			setRegistrationTemplateId(registrationTemplateId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String govAgencyCode = (String)attributes.get("govAgencyCode");

		if (govAgencyCode != null) {
			setGovAgencyCode(govAgencyCode);
		}

		String govAgencyName = (String)attributes.get("govAgencyName");

		if (govAgencyName != null) {
			setGovAgencyName(govAgencyName);
		}

		String formNo = (String)attributes.get("formNo");

		if (formNo != null) {
			setFormNo(formNo);
		}

		String formName = (String)attributes.get("formName");

		if (formName != null) {
			setFormName(formName);
		}

		Boolean multiple = (Boolean)attributes.get("multiple");

		if (multiple != null) {
			setMultiple(multiple);
		}

		String formScript = (String)attributes.get("formScript");

		if (formScript != null) {
			setFormScript(formScript);
		}

		String formReport = (String)attributes.get("formReport");

		if (formReport != null) {
			setFormReport(formReport);
		}

		String sampleData = (String)attributes.get("sampleData");

		if (sampleData != null) {
			setSampleData(sampleData);
		}

		String formScriptOfficial = (String)attributes.get("formScriptOfficial");

		if (formScriptOfficial != null) {
			setFormScriptOfficial(formScriptOfficial);
		}

		String formReportOfficial = (String)attributes.get("formReportOfficial");

		if (formReportOfficial != null) {
			setFormReportOfficial(formReportOfficial);
		}

		String sampleDataOfficial = (String)attributes.get("sampleDataOfficial");

		if (sampleDataOfficial != null) {
			setSampleDataOfficial(sampleDataOfficial);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getRegistrationTemplateId() {
		return _registrationTemplateId;
	}

	@Override
	public void setRegistrationTemplateId(long registrationTemplateId) {
		_columnBitmask |= REGISTRATIONTEMPLATEID_COLUMN_BITMASK;

		if (!_setOriginalRegistrationTemplateId) {
			_setOriginalRegistrationTemplateId = true;

			_originalRegistrationTemplateId = _registrationTemplateId;
		}

		_registrationTemplateId = registrationTemplateId;
	}

	public long getOriginalRegistrationTemplateId() {
		return _originalRegistrationTemplateId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getGovAgencyCode() {
		if (_govAgencyCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _govAgencyCode;
		}
	}

	@Override
	public void setGovAgencyCode(String govAgencyCode) {
		_columnBitmask |= GOVAGENCYCODE_COLUMN_BITMASK;

		if (_originalGovAgencyCode == null) {
			_originalGovAgencyCode = _govAgencyCode;
		}

		_govAgencyCode = govAgencyCode;
	}

	public String getOriginalGovAgencyCode() {
		return GetterUtil.getString(_originalGovAgencyCode);
	}

	@Override
	public String getGovAgencyName() {
		if (_govAgencyName == null) {
			return StringPool.BLANK;
		}
		else {
			return _govAgencyName;
		}
	}

	@Override
	public void setGovAgencyName(String govAgencyName) {
		_govAgencyName = govAgencyName;
	}

	@Override
	public String getFormNo() {
		if (_formNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _formNo;
		}
	}

	@Override
	public void setFormNo(String formNo) {
		_columnBitmask |= FORMNO_COLUMN_BITMASK;

		if (_originalFormNo == null) {
			_originalFormNo = _formNo;
		}

		_formNo = formNo;
	}

	public String getOriginalFormNo() {
		return GetterUtil.getString(_originalFormNo);
	}

	@Override
	public String getFormName() {
		if (_formName == null) {
			return StringPool.BLANK;
		}
		else {
			return _formName;
		}
	}

	@Override
	public void setFormName(String formName) {
		_formName = formName;
	}

	@Override
	public boolean getMultiple() {
		return _multiple;
	}

	@Override
	public boolean isMultiple() {
		return _multiple;
	}

	@Override
	public void setMultiple(boolean multiple) {
		_multiple = multiple;
	}

	@Override
	public String getFormScript() {
		if (_formScript == null) {
			return StringPool.BLANK;
		}
		else {
			return _formScript;
		}
	}

	@Override
	public void setFormScript(String formScript) {
		_formScript = formScript;
	}

	@Override
	public String getFormReport() {
		if (_formReport == null) {
			return StringPool.BLANK;
		}
		else {
			return _formReport;
		}
	}

	@Override
	public void setFormReport(String formReport) {
		_formReport = formReport;
	}

	@Override
	public String getSampleData() {
		if (_sampleData == null) {
			return StringPool.BLANK;
		}
		else {
			return _sampleData;
		}
	}

	@Override
	public void setSampleData(String sampleData) {
		_sampleData = sampleData;
	}

	@Override
	public String getFormScriptOfficial() {
		if (_formScriptOfficial == null) {
			return StringPool.BLANK;
		}
		else {
			return _formScriptOfficial;
		}
	}

	@Override
	public void setFormScriptOfficial(String formScriptOfficial) {
		_formScriptOfficial = formScriptOfficial;
	}

	@Override
	public String getFormReportOfficial() {
		if (_formReportOfficial == null) {
			return StringPool.BLANK;
		}
		else {
			return _formReportOfficial;
		}
	}

	@Override
	public void setFormReportOfficial(String formReportOfficial) {
		_formReportOfficial = formReportOfficial;
	}

	@Override
	public String getSampleDataOfficial() {
		if (_sampleDataOfficial == null) {
			return StringPool.BLANK;
		}
		else {
			return _sampleDataOfficial;
		}
	}

	@Override
	public void setSampleDataOfficial(String sampleDataOfficial) {
		_sampleDataOfficial = sampleDataOfficial;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			RegistrationTemplates.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RegistrationTemplates toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RegistrationTemplates)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RegistrationTemplatesImpl registrationTemplatesImpl = new RegistrationTemplatesImpl();

		registrationTemplatesImpl.setUuid(getUuid());
		registrationTemplatesImpl.setRegistrationTemplateId(getRegistrationTemplateId());
		registrationTemplatesImpl.setGroupId(getGroupId());
		registrationTemplatesImpl.setUserId(getUserId());
		registrationTemplatesImpl.setUserName(getUserName());
		registrationTemplatesImpl.setCreateDate(getCreateDate());
		registrationTemplatesImpl.setModifiedDate(getModifiedDate());
		registrationTemplatesImpl.setGovAgencyCode(getGovAgencyCode());
		registrationTemplatesImpl.setGovAgencyName(getGovAgencyName());
		registrationTemplatesImpl.setFormNo(getFormNo());
		registrationTemplatesImpl.setFormName(getFormName());
		registrationTemplatesImpl.setMultiple(getMultiple());
		registrationTemplatesImpl.setFormScript(getFormScript());
		registrationTemplatesImpl.setFormReport(getFormReport());
		registrationTemplatesImpl.setSampleData(getSampleData());
		registrationTemplatesImpl.setFormScriptOfficial(getFormScriptOfficial());
		registrationTemplatesImpl.setFormReportOfficial(getFormReportOfficial());
		registrationTemplatesImpl.setSampleDataOfficial(getSampleDataOfficial());

		registrationTemplatesImpl.resetOriginalValues();

		return registrationTemplatesImpl;
	}

	@Override
	public int compareTo(RegistrationTemplates registrationTemplates) {
		long primaryKey = registrationTemplates.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RegistrationTemplates)) {
			return false;
		}

		RegistrationTemplates registrationTemplates = (RegistrationTemplates)obj;

		long primaryKey = registrationTemplates.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		RegistrationTemplatesModelImpl registrationTemplatesModelImpl = this;

		registrationTemplatesModelImpl._originalUuid = registrationTemplatesModelImpl._uuid;

		registrationTemplatesModelImpl._originalRegistrationTemplateId = registrationTemplatesModelImpl._registrationTemplateId;

		registrationTemplatesModelImpl._setOriginalRegistrationTemplateId = false;

		registrationTemplatesModelImpl._originalGroupId = registrationTemplatesModelImpl._groupId;

		registrationTemplatesModelImpl._setOriginalGroupId = false;

		registrationTemplatesModelImpl._setModifiedDate = false;

		registrationTemplatesModelImpl._originalGovAgencyCode = registrationTemplatesModelImpl._govAgencyCode;

		registrationTemplatesModelImpl._originalFormNo = registrationTemplatesModelImpl._formNo;

		registrationTemplatesModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<RegistrationTemplates> toCacheModel() {
		RegistrationTemplatesCacheModel registrationTemplatesCacheModel = new RegistrationTemplatesCacheModel();

		registrationTemplatesCacheModel.uuid = getUuid();

		String uuid = registrationTemplatesCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			registrationTemplatesCacheModel.uuid = null;
		}

		registrationTemplatesCacheModel.registrationTemplateId = getRegistrationTemplateId();

		registrationTemplatesCacheModel.groupId = getGroupId();

		registrationTemplatesCacheModel.userId = getUserId();

		registrationTemplatesCacheModel.userName = getUserName();

		String userName = registrationTemplatesCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			registrationTemplatesCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			registrationTemplatesCacheModel.createDate = createDate.getTime();
		}
		else {
			registrationTemplatesCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			registrationTemplatesCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			registrationTemplatesCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		registrationTemplatesCacheModel.govAgencyCode = getGovAgencyCode();

		String govAgencyCode = registrationTemplatesCacheModel.govAgencyCode;

		if ((govAgencyCode != null) && (govAgencyCode.length() == 0)) {
			registrationTemplatesCacheModel.govAgencyCode = null;
		}

		registrationTemplatesCacheModel.govAgencyName = getGovAgencyName();

		String govAgencyName = registrationTemplatesCacheModel.govAgencyName;

		if ((govAgencyName != null) && (govAgencyName.length() == 0)) {
			registrationTemplatesCacheModel.govAgencyName = null;
		}

		registrationTemplatesCacheModel.formNo = getFormNo();

		String formNo = registrationTemplatesCacheModel.formNo;

		if ((formNo != null) && (formNo.length() == 0)) {
			registrationTemplatesCacheModel.formNo = null;
		}

		registrationTemplatesCacheModel.formName = getFormName();

		String formName = registrationTemplatesCacheModel.formName;

		if ((formName != null) && (formName.length() == 0)) {
			registrationTemplatesCacheModel.formName = null;
		}

		registrationTemplatesCacheModel.multiple = getMultiple();

		registrationTemplatesCacheModel.formScript = getFormScript();

		String formScript = registrationTemplatesCacheModel.formScript;

		if ((formScript != null) && (formScript.length() == 0)) {
			registrationTemplatesCacheModel.formScript = null;
		}

		registrationTemplatesCacheModel.formReport = getFormReport();

		String formReport = registrationTemplatesCacheModel.formReport;

		if ((formReport != null) && (formReport.length() == 0)) {
			registrationTemplatesCacheModel.formReport = null;
		}

		registrationTemplatesCacheModel.sampleData = getSampleData();

		String sampleData = registrationTemplatesCacheModel.sampleData;

		if ((sampleData != null) && (sampleData.length() == 0)) {
			registrationTemplatesCacheModel.sampleData = null;
		}

		registrationTemplatesCacheModel.formScriptOfficial = getFormScriptOfficial();

		String formScriptOfficial = registrationTemplatesCacheModel.formScriptOfficial;

		if ((formScriptOfficial != null) && (formScriptOfficial.length() == 0)) {
			registrationTemplatesCacheModel.formScriptOfficial = null;
		}

		registrationTemplatesCacheModel.formReportOfficial = getFormReportOfficial();

		String formReportOfficial = registrationTemplatesCacheModel.formReportOfficial;

		if ((formReportOfficial != null) && (formReportOfficial.length() == 0)) {
			registrationTemplatesCacheModel.formReportOfficial = null;
		}

		registrationTemplatesCacheModel.sampleDataOfficial = getSampleDataOfficial();

		String sampleDataOfficial = registrationTemplatesCacheModel.sampleDataOfficial;

		if ((sampleDataOfficial != null) && (sampleDataOfficial.length() == 0)) {
			registrationTemplatesCacheModel.sampleDataOfficial = null;
		}

		return registrationTemplatesCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(37);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", registrationTemplateId=");
		sb.append(getRegistrationTemplateId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", govAgencyCode=");
		sb.append(getGovAgencyCode());
		sb.append(", govAgencyName=");
		sb.append(getGovAgencyName());
		sb.append(", formNo=");
		sb.append(getFormNo());
		sb.append(", formName=");
		sb.append(getFormName());
		sb.append(", multiple=");
		sb.append(getMultiple());
		sb.append(", formScript=");
		sb.append(getFormScript());
		sb.append(", formReport=");
		sb.append(getFormReport());
		sb.append(", sampleData=");
		sb.append(getSampleData());
		sb.append(", formScriptOfficial=");
		sb.append(getFormScriptOfficial());
		sb.append(", formReportOfficial=");
		sb.append(getFormReportOfficial());
		sb.append(", sampleDataOfficial=");
		sb.append(getSampleDataOfficial());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(58);

		sb.append("<model><model-name>");
		sb.append("org.opencps.dossiermgt.model.RegistrationTemplates");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registrationTemplateId</column-name><column-value><![CDATA[");
		sb.append(getRegistrationTemplateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>govAgencyCode</column-name><column-value><![CDATA[");
		sb.append(getGovAgencyCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>govAgencyName</column-name><column-value><![CDATA[");
		sb.append(getGovAgencyName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>formNo</column-name><column-value><![CDATA[");
		sb.append(getFormNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>formName</column-name><column-value><![CDATA[");
		sb.append(getFormName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>multiple</column-name><column-value><![CDATA[");
		sb.append(getMultiple());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>formScript</column-name><column-value><![CDATA[");
		sb.append(getFormScript());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>formReport</column-name><column-value><![CDATA[");
		sb.append(getFormReport());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sampleData</column-name><column-value><![CDATA[");
		sb.append(getSampleData());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>formScriptOfficial</column-name><column-value><![CDATA[");
		sb.append(getFormScriptOfficial());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>formReportOfficial</column-name><column-value><![CDATA[");
		sb.append(getFormReportOfficial());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sampleDataOfficial</column-name><column-value><![CDATA[");
		sb.append(getSampleDataOfficial());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = RegistrationTemplates.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			RegistrationTemplates.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _registrationTemplateId;
	private long _originalRegistrationTemplateId;
	private boolean _setOriginalRegistrationTemplateId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _govAgencyCode;
	private String _originalGovAgencyCode;
	private String _govAgencyName;
	private String _formNo;
	private String _originalFormNo;
	private String _formName;
	private boolean _multiple;
	private String _formScript;
	private String _formReport;
	private String _sampleData;
	private String _formScriptOfficial;
	private String _formReportOfficial;
	private String _sampleDataOfficial;
	private long _columnBitmask;
	private RegistrationTemplates _escapedModel;
}