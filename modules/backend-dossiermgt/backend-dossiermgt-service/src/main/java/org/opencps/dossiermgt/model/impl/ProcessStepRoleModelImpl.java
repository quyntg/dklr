/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.dossiermgt.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import org.opencps.dossiermgt.model.ProcessStepRole;
import org.opencps.dossiermgt.model.ProcessStepRoleModel;
import org.opencps.dossiermgt.service.persistence.ProcessStepRolePK;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ProcessStepRole service. Represents a row in the &quot;opencps_processsteprole&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ProcessStepRoleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProcessStepRoleImpl}.
 * </p>
 *
 * @author huymq
 * @see ProcessStepRoleImpl
 * @see ProcessStepRole
 * @see ProcessStepRoleModel
 * @generated
 */
@ProviderType
public class ProcessStepRoleModelImpl extends BaseModelImpl<ProcessStepRole>
	implements ProcessStepRoleModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a process step role model instance should use the {@link ProcessStepRole} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_processsteprole";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "processStepId", Types.BIGINT },
			{ "roleId", Types.BIGINT },
			{ "moderator", Types.BOOLEAN },
			{ "condition_", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("processStepId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("roleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("moderator", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("condition_", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table opencps_processsteprole (uuid_ VARCHAR(75) null,processStepId LONG not null,roleId LONG not null,moderator BOOLEAN,condition_ VARCHAR(75) null,primary key (processStepId, roleId))";
	public static final String TABLE_SQL_DROP = "drop table opencps_processsteprole";
	public static final String ORDER_BY_JPQL = " ORDER BY processStepRole.id.processStepId ASC, processStepRole.id.roleId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_processsteprole.processStepId ASC, opencps_processsteprole.roleId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.dossiermgt.model.ProcessStepRole"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.dossiermgt.model.ProcessStepRole"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.dossiermgt.model.ProcessStepRole"),
			true);
	public static final long PROCESSSTEPID_COLUMN_BITMASK = 1L;
	public static final long ROLEID_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"lock.expiration.time.org.opencps.dossiermgt.model.ProcessStepRole"));

	public ProcessStepRoleModelImpl() {
	}

	@Override
	public ProcessStepRolePK getPrimaryKey() {
		return new ProcessStepRolePK(_processStepId, _roleId);
	}

	@Override
	public void setPrimaryKey(ProcessStepRolePK primaryKey) {
		setProcessStepId(primaryKey.processStepId);
		setRoleId(primaryKey.roleId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new ProcessStepRolePK(_processStepId, _roleId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((ProcessStepRolePK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return ProcessStepRole.class;
	}

	@Override
	public String getModelClassName() {
		return ProcessStepRole.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("processStepId", getProcessStepId());
		attributes.put("roleId", getRoleId());
		attributes.put("moderator", getModerator());
		attributes.put("condition", getCondition());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long processStepId = (Long)attributes.get("processStepId");

		if (processStepId != null) {
			setProcessStepId(processStepId);
		}

		Long roleId = (Long)attributes.get("roleId");

		if (roleId != null) {
			setRoleId(roleId);
		}

		Boolean moderator = (Boolean)attributes.get("moderator");

		if (moderator != null) {
			setModerator(moderator);
		}

		String condition = (String)attributes.get("condition");

		if (condition != null) {
			setCondition(condition);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getProcessStepId() {
		return _processStepId;
	}

	@Override
	public void setProcessStepId(long processStepId) {
		_columnBitmask |= PROCESSSTEPID_COLUMN_BITMASK;

		if (!_setOriginalProcessStepId) {
			_setOriginalProcessStepId = true;

			_originalProcessStepId = _processStepId;
		}

		_processStepId = processStepId;
	}

	public long getOriginalProcessStepId() {
		return _originalProcessStepId;
	}

	@Override
	public long getRoleId() {
		return _roleId;
	}

	@Override
	public void setRoleId(long roleId) {
		_columnBitmask |= ROLEID_COLUMN_BITMASK;

		if (!_setOriginalRoleId) {
			_setOriginalRoleId = true;

			_originalRoleId = _roleId;
		}

		_roleId = roleId;
	}

	public long getOriginalRoleId() {
		return _originalRoleId;
	}

	@Override
	public boolean getModerator() {
		return _moderator;
	}

	@Override
	public boolean isModerator() {
		return _moderator;
	}

	@Override
	public void setModerator(boolean moderator) {
		_moderator = moderator;
	}

	@Override
	public String getCondition() {
		if (_condition == null) {
			return StringPool.BLANK;
		}
		else {
			return _condition;
		}
	}

	@Override
	public void setCondition(String condition) {
		_condition = condition;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ProcessStepRole toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ProcessStepRole)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProcessStepRoleImpl processStepRoleImpl = new ProcessStepRoleImpl();

		processStepRoleImpl.setUuid(getUuid());
		processStepRoleImpl.setProcessStepId(getProcessStepId());
		processStepRoleImpl.setRoleId(getRoleId());
		processStepRoleImpl.setModerator(getModerator());
		processStepRoleImpl.setCondition(getCondition());

		processStepRoleImpl.resetOriginalValues();

		return processStepRoleImpl;
	}

	@Override
	public int compareTo(ProcessStepRole processStepRole) {
		ProcessStepRolePK primaryKey = processStepRole.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ProcessStepRole)) {
			return false;
		}

		ProcessStepRole processStepRole = (ProcessStepRole)obj;

		ProcessStepRolePK primaryKey = processStepRole.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ProcessStepRoleModelImpl processStepRoleModelImpl = this;

		processStepRoleModelImpl._originalUuid = processStepRoleModelImpl._uuid;

		processStepRoleModelImpl._originalProcessStepId = processStepRoleModelImpl._processStepId;

		processStepRoleModelImpl._setOriginalProcessStepId = false;

		processStepRoleModelImpl._originalRoleId = processStepRoleModelImpl._roleId;

		processStepRoleModelImpl._setOriginalRoleId = false;

		processStepRoleModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ProcessStepRole> toCacheModel() {
		ProcessStepRoleCacheModel processStepRoleCacheModel = new ProcessStepRoleCacheModel();

		processStepRoleCacheModel.processStepRolePK = getPrimaryKey();

		processStepRoleCacheModel.uuid = getUuid();

		String uuid = processStepRoleCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			processStepRoleCacheModel.uuid = null;
		}

		processStepRoleCacheModel.processStepId = getProcessStepId();

		processStepRoleCacheModel.roleId = getRoleId();

		processStepRoleCacheModel.moderator = getModerator();

		processStepRoleCacheModel.condition = getCondition();

		String condition = processStepRoleCacheModel.condition;

		if ((condition != null) && (condition.length() == 0)) {
			processStepRoleCacheModel.condition = null;
		}

		return processStepRoleCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", processStepId=");
		sb.append(getProcessStepId());
		sb.append(", roleId=");
		sb.append(getRoleId());
		sb.append(", moderator=");
		sb.append(getModerator());
		sb.append(", condition=");
		sb.append(getCondition());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("org.opencps.dossiermgt.model.ProcessStepRole");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processStepId</column-name><column-value><![CDATA[");
		sb.append(getProcessStepId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>roleId</column-name><column-value><![CDATA[");
		sb.append(getRoleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>moderator</column-name><column-value><![CDATA[");
		sb.append(getModerator());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>condition</column-name><column-value><![CDATA[");
		sb.append(getCondition());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ProcessStepRole.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ProcessStepRole.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _processStepId;
	private long _originalProcessStepId;
	private boolean _setOriginalProcessStepId;
	private long _roleId;
	private long _originalRoleId;
	private boolean _setOriginalRoleId;
	private boolean _moderator;
	private String _condition;
	private long _columnBitmask;
	private ProcessStepRole _escapedModel;
}