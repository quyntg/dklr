/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.filterconfig.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.filterconfig.model.DMDataItem;
import com.fds.vr.filterconfig.model.DMDataItemModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the DMDataItem service. Represents a row in the &quot;dm_dataitem&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DMDataItemModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DMDataItemImpl}.
 * </p>
 *
 * @author NhanHoang
 * @see DMDataItemImpl
 * @see DMDataItem
 * @see DMDataItemModel
 * @generated
 */
@ProviderType
public class DMDataItemModelImpl extends BaseModelImpl<DMDataItem>
	implements DMDataItemModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dm data item model instance should use the {@link DMDataItem} interface instead.
	 */
	public static final String TABLE_NAME = "dm_dataitem";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "dataGroupId", Types.BIGINT },
			{ "code_0", Types.VARCHAR },
			{ "code_1", Types.VARCHAR },
			{ "code_2", Types.VARCHAR },
			{ "code_3", Types.VARCHAR },
			{ "level", Types.INTEGER },
			{ "name", Types.VARCHAR },
			{ "altername", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "validatedFrom", Types.TIMESTAMP },
			{ "validatedTo", Types.TIMESTAMP },
			{ "status", Types.INTEGER },
			{ "synchDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dataGroupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("code_0", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("code_1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("code_2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("code_3", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("level", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("altername", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("validatedFrom", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("validatedTo", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("synchDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table dm_dataitem (id LONG not null primary key,dataGroupId LONG,code_0 VARCHAR(75) null,code_1 VARCHAR(75) null,code_2 VARCHAR(75) null,code_3 VARCHAR(75) null,level INTEGER,name VARCHAR(75) null,altername VARCHAR(75) null,description VARCHAR(75) null,validatedFrom DATE null,validatedTo DATE null,status INTEGER,synchDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table dm_dataitem";
	public static final String ORDER_BY_JPQL = " ORDER BY dmDataItem.id DESC";
	public static final String ORDER_BY_SQL = " ORDER BY dm_dataitem.id DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(vr.filterconfig.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fds.vr.filterconfig.model.DMDataItem"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(vr.filterconfig.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fds.vr.filterconfig.model.DMDataItem"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(vr.filterconfig.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fds.vr.filterconfig.model.DMDataItem"),
			true);
	public static final long DATAGROUPID_COLUMN_BITMASK = 1L;
	public static final long LEVEL_COLUMN_BITMASK = 2L;
	public static final long ID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(vr.filterconfig.service.util.ServiceProps.get(
				"lock.expiration.time.com.fds.vr.filterconfig.model.DMDataItem"));

	public DMDataItemModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DMDataItem.class;
	}

	@Override
	public String getModelClassName() {
		return DMDataItem.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("dataGroupId", getDataGroupId());
		attributes.put("code_0", getCode_0());
		attributes.put("code_1", getCode_1());
		attributes.put("code_2", getCode_2());
		attributes.put("code_3", getCode_3());
		attributes.put("level", getLevel());
		attributes.put("name", getName());
		attributes.put("altername", getAltername());
		attributes.put("description", getDescription());
		attributes.put("validatedFrom", getValidatedFrom());
		attributes.put("validatedTo", getValidatedTo());
		attributes.put("status", getStatus());
		attributes.put("syncDate", getSyncDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long dataGroupId = (Long)attributes.get("dataGroupId");

		if (dataGroupId != null) {
			setDataGroupId(dataGroupId);
		}

		String code_0 = (String)attributes.get("code_0");

		if (code_0 != null) {
			setCode_0(code_0);
		}

		String code_1 = (String)attributes.get("code_1");

		if (code_1 != null) {
			setCode_1(code_1);
		}

		String code_2 = (String)attributes.get("code_2");

		if (code_2 != null) {
			setCode_2(code_2);
		}

		String code_3 = (String)attributes.get("code_3");

		if (code_3 != null) {
			setCode_3(code_3);
		}

		Integer level = (Integer)attributes.get("level");

		if (level != null) {
			setLevel(level);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String altername = (String)attributes.get("altername");

		if (altername != null) {
			setAltername(altername);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Date validatedFrom = (Date)attributes.get("validatedFrom");

		if (validatedFrom != null) {
			setValidatedFrom(validatedFrom);
		}

		Date validatedTo = (Date)attributes.get("validatedTo");

		if (validatedTo != null) {
			setValidatedTo(validatedTo);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Date syncDate = (Date)attributes.get("syncDate");

		if (syncDate != null) {
			setSyncDate(syncDate);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@Override
	public long getDataGroupId() {
		return _dataGroupId;
	}

	@Override
	public void setDataGroupId(long dataGroupId) {
		_columnBitmask |= DATAGROUPID_COLUMN_BITMASK;

		if (!_setOriginalDataGroupId) {
			_setOriginalDataGroupId = true;

			_originalDataGroupId = _dataGroupId;
		}

		_dataGroupId = dataGroupId;
	}

	public long getOriginalDataGroupId() {
		return _originalDataGroupId;
	}

	@Override
	public String getCode_0() {
		if (_code_0 == null) {
			return StringPool.BLANK;
		}
		else {
			return _code_0;
		}
	}

	@Override
	public void setCode_0(String code_0) {
		_code_0 = code_0;
	}

	@Override
	public String getCode_1() {
		if (_code_1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _code_1;
		}
	}

	@Override
	public void setCode_1(String code_1) {
		_code_1 = code_1;
	}

	@Override
	public String getCode_2() {
		if (_code_2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _code_2;
		}
	}

	@Override
	public void setCode_2(String code_2) {
		_code_2 = code_2;
	}

	@Override
	public String getCode_3() {
		if (_code_3 == null) {
			return StringPool.BLANK;
		}
		else {
			return _code_3;
		}
	}

	@Override
	public void setCode_3(String code_3) {
		_code_3 = code_3;
	}

	@Override
	public int getLevel() {
		return _level;
	}

	@Override
	public void setLevel(int level) {
		_columnBitmask |= LEVEL_COLUMN_BITMASK;

		if (!_setOriginalLevel) {
			_setOriginalLevel = true;

			_originalLevel = _level;
		}

		_level = level;
	}

	public int getOriginalLevel() {
		return _originalLevel;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getAltername() {
		if (_altername == null) {
			return StringPool.BLANK;
		}
		else {
			return _altername;
		}
	}

	@Override
	public void setAltername(String altername) {
		_altername = altername;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public Date getValidatedFrom() {
		return _validatedFrom;
	}

	@Override
	public void setValidatedFrom(Date validatedFrom) {
		_validatedFrom = validatedFrom;
	}

	@Override
	public Date getValidatedTo() {
		return _validatedTo;
	}

	@Override
	public void setValidatedTo(Date validatedTo) {
		_validatedTo = validatedTo;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@Override
	public Date getSyncDate() {
		return _syncDate;
	}

	@Override
	public void setSyncDate(Date syncDate) {
		_syncDate = syncDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			DMDataItem.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DMDataItem toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DMDataItem)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DMDataItemImpl dmDataItemImpl = new DMDataItemImpl();

		dmDataItemImpl.setId(getId());
		dmDataItemImpl.setDataGroupId(getDataGroupId());
		dmDataItemImpl.setCode_0(getCode_0());
		dmDataItemImpl.setCode_1(getCode_1());
		dmDataItemImpl.setCode_2(getCode_2());
		dmDataItemImpl.setCode_3(getCode_3());
		dmDataItemImpl.setLevel(getLevel());
		dmDataItemImpl.setName(getName());
		dmDataItemImpl.setAltername(getAltername());
		dmDataItemImpl.setDescription(getDescription());
		dmDataItemImpl.setValidatedFrom(getValidatedFrom());
		dmDataItemImpl.setValidatedTo(getValidatedTo());
		dmDataItemImpl.setStatus(getStatus());
		dmDataItemImpl.setSyncDate(getSyncDate());

		dmDataItemImpl.resetOriginalValues();

		return dmDataItemImpl;
	}

	@Override
	public int compareTo(DMDataItem dmDataItem) {
		int value = 0;

		if (getId() < dmDataItem.getId()) {
			value = -1;
		}
		else if (getId() > dmDataItem.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DMDataItem)) {
			return false;
		}

		DMDataItem dmDataItem = (DMDataItem)obj;

		long primaryKey = dmDataItem.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		DMDataItemModelImpl dmDataItemModelImpl = this;

		dmDataItemModelImpl._originalDataGroupId = dmDataItemModelImpl._dataGroupId;

		dmDataItemModelImpl._setOriginalDataGroupId = false;

		dmDataItemModelImpl._originalLevel = dmDataItemModelImpl._level;

		dmDataItemModelImpl._setOriginalLevel = false;

		dmDataItemModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DMDataItem> toCacheModel() {
		DMDataItemCacheModel dmDataItemCacheModel = new DMDataItemCacheModel();

		dmDataItemCacheModel.id = getId();

		dmDataItemCacheModel.dataGroupId = getDataGroupId();

		dmDataItemCacheModel.code_0 = getCode_0();

		String code_0 = dmDataItemCacheModel.code_0;

		if ((code_0 != null) && (code_0.length() == 0)) {
			dmDataItemCacheModel.code_0 = null;
		}

		dmDataItemCacheModel.code_1 = getCode_1();

		String code_1 = dmDataItemCacheModel.code_1;

		if ((code_1 != null) && (code_1.length() == 0)) {
			dmDataItemCacheModel.code_1 = null;
		}

		dmDataItemCacheModel.code_2 = getCode_2();

		String code_2 = dmDataItemCacheModel.code_2;

		if ((code_2 != null) && (code_2.length() == 0)) {
			dmDataItemCacheModel.code_2 = null;
		}

		dmDataItemCacheModel.code_3 = getCode_3();

		String code_3 = dmDataItemCacheModel.code_3;

		if ((code_3 != null) && (code_3.length() == 0)) {
			dmDataItemCacheModel.code_3 = null;
		}

		dmDataItemCacheModel.level = getLevel();

		dmDataItemCacheModel.name = getName();

		String name = dmDataItemCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			dmDataItemCacheModel.name = null;
		}

		dmDataItemCacheModel.altername = getAltername();

		String altername = dmDataItemCacheModel.altername;

		if ((altername != null) && (altername.length() == 0)) {
			dmDataItemCacheModel.altername = null;
		}

		dmDataItemCacheModel.description = getDescription();

		String description = dmDataItemCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			dmDataItemCacheModel.description = null;
		}

		Date validatedFrom = getValidatedFrom();

		if (validatedFrom != null) {
			dmDataItemCacheModel.validatedFrom = validatedFrom.getTime();
		}
		else {
			dmDataItemCacheModel.validatedFrom = Long.MIN_VALUE;
		}

		Date validatedTo = getValidatedTo();

		if (validatedTo != null) {
			dmDataItemCacheModel.validatedTo = validatedTo.getTime();
		}
		else {
			dmDataItemCacheModel.validatedTo = Long.MIN_VALUE;
		}

		dmDataItemCacheModel.status = getStatus();

		Date syncDate = getSyncDate();

		if (syncDate != null) {
			dmDataItemCacheModel.syncDate = syncDate.getTime();
		}
		else {
			dmDataItemCacheModel.syncDate = Long.MIN_VALUE;
		}

		return dmDataItemCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", dataGroupId=");
		sb.append(getDataGroupId());
		sb.append(", code_0=");
		sb.append(getCode_0());
		sb.append(", code_1=");
		sb.append(getCode_1());
		sb.append(", code_2=");
		sb.append(getCode_2());
		sb.append(", code_3=");
		sb.append(getCode_3());
		sb.append(", level=");
		sb.append(getLevel());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", altername=");
		sb.append(getAltername());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", validatedFrom=");
		sb.append(getValidatedFrom());
		sb.append(", validatedTo=");
		sb.append(getValidatedTo());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", syncDate=");
		sb.append(getSyncDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.fds.vr.filterconfig.model.DMDataItem");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dataGroupId</column-name><column-value><![CDATA[");
		sb.append(getDataGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code_0</column-name><column-value><![CDATA[");
		sb.append(getCode_0());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code_1</column-name><column-value><![CDATA[");
		sb.append(getCode_1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code_2</column-name><column-value><![CDATA[");
		sb.append(getCode_2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code_3</column-name><column-value><![CDATA[");
		sb.append(getCode_3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>level</column-name><column-value><![CDATA[");
		sb.append(getLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>altername</column-name><column-value><![CDATA[");
		sb.append(getAltername());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>validatedFrom</column-name><column-value><![CDATA[");
		sb.append(getValidatedFrom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>validatedTo</column-name><column-value><![CDATA[");
		sb.append(getValidatedTo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncDate</column-name><column-value><![CDATA[");
		sb.append(getSyncDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = DMDataItem.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			DMDataItem.class
		};
	private long _id;
	private long _dataGroupId;
	private long _originalDataGroupId;
	private boolean _setOriginalDataGroupId;
	private String _code_0;
	private String _code_1;
	private String _code_2;
	private String _code_3;
	private int _level;
	private int _originalLevel;
	private boolean _setOriginalLevel;
	private String _name;
	private String _altername;
	private String _description;
	private Date _validatedFrom;
	private Date _validatedTo;
	private int _status;
	private Date _syncDate;
	private long _columnBitmask;
	private DMDataItem _escapedModel;
}