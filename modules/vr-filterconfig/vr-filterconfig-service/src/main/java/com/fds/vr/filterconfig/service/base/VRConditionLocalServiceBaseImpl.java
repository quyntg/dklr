/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.filterconfig.service.base;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.filterconfig.model.VRCondition;
import com.fds.vr.filterconfig.service.VRConditionLocalService;
import com.fds.vr.filterconfig.service.persistence.DMDataItemPersistence;
import com.fds.vr.filterconfig.service.persistence.VRConditionPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the vr condition local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.fds.vr.filterconfig.service.impl.VRConditionLocalServiceImpl}.
 * </p>
 *
 * @author NhanHoang
 * @see com.fds.vr.filterconfig.service.impl.VRConditionLocalServiceImpl
 * @see com.fds.vr.filterconfig.service.VRConditionLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class VRConditionLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements VRConditionLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.fds.vr.filterconfig.service.VRConditionLocalServiceUtil} to access the vr condition local service.
	 */

	/**
	 * Adds the vr condition to the database. Also notifies the appropriate model listeners.
	 *
	 * @param vrCondition the vr condition
	 * @return the vr condition that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public VRCondition addVRCondition(VRCondition vrCondition) {
		vrCondition.setNew(true);

		return vrConditionPersistence.update(vrCondition);
	}

	/**
	 * Creates a new vr condition with the primary key. Does not add the vr condition to the database.
	 *
	 * @param id the primary key for the new vr condition
	 * @return the new vr condition
	 */
	@Override
	public VRCondition createVRCondition(long id) {
		return vrConditionPersistence.create(id);
	}

	/**
	 * Deletes the vr condition with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the vr condition
	 * @return the vr condition that was removed
	 * @throws PortalException if a vr condition with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public VRCondition deleteVRCondition(long id) throws PortalException {
		return vrConditionPersistence.remove(id);
	}

	/**
	 * Deletes the vr condition from the database. Also notifies the appropriate model listeners.
	 *
	 * @param vrCondition the vr condition
	 * @return the vr condition that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public VRCondition deleteVRCondition(VRCondition vrCondition) {
		return vrConditionPersistence.remove(vrCondition);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(VRCondition.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return vrConditionPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.fds.vr.filterconfig.model.impl.VRConditionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return vrConditionPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.fds.vr.filterconfig.model.impl.VRConditionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return vrConditionPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return vrConditionPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return vrConditionPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public VRCondition fetchVRCondition(long id) {
		return vrConditionPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the vr condition with the primary key.
	 *
	 * @param id the primary key of the vr condition
	 * @return the vr condition
	 * @throws PortalException if a vr condition with the primary key could not be found
	 */
	@Override
	public VRCondition getVRCondition(long id) throws PortalException {
		return vrConditionPersistence.findByPrimaryKey(id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(vrConditionLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(VRCondition.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(vrConditionLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(VRCondition.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(vrConditionLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(VRCondition.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return vrConditionLocalService.deleteVRCondition((VRCondition)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return vrConditionPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the vr conditions.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.fds.vr.filterconfig.model.impl.VRConditionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of vr conditions
	 * @param end the upper bound of the range of vr conditions (not inclusive)
	 * @return the range of vr conditions
	 */
	@Override
	public List<VRCondition> getVRConditions(int start, int end) {
		return vrConditionPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of vr conditions.
	 *
	 * @return the number of vr conditions
	 */
	@Override
	public int getVRConditionsCount() {
		return vrConditionPersistence.countAll();
	}

	/**
	 * Updates the vr condition in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param vrCondition the vr condition
	 * @return the vr condition that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public VRCondition updateVRCondition(VRCondition vrCondition) {
		return vrConditionPersistence.update(vrCondition);
	}

	/**
	 * Returns the dm data item local service.
	 *
	 * @return the dm data item local service
	 */
	public com.fds.vr.filterconfig.service.DMDataItemLocalService getDMDataItemLocalService() {
		return dmDataItemLocalService;
	}

	/**
	 * Sets the dm data item local service.
	 *
	 * @param dmDataItemLocalService the dm data item local service
	 */
	public void setDMDataItemLocalService(
		com.fds.vr.filterconfig.service.DMDataItemLocalService dmDataItemLocalService) {
		this.dmDataItemLocalService = dmDataItemLocalService;
	}

	/**
	 * Returns the dm data item persistence.
	 *
	 * @return the dm data item persistence
	 */
	public DMDataItemPersistence getDMDataItemPersistence() {
		return dmDataItemPersistence;
	}

	/**
	 * Sets the dm data item persistence.
	 *
	 * @param dmDataItemPersistence the dm data item persistence
	 */
	public void setDMDataItemPersistence(
		DMDataItemPersistence dmDataItemPersistence) {
		this.dmDataItemPersistence = dmDataItemPersistence;
	}

	/**
	 * Returns the vr condition local service.
	 *
	 * @return the vr condition local service
	 */
	public VRConditionLocalService getVRConditionLocalService() {
		return vrConditionLocalService;
	}

	/**
	 * Sets the vr condition local service.
	 *
	 * @param vrConditionLocalService the vr condition local service
	 */
	public void setVRConditionLocalService(
		VRConditionLocalService vrConditionLocalService) {
		this.vrConditionLocalService = vrConditionLocalService;
	}

	/**
	 * Returns the vr condition persistence.
	 *
	 * @return the vr condition persistence
	 */
	public VRConditionPersistence getVRConditionPersistence() {
		return vrConditionPersistence;
	}

	/**
	 * Sets the vr condition persistence.
	 *
	 * @param vrConditionPersistence the vr condition persistence
	 */
	public void setVRConditionPersistence(
		VRConditionPersistence vrConditionPersistence) {
		this.vrConditionPersistence = vrConditionPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.fds.vr.filterconfig.model.VRCondition",
			vrConditionLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.fds.vr.filterconfig.model.VRCondition");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return VRConditionLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return VRCondition.class;
	}

	protected String getModelClassName() {
		return VRCondition.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = vrConditionPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.fds.vr.filterconfig.service.DMDataItemLocalService.class)
	protected com.fds.vr.filterconfig.service.DMDataItemLocalService dmDataItemLocalService;
	@BeanReference(type = DMDataItemPersistence.class)
	protected DMDataItemPersistence dmDataItemPersistence;
	@BeanReference(type = VRConditionLocalService.class)
	protected VRConditionLocalService vrConditionLocalService;
	@BeanReference(type = VRConditionPersistence.class)
	protected VRConditionPersistence vrConditionPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}